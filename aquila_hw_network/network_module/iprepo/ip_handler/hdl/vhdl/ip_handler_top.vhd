-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ip_handler_top is
port (
    s_axis_raw_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    s_axis_raw_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
    s_axis_raw_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axis_arp_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axis_arp_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axis_arp_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_icmpv6_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axis_icmpv6_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axis_icmpv6_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_ipv6udp_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axis_ipv6udp_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axis_ipv6udp_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_icmp_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axis_icmp_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axis_icmp_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_udp_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axis_udp_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axis_udp_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_tcp_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axis_tcp_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axis_tcp_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_roce_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axis_roce_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axis_roce_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    myIpAddress_V : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axis_raw_TVALID : IN STD_LOGIC;
    s_axis_raw_TREADY : OUT STD_LOGIC;
    m_axis_arp_TVALID : OUT STD_LOGIC;
    m_axis_arp_TREADY : IN STD_LOGIC;
    m_axis_icmp_TVALID : OUT STD_LOGIC;
    m_axis_icmp_TREADY : IN STD_LOGIC;
    m_axis_tcp_TVALID : OUT STD_LOGIC;
    m_axis_tcp_TREADY : IN STD_LOGIC;
    m_axis_icmpv6_TVALID : OUT STD_LOGIC;
    m_axis_icmpv6_TREADY : IN STD_LOGIC;
    m_axis_ipv6udp_TVALID : OUT STD_LOGIC;
    m_axis_ipv6udp_TREADY : IN STD_LOGIC;
    m_axis_udp_TVALID : OUT STD_LOGIC;
    m_axis_udp_TREADY : IN STD_LOGIC;
    m_axis_roce_TVALID : OUT STD_LOGIC;
    m_axis_roce_TREADY : IN STD_LOGIC );
end;


architecture behav of ip_handler_top is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "ip_handler_top,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k325t-ffg900-2,HLS_INPUT_CLOCK=6.400000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=5.440000,HLS_SYN_LAT=23,HLS_SYN_TPT=1,HLS_SYN_MEM=5,HLS_SYN_DSP=0,HLS_SYN_FF=3282,HLS_SYN_LUT=9911,HLS_VERSION=2019_1}";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal ap_rst_n_inv : STD_LOGIC;
    signal detect_eth_protocol_U0_ap_start : STD_LOGIC;
    signal detect_eth_protocol_U0_ap_done : STD_LOGIC;
    signal detect_eth_protocol_U0_ap_continue : STD_LOGIC;
    signal detect_eth_protocol_U0_ap_idle : STD_LOGIC;
    signal detect_eth_protocol_U0_ap_ready : STD_LOGIC;
    signal detect_eth_protocol_U0_ethDataFifo_V_data_V_din : STD_LOGIC_VECTOR (63 downto 0);
    signal detect_eth_protocol_U0_ethDataFifo_V_data_V_write : STD_LOGIC;
    signal detect_eth_protocol_U0_ethDataFifo_V_keep_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal detect_eth_protocol_U0_ethDataFifo_V_keep_V_write : STD_LOGIC;
    signal detect_eth_protocol_U0_ethDataFifo_V_last_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal detect_eth_protocol_U0_ethDataFifo_V_last_V_write : STD_LOGIC;
    signal detect_eth_protocol_U0_etherTypeFifo_V_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal detect_eth_protocol_U0_etherTypeFifo_V_V_write : STD_LOGIC;
    signal detect_eth_protocol_U0_s_axis_raw_TREADY : STD_LOGIC;
    signal route_by_eth_protoco_U0_ap_start : STD_LOGIC;
    signal route_by_eth_protoco_U0_ap_done : STD_LOGIC;
    signal route_by_eth_protoco_U0_ap_continue : STD_LOGIC;
    signal route_by_eth_protoco_U0_ap_idle : STD_LOGIC;
    signal route_by_eth_protoco_U0_ap_ready : STD_LOGIC;
    signal route_by_eth_protoco_U0_etherTypeFifo_V_V_read : STD_LOGIC;
    signal route_by_eth_protoco_U0_ethDataFifo_V_data_V_read : STD_LOGIC;
    signal route_by_eth_protoco_U0_ethDataFifo_V_keep_V_read : STD_LOGIC;
    signal route_by_eth_protoco_U0_ethDataFifo_V_last_V_read : STD_LOGIC;
    signal route_by_eth_protoco_U0_ipv6ShiftFifo_V_data_din : STD_LOGIC_VECTOR (63 downto 0);
    signal route_by_eth_protoco_U0_ipv6ShiftFifo_V_data_write : STD_LOGIC;
    signal route_by_eth_protoco_U0_ipv6ShiftFifo_V_keep_din : STD_LOGIC_VECTOR (7 downto 0);
    signal route_by_eth_protoco_U0_ipv6ShiftFifo_V_keep_write : STD_LOGIC;
    signal route_by_eth_protoco_U0_ipv6ShiftFifo_V_last_din : STD_LOGIC_VECTOR (0 downto 0);
    signal route_by_eth_protoco_U0_ipv6ShiftFifo_V_last_write : STD_LOGIC;
    signal route_by_eth_protoco_U0_ipv4ShiftFifo_V_data_din : STD_LOGIC_VECTOR (63 downto 0);
    signal route_by_eth_protoco_U0_ipv4ShiftFifo_V_data_write : STD_LOGIC;
    signal route_by_eth_protoco_U0_ipv4ShiftFifo_V_keep_din : STD_LOGIC_VECTOR (7 downto 0);
    signal route_by_eth_protoco_U0_ipv4ShiftFifo_V_keep_write : STD_LOGIC;
    signal route_by_eth_protoco_U0_ipv4ShiftFifo_V_last_din : STD_LOGIC_VECTOR (0 downto 0);
    signal route_by_eth_protoco_U0_ipv4ShiftFifo_V_last_write : STD_LOGIC;
    signal route_by_eth_protoco_U0_m_axis_arp_TDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal route_by_eth_protoco_U0_m_axis_arp_TVALID : STD_LOGIC;
    signal route_by_eth_protoco_U0_m_axis_arp_TKEEP : STD_LOGIC_VECTOR (7 downto 0);
    signal route_by_eth_protoco_U0_m_axis_arp_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sync_continue : STD_LOGIC;
    signal rshiftWordByOctet_1_U0_ap_start : STD_LOGIC;
    signal rshiftWordByOctet_1_U0_ap_done : STD_LOGIC;
    signal rshiftWordByOctet_1_U0_ap_continue : STD_LOGIC;
    signal rshiftWordByOctet_1_U0_ap_idle : STD_LOGIC;
    signal rshiftWordByOctet_1_U0_ap_ready : STD_LOGIC;
    signal rshiftWordByOctet_1_U0_ipv4ShiftFifo_V_data_read : STD_LOGIC;
    signal rshiftWordByOctet_1_U0_ipv4ShiftFifo_V_keep_read : STD_LOGIC;
    signal rshiftWordByOctet_1_U0_ipv4ShiftFifo_V_last_read : STD_LOGIC;
    signal rshiftWordByOctet_1_U0_ipDataFifo_V_din : STD_LOGIC_VECTOR (72 downto 0);
    signal rshiftWordByOctet_1_U0_ipDataFifo_V_write : STD_LOGIC;
    signal rshiftWordByOctet_U0_ap_start : STD_LOGIC;
    signal rshiftWordByOctet_U0_ap_done : STD_LOGIC;
    signal rshiftWordByOctet_U0_ap_continue : STD_LOGIC;
    signal rshiftWordByOctet_U0_ap_idle : STD_LOGIC;
    signal rshiftWordByOctet_U0_ap_ready : STD_LOGIC;
    signal rshiftWordByOctet_U0_ipv6ShiftFifo_V_data_read : STD_LOGIC;
    signal rshiftWordByOctet_U0_ipv6ShiftFifo_V_keep_read : STD_LOGIC;
    signal rshiftWordByOctet_U0_ipv6ShiftFifo_V_last_read : STD_LOGIC;
    signal rshiftWordByOctet_U0_ipv6DataFifo_V_data_s_din : STD_LOGIC_VECTOR (63 downto 0);
    signal rshiftWordByOctet_U0_ipv6DataFifo_V_data_s_write : STD_LOGIC;
    signal rshiftWordByOctet_U0_ipv6DataFifo_V_keep_s_din : STD_LOGIC_VECTOR (7 downto 0);
    signal rshiftWordByOctet_U0_ipv6DataFifo_V_keep_s_write : STD_LOGIC;
    signal rshiftWordByOctet_U0_ipv6DataFifo_V_last_s_din : STD_LOGIC_VECTOR (0 downto 0);
    signal rshiftWordByOctet_U0_ipv6DataFifo_V_last_s_write : STD_LOGIC;
    signal extract_ip_meta_64_U0_ap_start : STD_LOGIC;
    signal extract_ip_meta_64_U0_ap_done : STD_LOGIC;
    signal extract_ip_meta_64_U0_ap_continue : STD_LOGIC;
    signal extract_ip_meta_64_U0_ap_idle : STD_LOGIC;
    signal extract_ip_meta_64_U0_ap_ready : STD_LOGIC;
    signal extract_ip_meta_64_U0_ipDataFifo_V_read : STD_LOGIC;
    signal extract_ip_meta_64_U0_ipDataMetaFifo_V_dat_din : STD_LOGIC_VECTOR (63 downto 0);
    signal extract_ip_meta_64_U0_ipDataMetaFifo_V_dat_write : STD_LOGIC;
    signal extract_ip_meta_64_U0_ipDataMetaFifo_V_kee_din : STD_LOGIC_VECTOR (7 downto 0);
    signal extract_ip_meta_64_U0_ipDataMetaFifo_V_kee_write : STD_LOGIC;
    signal extract_ip_meta_64_U0_ipDataMetaFifo_V_las_din : STD_LOGIC_VECTOR (0 downto 0);
    signal extract_ip_meta_64_U0_ipDataMetaFifo_V_las_write : STD_LOGIC;
    signal extract_ip_meta_64_U0_validIpAddressFifo_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal extract_ip_meta_64_U0_validIpAddressFifo_V_write : STD_LOGIC;
    signal extract_ip_meta_64_U0_ipv4ProtocolFifo_V_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal extract_ip_meta_64_U0_ipv4ProtocolFifo_V_V_write : STD_LOGIC;
    signal compute_ipv4_checksu_U0_ap_start : STD_LOGIC;
    signal compute_ipv4_checksu_U0_ap_done : STD_LOGIC;
    signal compute_ipv4_checksu_U0_ap_continue : STD_LOGIC;
    signal compute_ipv4_checksu_U0_ap_idle : STD_LOGIC;
    signal compute_ipv4_checksu_U0_ap_ready : STD_LOGIC;
    signal compute_ipv4_checksu_U0_ipDataMetaFifo_V_dat_read : STD_LOGIC;
    signal compute_ipv4_checksu_U0_ipDataMetaFifo_V_kee_read : STD_LOGIC;
    signal compute_ipv4_checksu_U0_ipDataMetaFifo_V_las_read : STD_LOGIC;
    signal compute_ipv4_checksu_U0_ipDataCheckFifo_V_din : STD_LOGIC_VECTOR (72 downto 0);
    signal compute_ipv4_checksu_U0_ipDataCheckFifo_V_write : STD_LOGIC;
    signal compute_ipv4_checksu_U0_iph_subSumsFifoOut_V_din : STD_LOGIC_VECTOR (67 downto 0);
    signal compute_ipv4_checksu_U0_iph_subSumsFifoOut_V_write : STD_LOGIC;
    signal check_ipv4_checksum_U0_ap_start : STD_LOGIC;
    signal check_ipv4_checksum_U0_ap_done : STD_LOGIC;
    signal check_ipv4_checksum_U0_ap_continue : STD_LOGIC;
    signal check_ipv4_checksum_U0_ap_idle : STD_LOGIC;
    signal check_ipv4_checksum_U0_ap_ready : STD_LOGIC;
    signal check_ipv4_checksum_U0_iph_subSumsFifoOut_V_read : STD_LOGIC;
    signal check_ipv4_checksum_U0_validChecksumFifo_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal check_ipv4_checksum_U0_validChecksumFifo_V_write : STD_LOGIC;
    signal ip_invalid_dropper_U0_ap_start : STD_LOGIC;
    signal ip_invalid_dropper_U0_ap_done : STD_LOGIC;
    signal ip_invalid_dropper_U0_ap_continue : STD_LOGIC;
    signal ip_invalid_dropper_U0_ap_idle : STD_LOGIC;
    signal ip_invalid_dropper_U0_ap_ready : STD_LOGIC;
    signal ip_invalid_dropper_U0_ipDataCheckFifo_V_read : STD_LOGIC;
    signal ip_invalid_dropper_U0_validChecksumFifo_V_read : STD_LOGIC;
    signal ip_invalid_dropper_U0_validIpAddressFifo_V_read : STD_LOGIC;
    signal ip_invalid_dropper_U0_ipDataDropFifo_V_din : STD_LOGIC_VECTOR (72 downto 0);
    signal ip_invalid_dropper_U0_ipDataDropFifo_V_write : STD_LOGIC;
    signal ip_invalid_dropper_U0_ipv4ValidFifo_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal ip_invalid_dropper_U0_ipv4ValidFifo_V_write : STD_LOGIC;
    signal cut_length_64_U0_ap_start : STD_LOGIC;
    signal cut_length_64_U0_ap_done : STD_LOGIC;
    signal cut_length_64_U0_ap_continue : STD_LOGIC;
    signal cut_length_64_U0_ap_idle : STD_LOGIC;
    signal cut_length_64_U0_ap_ready : STD_LOGIC;
    signal cut_length_64_U0_ipDataDropFifo_V_read : STD_LOGIC;
    signal cut_length_64_U0_ipDataCutFifo_V_din : STD_LOGIC_VECTOR (72 downto 0);
    signal cut_length_64_U0_ipDataCutFifo_V_write : STD_LOGIC;
    signal detect_ipv4_protocol_U0_ap_start : STD_LOGIC;
    signal detect_ipv4_protocol_U0_ap_done : STD_LOGIC;
    signal detect_ipv4_protocol_U0_ap_continue : STD_LOGIC;
    signal detect_ipv4_protocol_U0_ap_idle : STD_LOGIC;
    signal detect_ipv4_protocol_U0_ap_ready : STD_LOGIC;
    signal detect_ipv4_protocol_U0_ipv4ProtocolFifo_V_V_read : STD_LOGIC;
    signal detect_ipv4_protocol_U0_ipv4ValidFifo_V_read : STD_LOGIC;
    signal detect_ipv4_protocol_U0_ipDataCutFifo_V_read : STD_LOGIC;
    signal detect_ipv4_protocol_U0_udpDataFifo_V_din : STD_LOGIC_VECTOR (72 downto 0);
    signal detect_ipv4_protocol_U0_udpDataFifo_V_write : STD_LOGIC;
    signal detect_ipv4_protocol_U0_m_axis_icmp_TDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal detect_ipv4_protocol_U0_m_axis_icmp_TVALID : STD_LOGIC;
    signal detect_ipv4_protocol_U0_m_axis_icmp_TKEEP : STD_LOGIC_VECTOR (7 downto 0);
    signal detect_ipv4_protocol_U0_m_axis_icmp_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal detect_ipv4_protocol_U0_m_axis_tcp_TDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal detect_ipv4_protocol_U0_m_axis_tcp_TVALID : STD_LOGIC;
    signal detect_ipv4_protocol_U0_m_axis_tcp_TKEEP : STD_LOGIC_VECTOR (7 downto 0);
    signal detect_ipv4_protocol_U0_m_axis_tcp_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal detect_ipv6_protocol_U0_ap_start : STD_LOGIC;
    signal detect_ipv6_protocol_U0_ap_done : STD_LOGIC;
    signal detect_ipv6_protocol_U0_ap_continue : STD_LOGIC;
    signal detect_ipv6_protocol_U0_ap_idle : STD_LOGIC;
    signal detect_ipv6_protocol_U0_ap_ready : STD_LOGIC;
    signal detect_ipv6_protocol_U0_ipv6DataFifo_V_data_s_read : STD_LOGIC;
    signal detect_ipv6_protocol_U0_ipv6DataFifo_V_keep_s_read : STD_LOGIC;
    signal detect_ipv6_protocol_U0_ipv6DataFifo_V_last_s_read : STD_LOGIC;
    signal detect_ipv6_protocol_U0_m_axis_icmpv6_TDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal detect_ipv6_protocol_U0_m_axis_icmpv6_TVALID : STD_LOGIC;
    signal detect_ipv6_protocol_U0_m_axis_icmpv6_TKEEP : STD_LOGIC_VECTOR (7 downto 0);
    signal detect_ipv6_protocol_U0_m_axis_icmpv6_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal detect_ipv6_protocol_U0_m_axis_ipv6udp_TDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal detect_ipv6_protocol_U0_m_axis_ipv6udp_TVALID : STD_LOGIC;
    signal detect_ipv6_protocol_U0_m_axis_ipv6udp_TKEEP : STD_LOGIC_VECTOR (7 downto 0);
    signal detect_ipv6_protocol_U0_m_axis_ipv6udp_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal duplicate_stream_U0_ap_start : STD_LOGIC;
    signal duplicate_stream_U0_ap_done : STD_LOGIC;
    signal duplicate_stream_U0_ap_continue : STD_LOGIC;
    signal duplicate_stream_U0_ap_idle : STD_LOGIC;
    signal duplicate_stream_U0_ap_ready : STD_LOGIC;
    signal duplicate_stream_U0_udpDataFifo_V_read : STD_LOGIC;
    signal duplicate_stream_U0_m_axis_udp_TDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal duplicate_stream_U0_m_axis_udp_TVALID : STD_LOGIC;
    signal duplicate_stream_U0_m_axis_udp_TKEEP : STD_LOGIC_VECTOR (7 downto 0);
    signal duplicate_stream_U0_m_axis_udp_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal duplicate_stream_U0_m_axis_roce_TDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal duplicate_stream_U0_m_axis_roce_TVALID : STD_LOGIC;
    signal duplicate_stream_U0_m_axis_roce_TKEEP : STD_LOGIC_VECTOR (7 downto 0);
    signal duplicate_stream_U0_m_axis_roce_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal etherTypeFifo_V_V_full_n : STD_LOGIC;
    signal etherTypeFifo_V_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal etherTypeFifo_V_V_empty_n : STD_LOGIC;
    signal ethDataFifo_V_data_V_full_n : STD_LOGIC;
    signal ethDataFifo_V_data_V_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal ethDataFifo_V_data_V_empty_n : STD_LOGIC;
    signal ethDataFifo_V_keep_V_full_n : STD_LOGIC;
    signal ethDataFifo_V_keep_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal ethDataFifo_V_keep_V_empty_n : STD_LOGIC;
    signal ethDataFifo_V_last_V_full_n : STD_LOGIC;
    signal ethDataFifo_V_last_V_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal ethDataFifo_V_last_V_empty_n : STD_LOGIC;
    signal ipv4ShiftFifo_V_data_full_n : STD_LOGIC;
    signal ipv4ShiftFifo_V_data_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal ipv4ShiftFifo_V_data_empty_n : STD_LOGIC;
    signal ipv4ShiftFifo_V_keep_full_n : STD_LOGIC;
    signal ipv4ShiftFifo_V_keep_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal ipv4ShiftFifo_V_keep_empty_n : STD_LOGIC;
    signal ipv4ShiftFifo_V_last_full_n : STD_LOGIC;
    signal ipv4ShiftFifo_V_last_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal ipv4ShiftFifo_V_last_empty_n : STD_LOGIC;
    signal ipv6ShiftFifo_V_data_full_n : STD_LOGIC;
    signal ipv6ShiftFifo_V_data_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal ipv6ShiftFifo_V_data_empty_n : STD_LOGIC;
    signal ipv6ShiftFifo_V_keep_full_n : STD_LOGIC;
    signal ipv6ShiftFifo_V_keep_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal ipv6ShiftFifo_V_keep_empty_n : STD_LOGIC;
    signal ipv6ShiftFifo_V_last_full_n : STD_LOGIC;
    signal ipv6ShiftFifo_V_last_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal ipv6ShiftFifo_V_last_empty_n : STD_LOGIC;
    signal ipDataFifo_V_full_n : STD_LOGIC;
    signal ipDataFifo_V_dout : STD_LOGIC_VECTOR (72 downto 0);
    signal ipDataFifo_V_empty_n : STD_LOGIC;
    signal ipv6DataFifo_V_data_s_full_n : STD_LOGIC;
    signal ipv6DataFifo_V_data_s_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal ipv6DataFifo_V_data_s_empty_n : STD_LOGIC;
    signal ipv6DataFifo_V_keep_s_full_n : STD_LOGIC;
    signal ipv6DataFifo_V_keep_s_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal ipv6DataFifo_V_keep_s_empty_n : STD_LOGIC;
    signal ipv6DataFifo_V_last_s_full_n : STD_LOGIC;
    signal ipv6DataFifo_V_last_s_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal ipv6DataFifo_V_last_s_empty_n : STD_LOGIC;
    signal ipDataMetaFifo_V_dat_full_n : STD_LOGIC;
    signal ipDataMetaFifo_V_dat_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal ipDataMetaFifo_V_dat_empty_n : STD_LOGIC;
    signal ipDataMetaFifo_V_kee_full_n : STD_LOGIC;
    signal ipDataMetaFifo_V_kee_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal ipDataMetaFifo_V_kee_empty_n : STD_LOGIC;
    signal ipDataMetaFifo_V_las_full_n : STD_LOGIC;
    signal ipDataMetaFifo_V_las_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal ipDataMetaFifo_V_las_empty_n : STD_LOGIC;
    signal validIpAddressFifo_V_full_n : STD_LOGIC;
    signal validIpAddressFifo_V_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal validIpAddressFifo_V_empty_n : STD_LOGIC;
    signal ipv4ProtocolFifo_V_V_full_n : STD_LOGIC;
    signal ipv4ProtocolFifo_V_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal ipv4ProtocolFifo_V_V_empty_n : STD_LOGIC;
    signal ipDataCheckFifo_V_full_n : STD_LOGIC;
    signal ipDataCheckFifo_V_dout : STD_LOGIC_VECTOR (72 downto 0);
    signal ipDataCheckFifo_V_empty_n : STD_LOGIC;
    signal iph_subSumsFifoOut_V_full_n : STD_LOGIC;
    signal iph_subSumsFifoOut_V_dout : STD_LOGIC_VECTOR (67 downto 0);
    signal iph_subSumsFifoOut_V_empty_n : STD_LOGIC;
    signal validChecksumFifo_V_full_n : STD_LOGIC;
    signal validChecksumFifo_V_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal validChecksumFifo_V_empty_n : STD_LOGIC;
    signal ipv4ValidFifo_V_full_n : STD_LOGIC;
    signal ipv4ValidFifo_V_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal ipv4ValidFifo_V_empty_n : STD_LOGIC;
    signal ipDataDropFifo_V_full_n : STD_LOGIC;
    signal ipDataDropFifo_V_dout : STD_LOGIC_VECTOR (72 downto 0);
    signal ipDataDropFifo_V_empty_n : STD_LOGIC;
    signal ipDataCutFifo_V_full_n : STD_LOGIC;
    signal ipDataCutFifo_V_dout : STD_LOGIC_VECTOR (72 downto 0);
    signal ipDataCutFifo_V_empty_n : STD_LOGIC;
    signal udpDataFifo_V_full_n : STD_LOGIC;
    signal udpDataFifo_V_dout : STD_LOGIC_VECTOR (72 downto 0);
    signal udpDataFifo_V_empty_n : STD_LOGIC;

    component detect_eth_protocol IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        s_axis_raw_TVALID : IN STD_LOGIC;
        ethDataFifo_V_data_V_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        ethDataFifo_V_data_V_full_n : IN STD_LOGIC;
        ethDataFifo_V_data_V_write : OUT STD_LOGIC;
        ethDataFifo_V_keep_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        ethDataFifo_V_keep_V_full_n : IN STD_LOGIC;
        ethDataFifo_V_keep_V_write : OUT STD_LOGIC;
        ethDataFifo_V_last_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        ethDataFifo_V_last_V_full_n : IN STD_LOGIC;
        ethDataFifo_V_last_V_write : OUT STD_LOGIC;
        etherTypeFifo_V_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        etherTypeFifo_V_V_full_n : IN STD_LOGIC;
        etherTypeFifo_V_V_write : OUT STD_LOGIC;
        s_axis_raw_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        s_axis_raw_TREADY : OUT STD_LOGIC;
        s_axis_raw_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
        s_axis_raw_TLAST : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component route_by_eth_protoco IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        etherTypeFifo_V_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        etherTypeFifo_V_V_empty_n : IN STD_LOGIC;
        etherTypeFifo_V_V_read : OUT STD_LOGIC;
        ethDataFifo_V_data_V_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        ethDataFifo_V_data_V_empty_n : IN STD_LOGIC;
        ethDataFifo_V_data_V_read : OUT STD_LOGIC;
        ethDataFifo_V_keep_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        ethDataFifo_V_keep_V_empty_n : IN STD_LOGIC;
        ethDataFifo_V_keep_V_read : OUT STD_LOGIC;
        ethDataFifo_V_last_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        ethDataFifo_V_last_V_empty_n : IN STD_LOGIC;
        ethDataFifo_V_last_V_read : OUT STD_LOGIC;
        ipv6ShiftFifo_V_data_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        ipv6ShiftFifo_V_data_full_n : IN STD_LOGIC;
        ipv6ShiftFifo_V_data_write : OUT STD_LOGIC;
        ipv6ShiftFifo_V_keep_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        ipv6ShiftFifo_V_keep_full_n : IN STD_LOGIC;
        ipv6ShiftFifo_V_keep_write : OUT STD_LOGIC;
        ipv6ShiftFifo_V_last_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        ipv6ShiftFifo_V_last_full_n : IN STD_LOGIC;
        ipv6ShiftFifo_V_last_write : OUT STD_LOGIC;
        ipv4ShiftFifo_V_data_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        ipv4ShiftFifo_V_data_full_n : IN STD_LOGIC;
        ipv4ShiftFifo_V_data_write : OUT STD_LOGIC;
        ipv4ShiftFifo_V_keep_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        ipv4ShiftFifo_V_keep_full_n : IN STD_LOGIC;
        ipv4ShiftFifo_V_keep_write : OUT STD_LOGIC;
        ipv4ShiftFifo_V_last_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        ipv4ShiftFifo_V_last_full_n : IN STD_LOGIC;
        ipv4ShiftFifo_V_last_write : OUT STD_LOGIC;
        m_axis_arp_TREADY : IN STD_LOGIC;
        m_axis_arp_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axis_arp_TVALID : OUT STD_LOGIC;
        m_axis_arp_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axis_arp_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component rshiftWordByOctet_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ipv4ShiftFifo_V_data_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        ipv4ShiftFifo_V_data_empty_n : IN STD_LOGIC;
        ipv4ShiftFifo_V_data_read : OUT STD_LOGIC;
        ipv4ShiftFifo_V_keep_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        ipv4ShiftFifo_V_keep_empty_n : IN STD_LOGIC;
        ipv4ShiftFifo_V_keep_read : OUT STD_LOGIC;
        ipv4ShiftFifo_V_last_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        ipv4ShiftFifo_V_last_empty_n : IN STD_LOGIC;
        ipv4ShiftFifo_V_last_read : OUT STD_LOGIC;
        ipDataFifo_V_din : OUT STD_LOGIC_VECTOR (72 downto 0);
        ipDataFifo_V_full_n : IN STD_LOGIC;
        ipDataFifo_V_write : OUT STD_LOGIC );
    end component;


    component rshiftWordByOctet IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ipv6ShiftFifo_V_data_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        ipv6ShiftFifo_V_data_empty_n : IN STD_LOGIC;
        ipv6ShiftFifo_V_data_read : OUT STD_LOGIC;
        ipv6ShiftFifo_V_keep_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        ipv6ShiftFifo_V_keep_empty_n : IN STD_LOGIC;
        ipv6ShiftFifo_V_keep_read : OUT STD_LOGIC;
        ipv6ShiftFifo_V_last_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        ipv6ShiftFifo_V_last_empty_n : IN STD_LOGIC;
        ipv6ShiftFifo_V_last_read : OUT STD_LOGIC;
        ipv6DataFifo_V_data_s_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        ipv6DataFifo_V_data_s_full_n : IN STD_LOGIC;
        ipv6DataFifo_V_data_s_write : OUT STD_LOGIC;
        ipv6DataFifo_V_keep_s_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        ipv6DataFifo_V_keep_s_full_n : IN STD_LOGIC;
        ipv6DataFifo_V_keep_s_write : OUT STD_LOGIC;
        ipv6DataFifo_V_last_s_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        ipv6DataFifo_V_last_s_full_n : IN STD_LOGIC;
        ipv6DataFifo_V_last_s_write : OUT STD_LOGIC );
    end component;


    component extract_ip_meta_64_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ipDataFifo_V_dout : IN STD_LOGIC_VECTOR (72 downto 0);
        ipDataFifo_V_empty_n : IN STD_LOGIC;
        ipDataFifo_V_read : OUT STD_LOGIC;
        ipDataMetaFifo_V_dat_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        ipDataMetaFifo_V_dat_full_n : IN STD_LOGIC;
        ipDataMetaFifo_V_dat_write : OUT STD_LOGIC;
        ipDataMetaFifo_V_kee_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        ipDataMetaFifo_V_kee_full_n : IN STD_LOGIC;
        ipDataMetaFifo_V_kee_write : OUT STD_LOGIC;
        ipDataMetaFifo_V_las_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        ipDataMetaFifo_V_las_full_n : IN STD_LOGIC;
        ipDataMetaFifo_V_las_write : OUT STD_LOGIC;
        validIpAddressFifo_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        validIpAddressFifo_V_full_n : IN STD_LOGIC;
        validIpAddressFifo_V_write : OUT STD_LOGIC;
        ipv4ProtocolFifo_V_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        ipv4ProtocolFifo_V_V_full_n : IN STD_LOGIC;
        ipv4ProtocolFifo_V_V_write : OUT STD_LOGIC;
        myIpAddress_V : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component compute_ipv4_checksu IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ipDataMetaFifo_V_dat_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        ipDataMetaFifo_V_dat_empty_n : IN STD_LOGIC;
        ipDataMetaFifo_V_dat_read : OUT STD_LOGIC;
        ipDataMetaFifo_V_kee_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        ipDataMetaFifo_V_kee_empty_n : IN STD_LOGIC;
        ipDataMetaFifo_V_kee_read : OUT STD_LOGIC;
        ipDataMetaFifo_V_las_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        ipDataMetaFifo_V_las_empty_n : IN STD_LOGIC;
        ipDataMetaFifo_V_las_read : OUT STD_LOGIC;
        ipDataCheckFifo_V_din : OUT STD_LOGIC_VECTOR (72 downto 0);
        ipDataCheckFifo_V_full_n : IN STD_LOGIC;
        ipDataCheckFifo_V_write : OUT STD_LOGIC;
        iph_subSumsFifoOut_V_din : OUT STD_LOGIC_VECTOR (67 downto 0);
        iph_subSumsFifoOut_V_full_n : IN STD_LOGIC;
        iph_subSumsFifoOut_V_write : OUT STD_LOGIC );
    end component;


    component check_ipv4_checksum IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        iph_subSumsFifoOut_V_dout : IN STD_LOGIC_VECTOR (67 downto 0);
        iph_subSumsFifoOut_V_empty_n : IN STD_LOGIC;
        iph_subSumsFifoOut_V_read : OUT STD_LOGIC;
        validChecksumFifo_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        validChecksumFifo_V_full_n : IN STD_LOGIC;
        validChecksumFifo_V_write : OUT STD_LOGIC );
    end component;


    component ip_invalid_dropper IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ipDataCheckFifo_V_dout : IN STD_LOGIC_VECTOR (72 downto 0);
        ipDataCheckFifo_V_empty_n : IN STD_LOGIC;
        ipDataCheckFifo_V_read : OUT STD_LOGIC;
        validChecksumFifo_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        validChecksumFifo_V_empty_n : IN STD_LOGIC;
        validChecksumFifo_V_read : OUT STD_LOGIC;
        validIpAddressFifo_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        validIpAddressFifo_V_empty_n : IN STD_LOGIC;
        validIpAddressFifo_V_read : OUT STD_LOGIC;
        ipDataDropFifo_V_din : OUT STD_LOGIC_VECTOR (72 downto 0);
        ipDataDropFifo_V_full_n : IN STD_LOGIC;
        ipDataDropFifo_V_write : OUT STD_LOGIC;
        ipv4ValidFifo_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        ipv4ValidFifo_V_full_n : IN STD_LOGIC;
        ipv4ValidFifo_V_write : OUT STD_LOGIC );
    end component;


    component cut_length_64_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ipDataDropFifo_V_dout : IN STD_LOGIC_VECTOR (72 downto 0);
        ipDataDropFifo_V_empty_n : IN STD_LOGIC;
        ipDataDropFifo_V_read : OUT STD_LOGIC;
        ipDataCutFifo_V_din : OUT STD_LOGIC_VECTOR (72 downto 0);
        ipDataCutFifo_V_full_n : IN STD_LOGIC;
        ipDataCutFifo_V_write : OUT STD_LOGIC );
    end component;


    component detect_ipv4_protocol IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ipv4ProtocolFifo_V_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        ipv4ProtocolFifo_V_V_empty_n : IN STD_LOGIC;
        ipv4ProtocolFifo_V_V_read : OUT STD_LOGIC;
        ipv4ValidFifo_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        ipv4ValidFifo_V_empty_n : IN STD_LOGIC;
        ipv4ValidFifo_V_read : OUT STD_LOGIC;
        ipDataCutFifo_V_dout : IN STD_LOGIC_VECTOR (72 downto 0);
        ipDataCutFifo_V_empty_n : IN STD_LOGIC;
        ipDataCutFifo_V_read : OUT STD_LOGIC;
        udpDataFifo_V_din : OUT STD_LOGIC_VECTOR (72 downto 0);
        udpDataFifo_V_full_n : IN STD_LOGIC;
        udpDataFifo_V_write : OUT STD_LOGIC;
        m_axis_tcp_TREADY : IN STD_LOGIC;
        m_axis_icmp_TREADY : IN STD_LOGIC;
        m_axis_icmp_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axis_icmp_TVALID : OUT STD_LOGIC;
        m_axis_icmp_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axis_icmp_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axis_tcp_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axis_tcp_TVALID : OUT STD_LOGIC;
        m_axis_tcp_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axis_tcp_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component detect_ipv6_protocol IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ipv6DataFifo_V_data_s_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        ipv6DataFifo_V_data_s_empty_n : IN STD_LOGIC;
        ipv6DataFifo_V_data_s_read : OUT STD_LOGIC;
        ipv6DataFifo_V_keep_s_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        ipv6DataFifo_V_keep_s_empty_n : IN STD_LOGIC;
        ipv6DataFifo_V_keep_s_read : OUT STD_LOGIC;
        ipv6DataFifo_V_last_s_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        ipv6DataFifo_V_last_s_empty_n : IN STD_LOGIC;
        ipv6DataFifo_V_last_s_read : OUT STD_LOGIC;
        m_axis_ipv6udp_TREADY : IN STD_LOGIC;
        m_axis_icmpv6_TREADY : IN STD_LOGIC;
        m_axis_icmpv6_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axis_icmpv6_TVALID : OUT STD_LOGIC;
        m_axis_icmpv6_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axis_icmpv6_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axis_ipv6udp_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axis_ipv6udp_TVALID : OUT STD_LOGIC;
        m_axis_ipv6udp_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axis_ipv6udp_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component duplicate_stream IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        udpDataFifo_V_dout : IN STD_LOGIC_VECTOR (72 downto 0);
        udpDataFifo_V_empty_n : IN STD_LOGIC;
        udpDataFifo_V_read : OUT STD_LOGIC;
        m_axis_udp_TREADY : IN STD_LOGIC;
        m_axis_roce_TREADY : IN STD_LOGIC;
        m_axis_udp_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axis_udp_TVALID : OUT STD_LOGIC;
        m_axis_udp_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axis_udp_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axis_roce_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axis_roce_TVALID : OUT STD_LOGIC;
        m_axis_roce_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axis_roce_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component fifo_w16_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w64_d4_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w8_d4_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w1_d4_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w64_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w8_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w1_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w73_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (72 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (72 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w1_d32_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w8_d32_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w73_d64_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (72 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (72 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w68_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (67 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (67 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w1_d8_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    detect_eth_protocol_U0 : component detect_eth_protocol
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => detect_eth_protocol_U0_ap_start,
        ap_done => detect_eth_protocol_U0_ap_done,
        ap_continue => detect_eth_protocol_U0_ap_continue,
        ap_idle => detect_eth_protocol_U0_ap_idle,
        ap_ready => detect_eth_protocol_U0_ap_ready,
        s_axis_raw_TVALID => s_axis_raw_TVALID,
        ethDataFifo_V_data_V_din => detect_eth_protocol_U0_ethDataFifo_V_data_V_din,
        ethDataFifo_V_data_V_full_n => ethDataFifo_V_data_V_full_n,
        ethDataFifo_V_data_V_write => detect_eth_protocol_U0_ethDataFifo_V_data_V_write,
        ethDataFifo_V_keep_V_din => detect_eth_protocol_U0_ethDataFifo_V_keep_V_din,
        ethDataFifo_V_keep_V_full_n => ethDataFifo_V_keep_V_full_n,
        ethDataFifo_V_keep_V_write => detect_eth_protocol_U0_ethDataFifo_V_keep_V_write,
        ethDataFifo_V_last_V_din => detect_eth_protocol_U0_ethDataFifo_V_last_V_din,
        ethDataFifo_V_last_V_full_n => ethDataFifo_V_last_V_full_n,
        ethDataFifo_V_last_V_write => detect_eth_protocol_U0_ethDataFifo_V_last_V_write,
        etherTypeFifo_V_V_din => detect_eth_protocol_U0_etherTypeFifo_V_V_din,
        etherTypeFifo_V_V_full_n => etherTypeFifo_V_V_full_n,
        etherTypeFifo_V_V_write => detect_eth_protocol_U0_etherTypeFifo_V_V_write,
        s_axis_raw_TDATA => s_axis_raw_TDATA,
        s_axis_raw_TREADY => detect_eth_protocol_U0_s_axis_raw_TREADY,
        s_axis_raw_TKEEP => s_axis_raw_TKEEP,
        s_axis_raw_TLAST => s_axis_raw_TLAST);

    route_by_eth_protoco_U0 : component route_by_eth_protoco
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => route_by_eth_protoco_U0_ap_start,
        ap_done => route_by_eth_protoco_U0_ap_done,
        ap_continue => route_by_eth_protoco_U0_ap_continue,
        ap_idle => route_by_eth_protoco_U0_ap_idle,
        ap_ready => route_by_eth_protoco_U0_ap_ready,
        etherTypeFifo_V_V_dout => etherTypeFifo_V_V_dout,
        etherTypeFifo_V_V_empty_n => etherTypeFifo_V_V_empty_n,
        etherTypeFifo_V_V_read => route_by_eth_protoco_U0_etherTypeFifo_V_V_read,
        ethDataFifo_V_data_V_dout => ethDataFifo_V_data_V_dout,
        ethDataFifo_V_data_V_empty_n => ethDataFifo_V_data_V_empty_n,
        ethDataFifo_V_data_V_read => route_by_eth_protoco_U0_ethDataFifo_V_data_V_read,
        ethDataFifo_V_keep_V_dout => ethDataFifo_V_keep_V_dout,
        ethDataFifo_V_keep_V_empty_n => ethDataFifo_V_keep_V_empty_n,
        ethDataFifo_V_keep_V_read => route_by_eth_protoco_U0_ethDataFifo_V_keep_V_read,
        ethDataFifo_V_last_V_dout => ethDataFifo_V_last_V_dout,
        ethDataFifo_V_last_V_empty_n => ethDataFifo_V_last_V_empty_n,
        ethDataFifo_V_last_V_read => route_by_eth_protoco_U0_ethDataFifo_V_last_V_read,
        ipv6ShiftFifo_V_data_din => route_by_eth_protoco_U0_ipv6ShiftFifo_V_data_din,
        ipv6ShiftFifo_V_data_full_n => ipv6ShiftFifo_V_data_full_n,
        ipv6ShiftFifo_V_data_write => route_by_eth_protoco_U0_ipv6ShiftFifo_V_data_write,
        ipv6ShiftFifo_V_keep_din => route_by_eth_protoco_U0_ipv6ShiftFifo_V_keep_din,
        ipv6ShiftFifo_V_keep_full_n => ipv6ShiftFifo_V_keep_full_n,
        ipv6ShiftFifo_V_keep_write => route_by_eth_protoco_U0_ipv6ShiftFifo_V_keep_write,
        ipv6ShiftFifo_V_last_din => route_by_eth_protoco_U0_ipv6ShiftFifo_V_last_din,
        ipv6ShiftFifo_V_last_full_n => ipv6ShiftFifo_V_last_full_n,
        ipv6ShiftFifo_V_last_write => route_by_eth_protoco_U0_ipv6ShiftFifo_V_last_write,
        ipv4ShiftFifo_V_data_din => route_by_eth_protoco_U0_ipv4ShiftFifo_V_data_din,
        ipv4ShiftFifo_V_data_full_n => ipv4ShiftFifo_V_data_full_n,
        ipv4ShiftFifo_V_data_write => route_by_eth_protoco_U0_ipv4ShiftFifo_V_data_write,
        ipv4ShiftFifo_V_keep_din => route_by_eth_protoco_U0_ipv4ShiftFifo_V_keep_din,
        ipv4ShiftFifo_V_keep_full_n => ipv4ShiftFifo_V_keep_full_n,
        ipv4ShiftFifo_V_keep_write => route_by_eth_protoco_U0_ipv4ShiftFifo_V_keep_write,
        ipv4ShiftFifo_V_last_din => route_by_eth_protoco_U0_ipv4ShiftFifo_V_last_din,
        ipv4ShiftFifo_V_last_full_n => ipv4ShiftFifo_V_last_full_n,
        ipv4ShiftFifo_V_last_write => route_by_eth_protoco_U0_ipv4ShiftFifo_V_last_write,
        m_axis_arp_TREADY => m_axis_arp_TREADY,
        m_axis_arp_TDATA => route_by_eth_protoco_U0_m_axis_arp_TDATA,
        m_axis_arp_TVALID => route_by_eth_protoco_U0_m_axis_arp_TVALID,
        m_axis_arp_TKEEP => route_by_eth_protoco_U0_m_axis_arp_TKEEP,
        m_axis_arp_TLAST => route_by_eth_protoco_U0_m_axis_arp_TLAST);

    rshiftWordByOctet_1_U0 : component rshiftWordByOctet_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => rshiftWordByOctet_1_U0_ap_start,
        ap_done => rshiftWordByOctet_1_U0_ap_done,
        ap_continue => rshiftWordByOctet_1_U0_ap_continue,
        ap_idle => rshiftWordByOctet_1_U0_ap_idle,
        ap_ready => rshiftWordByOctet_1_U0_ap_ready,
        ipv4ShiftFifo_V_data_dout => ipv4ShiftFifo_V_data_dout,
        ipv4ShiftFifo_V_data_empty_n => ipv4ShiftFifo_V_data_empty_n,
        ipv4ShiftFifo_V_data_read => rshiftWordByOctet_1_U0_ipv4ShiftFifo_V_data_read,
        ipv4ShiftFifo_V_keep_dout => ipv4ShiftFifo_V_keep_dout,
        ipv4ShiftFifo_V_keep_empty_n => ipv4ShiftFifo_V_keep_empty_n,
        ipv4ShiftFifo_V_keep_read => rshiftWordByOctet_1_U0_ipv4ShiftFifo_V_keep_read,
        ipv4ShiftFifo_V_last_dout => ipv4ShiftFifo_V_last_dout,
        ipv4ShiftFifo_V_last_empty_n => ipv4ShiftFifo_V_last_empty_n,
        ipv4ShiftFifo_V_last_read => rshiftWordByOctet_1_U0_ipv4ShiftFifo_V_last_read,
        ipDataFifo_V_din => rshiftWordByOctet_1_U0_ipDataFifo_V_din,
        ipDataFifo_V_full_n => ipDataFifo_V_full_n,
        ipDataFifo_V_write => rshiftWordByOctet_1_U0_ipDataFifo_V_write);

    rshiftWordByOctet_U0 : component rshiftWordByOctet
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => rshiftWordByOctet_U0_ap_start,
        ap_done => rshiftWordByOctet_U0_ap_done,
        ap_continue => rshiftWordByOctet_U0_ap_continue,
        ap_idle => rshiftWordByOctet_U0_ap_idle,
        ap_ready => rshiftWordByOctet_U0_ap_ready,
        ipv6ShiftFifo_V_data_dout => ipv6ShiftFifo_V_data_dout,
        ipv6ShiftFifo_V_data_empty_n => ipv6ShiftFifo_V_data_empty_n,
        ipv6ShiftFifo_V_data_read => rshiftWordByOctet_U0_ipv6ShiftFifo_V_data_read,
        ipv6ShiftFifo_V_keep_dout => ipv6ShiftFifo_V_keep_dout,
        ipv6ShiftFifo_V_keep_empty_n => ipv6ShiftFifo_V_keep_empty_n,
        ipv6ShiftFifo_V_keep_read => rshiftWordByOctet_U0_ipv6ShiftFifo_V_keep_read,
        ipv6ShiftFifo_V_last_dout => ipv6ShiftFifo_V_last_dout,
        ipv6ShiftFifo_V_last_empty_n => ipv6ShiftFifo_V_last_empty_n,
        ipv6ShiftFifo_V_last_read => rshiftWordByOctet_U0_ipv6ShiftFifo_V_last_read,
        ipv6DataFifo_V_data_s_din => rshiftWordByOctet_U0_ipv6DataFifo_V_data_s_din,
        ipv6DataFifo_V_data_s_full_n => ipv6DataFifo_V_data_s_full_n,
        ipv6DataFifo_V_data_s_write => rshiftWordByOctet_U0_ipv6DataFifo_V_data_s_write,
        ipv6DataFifo_V_keep_s_din => rshiftWordByOctet_U0_ipv6DataFifo_V_keep_s_din,
        ipv6DataFifo_V_keep_s_full_n => ipv6DataFifo_V_keep_s_full_n,
        ipv6DataFifo_V_keep_s_write => rshiftWordByOctet_U0_ipv6DataFifo_V_keep_s_write,
        ipv6DataFifo_V_last_s_din => rshiftWordByOctet_U0_ipv6DataFifo_V_last_s_din,
        ipv6DataFifo_V_last_s_full_n => ipv6DataFifo_V_last_s_full_n,
        ipv6DataFifo_V_last_s_write => rshiftWordByOctet_U0_ipv6DataFifo_V_last_s_write);

    extract_ip_meta_64_U0 : component extract_ip_meta_64_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => extract_ip_meta_64_U0_ap_start,
        ap_done => extract_ip_meta_64_U0_ap_done,
        ap_continue => extract_ip_meta_64_U0_ap_continue,
        ap_idle => extract_ip_meta_64_U0_ap_idle,
        ap_ready => extract_ip_meta_64_U0_ap_ready,
        ipDataFifo_V_dout => ipDataFifo_V_dout,
        ipDataFifo_V_empty_n => ipDataFifo_V_empty_n,
        ipDataFifo_V_read => extract_ip_meta_64_U0_ipDataFifo_V_read,
        ipDataMetaFifo_V_dat_din => extract_ip_meta_64_U0_ipDataMetaFifo_V_dat_din,
        ipDataMetaFifo_V_dat_full_n => ipDataMetaFifo_V_dat_full_n,
        ipDataMetaFifo_V_dat_write => extract_ip_meta_64_U0_ipDataMetaFifo_V_dat_write,
        ipDataMetaFifo_V_kee_din => extract_ip_meta_64_U0_ipDataMetaFifo_V_kee_din,
        ipDataMetaFifo_V_kee_full_n => ipDataMetaFifo_V_kee_full_n,
        ipDataMetaFifo_V_kee_write => extract_ip_meta_64_U0_ipDataMetaFifo_V_kee_write,
        ipDataMetaFifo_V_las_din => extract_ip_meta_64_U0_ipDataMetaFifo_V_las_din,
        ipDataMetaFifo_V_las_full_n => ipDataMetaFifo_V_las_full_n,
        ipDataMetaFifo_V_las_write => extract_ip_meta_64_U0_ipDataMetaFifo_V_las_write,
        validIpAddressFifo_V_din => extract_ip_meta_64_U0_validIpAddressFifo_V_din,
        validIpAddressFifo_V_full_n => validIpAddressFifo_V_full_n,
        validIpAddressFifo_V_write => extract_ip_meta_64_U0_validIpAddressFifo_V_write,
        ipv4ProtocolFifo_V_V_din => extract_ip_meta_64_U0_ipv4ProtocolFifo_V_V_din,
        ipv4ProtocolFifo_V_V_full_n => ipv4ProtocolFifo_V_V_full_n,
        ipv4ProtocolFifo_V_V_write => extract_ip_meta_64_U0_ipv4ProtocolFifo_V_V_write,
        myIpAddress_V => myIpAddress_V);

    compute_ipv4_checksu_U0 : component compute_ipv4_checksu
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => compute_ipv4_checksu_U0_ap_start,
        ap_done => compute_ipv4_checksu_U0_ap_done,
        ap_continue => compute_ipv4_checksu_U0_ap_continue,
        ap_idle => compute_ipv4_checksu_U0_ap_idle,
        ap_ready => compute_ipv4_checksu_U0_ap_ready,
        ipDataMetaFifo_V_dat_dout => ipDataMetaFifo_V_dat_dout,
        ipDataMetaFifo_V_dat_empty_n => ipDataMetaFifo_V_dat_empty_n,
        ipDataMetaFifo_V_dat_read => compute_ipv4_checksu_U0_ipDataMetaFifo_V_dat_read,
        ipDataMetaFifo_V_kee_dout => ipDataMetaFifo_V_kee_dout,
        ipDataMetaFifo_V_kee_empty_n => ipDataMetaFifo_V_kee_empty_n,
        ipDataMetaFifo_V_kee_read => compute_ipv4_checksu_U0_ipDataMetaFifo_V_kee_read,
        ipDataMetaFifo_V_las_dout => ipDataMetaFifo_V_las_dout,
        ipDataMetaFifo_V_las_empty_n => ipDataMetaFifo_V_las_empty_n,
        ipDataMetaFifo_V_las_read => compute_ipv4_checksu_U0_ipDataMetaFifo_V_las_read,
        ipDataCheckFifo_V_din => compute_ipv4_checksu_U0_ipDataCheckFifo_V_din,
        ipDataCheckFifo_V_full_n => ipDataCheckFifo_V_full_n,
        ipDataCheckFifo_V_write => compute_ipv4_checksu_U0_ipDataCheckFifo_V_write,
        iph_subSumsFifoOut_V_din => compute_ipv4_checksu_U0_iph_subSumsFifoOut_V_din,
        iph_subSumsFifoOut_V_full_n => iph_subSumsFifoOut_V_full_n,
        iph_subSumsFifoOut_V_write => compute_ipv4_checksu_U0_iph_subSumsFifoOut_V_write);

    check_ipv4_checksum_U0 : component check_ipv4_checksum
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => check_ipv4_checksum_U0_ap_start,
        ap_done => check_ipv4_checksum_U0_ap_done,
        ap_continue => check_ipv4_checksum_U0_ap_continue,
        ap_idle => check_ipv4_checksum_U0_ap_idle,
        ap_ready => check_ipv4_checksum_U0_ap_ready,
        iph_subSumsFifoOut_V_dout => iph_subSumsFifoOut_V_dout,
        iph_subSumsFifoOut_V_empty_n => iph_subSumsFifoOut_V_empty_n,
        iph_subSumsFifoOut_V_read => check_ipv4_checksum_U0_iph_subSumsFifoOut_V_read,
        validChecksumFifo_V_din => check_ipv4_checksum_U0_validChecksumFifo_V_din,
        validChecksumFifo_V_full_n => validChecksumFifo_V_full_n,
        validChecksumFifo_V_write => check_ipv4_checksum_U0_validChecksumFifo_V_write);

    ip_invalid_dropper_U0 : component ip_invalid_dropper
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => ip_invalid_dropper_U0_ap_start,
        ap_done => ip_invalid_dropper_U0_ap_done,
        ap_continue => ip_invalid_dropper_U0_ap_continue,
        ap_idle => ip_invalid_dropper_U0_ap_idle,
        ap_ready => ip_invalid_dropper_U0_ap_ready,
        ipDataCheckFifo_V_dout => ipDataCheckFifo_V_dout,
        ipDataCheckFifo_V_empty_n => ipDataCheckFifo_V_empty_n,
        ipDataCheckFifo_V_read => ip_invalid_dropper_U0_ipDataCheckFifo_V_read,
        validChecksumFifo_V_dout => validChecksumFifo_V_dout,
        validChecksumFifo_V_empty_n => validChecksumFifo_V_empty_n,
        validChecksumFifo_V_read => ip_invalid_dropper_U0_validChecksumFifo_V_read,
        validIpAddressFifo_V_dout => validIpAddressFifo_V_dout,
        validIpAddressFifo_V_empty_n => validIpAddressFifo_V_empty_n,
        validIpAddressFifo_V_read => ip_invalid_dropper_U0_validIpAddressFifo_V_read,
        ipDataDropFifo_V_din => ip_invalid_dropper_U0_ipDataDropFifo_V_din,
        ipDataDropFifo_V_full_n => ipDataDropFifo_V_full_n,
        ipDataDropFifo_V_write => ip_invalid_dropper_U0_ipDataDropFifo_V_write,
        ipv4ValidFifo_V_din => ip_invalid_dropper_U0_ipv4ValidFifo_V_din,
        ipv4ValidFifo_V_full_n => ipv4ValidFifo_V_full_n,
        ipv4ValidFifo_V_write => ip_invalid_dropper_U0_ipv4ValidFifo_V_write);

    cut_length_64_U0 : component cut_length_64_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => cut_length_64_U0_ap_start,
        ap_done => cut_length_64_U0_ap_done,
        ap_continue => cut_length_64_U0_ap_continue,
        ap_idle => cut_length_64_U0_ap_idle,
        ap_ready => cut_length_64_U0_ap_ready,
        ipDataDropFifo_V_dout => ipDataDropFifo_V_dout,
        ipDataDropFifo_V_empty_n => ipDataDropFifo_V_empty_n,
        ipDataDropFifo_V_read => cut_length_64_U0_ipDataDropFifo_V_read,
        ipDataCutFifo_V_din => cut_length_64_U0_ipDataCutFifo_V_din,
        ipDataCutFifo_V_full_n => ipDataCutFifo_V_full_n,
        ipDataCutFifo_V_write => cut_length_64_U0_ipDataCutFifo_V_write);

    detect_ipv4_protocol_U0 : component detect_ipv4_protocol
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => detect_ipv4_protocol_U0_ap_start,
        ap_done => detect_ipv4_protocol_U0_ap_done,
        ap_continue => detect_ipv4_protocol_U0_ap_continue,
        ap_idle => detect_ipv4_protocol_U0_ap_idle,
        ap_ready => detect_ipv4_protocol_U0_ap_ready,
        ipv4ProtocolFifo_V_V_dout => ipv4ProtocolFifo_V_V_dout,
        ipv4ProtocolFifo_V_V_empty_n => ipv4ProtocolFifo_V_V_empty_n,
        ipv4ProtocolFifo_V_V_read => detect_ipv4_protocol_U0_ipv4ProtocolFifo_V_V_read,
        ipv4ValidFifo_V_dout => ipv4ValidFifo_V_dout,
        ipv4ValidFifo_V_empty_n => ipv4ValidFifo_V_empty_n,
        ipv4ValidFifo_V_read => detect_ipv4_protocol_U0_ipv4ValidFifo_V_read,
        ipDataCutFifo_V_dout => ipDataCutFifo_V_dout,
        ipDataCutFifo_V_empty_n => ipDataCutFifo_V_empty_n,
        ipDataCutFifo_V_read => detect_ipv4_protocol_U0_ipDataCutFifo_V_read,
        udpDataFifo_V_din => detect_ipv4_protocol_U0_udpDataFifo_V_din,
        udpDataFifo_V_full_n => udpDataFifo_V_full_n,
        udpDataFifo_V_write => detect_ipv4_protocol_U0_udpDataFifo_V_write,
        m_axis_tcp_TREADY => m_axis_tcp_TREADY,
        m_axis_icmp_TREADY => m_axis_icmp_TREADY,
        m_axis_icmp_TDATA => detect_ipv4_protocol_U0_m_axis_icmp_TDATA,
        m_axis_icmp_TVALID => detect_ipv4_protocol_U0_m_axis_icmp_TVALID,
        m_axis_icmp_TKEEP => detect_ipv4_protocol_U0_m_axis_icmp_TKEEP,
        m_axis_icmp_TLAST => detect_ipv4_protocol_U0_m_axis_icmp_TLAST,
        m_axis_tcp_TDATA => detect_ipv4_protocol_U0_m_axis_tcp_TDATA,
        m_axis_tcp_TVALID => detect_ipv4_protocol_U0_m_axis_tcp_TVALID,
        m_axis_tcp_TKEEP => detect_ipv4_protocol_U0_m_axis_tcp_TKEEP,
        m_axis_tcp_TLAST => detect_ipv4_protocol_U0_m_axis_tcp_TLAST);

    detect_ipv6_protocol_U0 : component detect_ipv6_protocol
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => detect_ipv6_protocol_U0_ap_start,
        ap_done => detect_ipv6_protocol_U0_ap_done,
        ap_continue => detect_ipv6_protocol_U0_ap_continue,
        ap_idle => detect_ipv6_protocol_U0_ap_idle,
        ap_ready => detect_ipv6_protocol_U0_ap_ready,
        ipv6DataFifo_V_data_s_dout => ipv6DataFifo_V_data_s_dout,
        ipv6DataFifo_V_data_s_empty_n => ipv6DataFifo_V_data_s_empty_n,
        ipv6DataFifo_V_data_s_read => detect_ipv6_protocol_U0_ipv6DataFifo_V_data_s_read,
        ipv6DataFifo_V_keep_s_dout => ipv6DataFifo_V_keep_s_dout,
        ipv6DataFifo_V_keep_s_empty_n => ipv6DataFifo_V_keep_s_empty_n,
        ipv6DataFifo_V_keep_s_read => detect_ipv6_protocol_U0_ipv6DataFifo_V_keep_s_read,
        ipv6DataFifo_V_last_s_dout => ipv6DataFifo_V_last_s_dout,
        ipv6DataFifo_V_last_s_empty_n => ipv6DataFifo_V_last_s_empty_n,
        ipv6DataFifo_V_last_s_read => detect_ipv6_protocol_U0_ipv6DataFifo_V_last_s_read,
        m_axis_ipv6udp_TREADY => m_axis_ipv6udp_TREADY,
        m_axis_icmpv6_TREADY => m_axis_icmpv6_TREADY,
        m_axis_icmpv6_TDATA => detect_ipv6_protocol_U0_m_axis_icmpv6_TDATA,
        m_axis_icmpv6_TVALID => detect_ipv6_protocol_U0_m_axis_icmpv6_TVALID,
        m_axis_icmpv6_TKEEP => detect_ipv6_protocol_U0_m_axis_icmpv6_TKEEP,
        m_axis_icmpv6_TLAST => detect_ipv6_protocol_U0_m_axis_icmpv6_TLAST,
        m_axis_ipv6udp_TDATA => detect_ipv6_protocol_U0_m_axis_ipv6udp_TDATA,
        m_axis_ipv6udp_TVALID => detect_ipv6_protocol_U0_m_axis_ipv6udp_TVALID,
        m_axis_ipv6udp_TKEEP => detect_ipv6_protocol_U0_m_axis_ipv6udp_TKEEP,
        m_axis_ipv6udp_TLAST => detect_ipv6_protocol_U0_m_axis_ipv6udp_TLAST);

    duplicate_stream_U0 : component duplicate_stream
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => duplicate_stream_U0_ap_start,
        ap_done => duplicate_stream_U0_ap_done,
        ap_continue => duplicate_stream_U0_ap_continue,
        ap_idle => duplicate_stream_U0_ap_idle,
        ap_ready => duplicate_stream_U0_ap_ready,
        udpDataFifo_V_dout => udpDataFifo_V_dout,
        udpDataFifo_V_empty_n => udpDataFifo_V_empty_n,
        udpDataFifo_V_read => duplicate_stream_U0_udpDataFifo_V_read,
        m_axis_udp_TREADY => m_axis_udp_TREADY,
        m_axis_roce_TREADY => m_axis_roce_TREADY,
        m_axis_udp_TDATA => duplicate_stream_U0_m_axis_udp_TDATA,
        m_axis_udp_TVALID => duplicate_stream_U0_m_axis_udp_TVALID,
        m_axis_udp_TKEEP => duplicate_stream_U0_m_axis_udp_TKEEP,
        m_axis_udp_TLAST => duplicate_stream_U0_m_axis_udp_TLAST,
        m_axis_roce_TDATA => duplicate_stream_U0_m_axis_roce_TDATA,
        m_axis_roce_TVALID => duplicate_stream_U0_m_axis_roce_TVALID,
        m_axis_roce_TKEEP => duplicate_stream_U0_m_axis_roce_TKEEP,
        m_axis_roce_TLAST => duplicate_stream_U0_m_axis_roce_TLAST);

    etherTypeFifo_V_V_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => detect_eth_protocol_U0_etherTypeFifo_V_V_din,
        if_full_n => etherTypeFifo_V_V_full_n,
        if_write => detect_eth_protocol_U0_etherTypeFifo_V_V_write,
        if_dout => etherTypeFifo_V_V_dout,
        if_empty_n => etherTypeFifo_V_V_empty_n,
        if_read => route_by_eth_protoco_U0_etherTypeFifo_V_V_read);

    ethDataFifo_V_data_V_U : component fifo_w64_d4_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => detect_eth_protocol_U0_ethDataFifo_V_data_V_din,
        if_full_n => ethDataFifo_V_data_V_full_n,
        if_write => detect_eth_protocol_U0_ethDataFifo_V_data_V_write,
        if_dout => ethDataFifo_V_data_V_dout,
        if_empty_n => ethDataFifo_V_data_V_empty_n,
        if_read => route_by_eth_protoco_U0_ethDataFifo_V_data_V_read);

    ethDataFifo_V_keep_V_U : component fifo_w8_d4_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => detect_eth_protocol_U0_ethDataFifo_V_keep_V_din,
        if_full_n => ethDataFifo_V_keep_V_full_n,
        if_write => detect_eth_protocol_U0_ethDataFifo_V_keep_V_write,
        if_dout => ethDataFifo_V_keep_V_dout,
        if_empty_n => ethDataFifo_V_keep_V_empty_n,
        if_read => route_by_eth_protoco_U0_ethDataFifo_V_keep_V_read);

    ethDataFifo_V_last_V_U : component fifo_w1_d4_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => detect_eth_protocol_U0_ethDataFifo_V_last_V_din,
        if_full_n => ethDataFifo_V_last_V_full_n,
        if_write => detect_eth_protocol_U0_ethDataFifo_V_last_V_write,
        if_dout => ethDataFifo_V_last_V_dout,
        if_empty_n => ethDataFifo_V_last_V_empty_n,
        if_read => route_by_eth_protoco_U0_ethDataFifo_V_last_V_read);

    ipv4ShiftFifo_V_data_U : component fifo_w64_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => route_by_eth_protoco_U0_ipv4ShiftFifo_V_data_din,
        if_full_n => ipv4ShiftFifo_V_data_full_n,
        if_write => route_by_eth_protoco_U0_ipv4ShiftFifo_V_data_write,
        if_dout => ipv4ShiftFifo_V_data_dout,
        if_empty_n => ipv4ShiftFifo_V_data_empty_n,
        if_read => rshiftWordByOctet_1_U0_ipv4ShiftFifo_V_data_read);

    ipv4ShiftFifo_V_keep_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => route_by_eth_protoco_U0_ipv4ShiftFifo_V_keep_din,
        if_full_n => ipv4ShiftFifo_V_keep_full_n,
        if_write => route_by_eth_protoco_U0_ipv4ShiftFifo_V_keep_write,
        if_dout => ipv4ShiftFifo_V_keep_dout,
        if_empty_n => ipv4ShiftFifo_V_keep_empty_n,
        if_read => rshiftWordByOctet_1_U0_ipv4ShiftFifo_V_keep_read);

    ipv4ShiftFifo_V_last_U : component fifo_w1_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => route_by_eth_protoco_U0_ipv4ShiftFifo_V_last_din,
        if_full_n => ipv4ShiftFifo_V_last_full_n,
        if_write => route_by_eth_protoco_U0_ipv4ShiftFifo_V_last_write,
        if_dout => ipv4ShiftFifo_V_last_dout,
        if_empty_n => ipv4ShiftFifo_V_last_empty_n,
        if_read => rshiftWordByOctet_1_U0_ipv4ShiftFifo_V_last_read);

    ipv6ShiftFifo_V_data_U : component fifo_w64_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => route_by_eth_protoco_U0_ipv6ShiftFifo_V_data_din,
        if_full_n => ipv6ShiftFifo_V_data_full_n,
        if_write => route_by_eth_protoco_U0_ipv6ShiftFifo_V_data_write,
        if_dout => ipv6ShiftFifo_V_data_dout,
        if_empty_n => ipv6ShiftFifo_V_data_empty_n,
        if_read => rshiftWordByOctet_U0_ipv6ShiftFifo_V_data_read);

    ipv6ShiftFifo_V_keep_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => route_by_eth_protoco_U0_ipv6ShiftFifo_V_keep_din,
        if_full_n => ipv6ShiftFifo_V_keep_full_n,
        if_write => route_by_eth_protoco_U0_ipv6ShiftFifo_V_keep_write,
        if_dout => ipv6ShiftFifo_V_keep_dout,
        if_empty_n => ipv6ShiftFifo_V_keep_empty_n,
        if_read => rshiftWordByOctet_U0_ipv6ShiftFifo_V_keep_read);

    ipv6ShiftFifo_V_last_U : component fifo_w1_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => route_by_eth_protoco_U0_ipv6ShiftFifo_V_last_din,
        if_full_n => ipv6ShiftFifo_V_last_full_n,
        if_write => route_by_eth_protoco_U0_ipv6ShiftFifo_V_last_write,
        if_dout => ipv6ShiftFifo_V_last_dout,
        if_empty_n => ipv6ShiftFifo_V_last_empty_n,
        if_read => rshiftWordByOctet_U0_ipv6ShiftFifo_V_last_read);

    ipDataFifo_V_U : component fifo_w73_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => rshiftWordByOctet_1_U0_ipDataFifo_V_din,
        if_full_n => ipDataFifo_V_full_n,
        if_write => rshiftWordByOctet_1_U0_ipDataFifo_V_write,
        if_dout => ipDataFifo_V_dout,
        if_empty_n => ipDataFifo_V_empty_n,
        if_read => extract_ip_meta_64_U0_ipDataFifo_V_read);

    ipv6DataFifo_V_data_s_U : component fifo_w64_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => rshiftWordByOctet_U0_ipv6DataFifo_V_data_s_din,
        if_full_n => ipv6DataFifo_V_data_s_full_n,
        if_write => rshiftWordByOctet_U0_ipv6DataFifo_V_data_s_write,
        if_dout => ipv6DataFifo_V_data_s_dout,
        if_empty_n => ipv6DataFifo_V_data_s_empty_n,
        if_read => detect_ipv6_protocol_U0_ipv6DataFifo_V_data_s_read);

    ipv6DataFifo_V_keep_s_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => rshiftWordByOctet_U0_ipv6DataFifo_V_keep_s_din,
        if_full_n => ipv6DataFifo_V_keep_s_full_n,
        if_write => rshiftWordByOctet_U0_ipv6DataFifo_V_keep_s_write,
        if_dout => ipv6DataFifo_V_keep_s_dout,
        if_empty_n => ipv6DataFifo_V_keep_s_empty_n,
        if_read => detect_ipv6_protocol_U0_ipv6DataFifo_V_keep_s_read);

    ipv6DataFifo_V_last_s_U : component fifo_w1_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => rshiftWordByOctet_U0_ipv6DataFifo_V_last_s_din,
        if_full_n => ipv6DataFifo_V_last_s_full_n,
        if_write => rshiftWordByOctet_U0_ipv6DataFifo_V_last_s_write,
        if_dout => ipv6DataFifo_V_last_s_dout,
        if_empty_n => ipv6DataFifo_V_last_s_empty_n,
        if_read => detect_ipv6_protocol_U0_ipv6DataFifo_V_last_s_read);

    ipDataMetaFifo_V_dat_U : component fifo_w64_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => extract_ip_meta_64_U0_ipDataMetaFifo_V_dat_din,
        if_full_n => ipDataMetaFifo_V_dat_full_n,
        if_write => extract_ip_meta_64_U0_ipDataMetaFifo_V_dat_write,
        if_dout => ipDataMetaFifo_V_dat_dout,
        if_empty_n => ipDataMetaFifo_V_dat_empty_n,
        if_read => compute_ipv4_checksu_U0_ipDataMetaFifo_V_dat_read);

    ipDataMetaFifo_V_kee_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => extract_ip_meta_64_U0_ipDataMetaFifo_V_kee_din,
        if_full_n => ipDataMetaFifo_V_kee_full_n,
        if_write => extract_ip_meta_64_U0_ipDataMetaFifo_V_kee_write,
        if_dout => ipDataMetaFifo_V_kee_dout,
        if_empty_n => ipDataMetaFifo_V_kee_empty_n,
        if_read => compute_ipv4_checksu_U0_ipDataMetaFifo_V_kee_read);

    ipDataMetaFifo_V_las_U : component fifo_w1_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => extract_ip_meta_64_U0_ipDataMetaFifo_V_las_din,
        if_full_n => ipDataMetaFifo_V_las_full_n,
        if_write => extract_ip_meta_64_U0_ipDataMetaFifo_V_las_write,
        if_dout => ipDataMetaFifo_V_las_dout,
        if_empty_n => ipDataMetaFifo_V_las_empty_n,
        if_read => compute_ipv4_checksu_U0_ipDataMetaFifo_V_las_read);

    validIpAddressFifo_V_U : component fifo_w1_d32_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => extract_ip_meta_64_U0_validIpAddressFifo_V_din,
        if_full_n => validIpAddressFifo_V_full_n,
        if_write => extract_ip_meta_64_U0_validIpAddressFifo_V_write,
        if_dout => validIpAddressFifo_V_dout,
        if_empty_n => validIpAddressFifo_V_empty_n,
        if_read => ip_invalid_dropper_U0_validIpAddressFifo_V_read);

    ipv4ProtocolFifo_V_V_U : component fifo_w8_d32_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => extract_ip_meta_64_U0_ipv4ProtocolFifo_V_V_din,
        if_full_n => ipv4ProtocolFifo_V_V_full_n,
        if_write => extract_ip_meta_64_U0_ipv4ProtocolFifo_V_V_write,
        if_dout => ipv4ProtocolFifo_V_V_dout,
        if_empty_n => ipv4ProtocolFifo_V_V_empty_n,
        if_read => detect_ipv4_protocol_U0_ipv4ProtocolFifo_V_V_read);

    ipDataCheckFifo_V_U : component fifo_w73_d64_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => compute_ipv4_checksu_U0_ipDataCheckFifo_V_din,
        if_full_n => ipDataCheckFifo_V_full_n,
        if_write => compute_ipv4_checksu_U0_ipDataCheckFifo_V_write,
        if_dout => ipDataCheckFifo_V_dout,
        if_empty_n => ipDataCheckFifo_V_empty_n,
        if_read => ip_invalid_dropper_U0_ipDataCheckFifo_V_read);

    iph_subSumsFifoOut_V_U : component fifo_w68_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => compute_ipv4_checksu_U0_iph_subSumsFifoOut_V_din,
        if_full_n => iph_subSumsFifoOut_V_full_n,
        if_write => compute_ipv4_checksu_U0_iph_subSumsFifoOut_V_write,
        if_dout => iph_subSumsFifoOut_V_dout,
        if_empty_n => iph_subSumsFifoOut_V_empty_n,
        if_read => check_ipv4_checksum_U0_iph_subSumsFifoOut_V_read);

    validChecksumFifo_V_U : component fifo_w1_d4_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => check_ipv4_checksum_U0_validChecksumFifo_V_din,
        if_full_n => validChecksumFifo_V_full_n,
        if_write => check_ipv4_checksum_U0_validChecksumFifo_V_write,
        if_dout => validChecksumFifo_V_dout,
        if_empty_n => validChecksumFifo_V_empty_n,
        if_read => ip_invalid_dropper_U0_validChecksumFifo_V_read);

    ipv4ValidFifo_V_U : component fifo_w1_d8_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ip_invalid_dropper_U0_ipv4ValidFifo_V_din,
        if_full_n => ipv4ValidFifo_V_full_n,
        if_write => ip_invalid_dropper_U0_ipv4ValidFifo_V_write,
        if_dout => ipv4ValidFifo_V_dout,
        if_empty_n => ipv4ValidFifo_V_empty_n,
        if_read => detect_ipv4_protocol_U0_ipv4ValidFifo_V_read);

    ipDataDropFifo_V_U : component fifo_w73_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ip_invalid_dropper_U0_ipDataDropFifo_V_din,
        if_full_n => ipDataDropFifo_V_full_n,
        if_write => ip_invalid_dropper_U0_ipDataDropFifo_V_write,
        if_dout => ipDataDropFifo_V_dout,
        if_empty_n => ipDataDropFifo_V_empty_n,
        if_read => cut_length_64_U0_ipDataDropFifo_V_read);

    ipDataCutFifo_V_U : component fifo_w73_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => cut_length_64_U0_ipDataCutFifo_V_din,
        if_full_n => ipDataCutFifo_V_full_n,
        if_write => cut_length_64_U0_ipDataCutFifo_V_write,
        if_dout => ipDataCutFifo_V_dout,
        if_empty_n => ipDataCutFifo_V_empty_n,
        if_read => detect_ipv4_protocol_U0_ipDataCutFifo_V_read);

    udpDataFifo_V_U : component fifo_w73_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => detect_ipv4_protocol_U0_udpDataFifo_V_din,
        if_full_n => udpDataFifo_V_full_n,
        if_write => detect_ipv4_protocol_U0_udpDataFifo_V_write,
        if_dout => udpDataFifo_V_dout,
        if_empty_n => udpDataFifo_V_empty_n,
        if_read => duplicate_stream_U0_udpDataFifo_V_read);





    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_continue <= ap_const_logic_0;
    check_ipv4_checksum_U0_ap_continue <= ap_const_logic_1;
    check_ipv4_checksum_U0_ap_start <= ap_const_logic_1;
    compute_ipv4_checksu_U0_ap_continue <= ap_const_logic_1;
    compute_ipv4_checksu_U0_ap_start <= ap_const_logic_1;
    cut_length_64_U0_ap_continue <= ap_const_logic_1;
    cut_length_64_U0_ap_start <= ap_const_logic_1;
    detect_eth_protocol_U0_ap_continue <= ap_const_logic_1;
    detect_eth_protocol_U0_ap_start <= ap_const_logic_1;
    detect_ipv4_protocol_U0_ap_continue <= ap_const_logic_1;
    detect_ipv4_protocol_U0_ap_start <= ap_const_logic_1;
    detect_ipv6_protocol_U0_ap_continue <= ap_const_logic_1;
    detect_ipv6_protocol_U0_ap_start <= ap_const_logic_1;
    duplicate_stream_U0_ap_continue <= ap_const_logic_1;
    duplicate_stream_U0_ap_start <= ap_const_logic_1;
    extract_ip_meta_64_U0_ap_continue <= ap_const_logic_1;
    extract_ip_meta_64_U0_ap_start <= ap_const_logic_1;
    ip_invalid_dropper_U0_ap_continue <= ap_const_logic_1;
    ip_invalid_dropper_U0_ap_start <= ap_const_logic_1;
    m_axis_arp_TDATA <= route_by_eth_protoco_U0_m_axis_arp_TDATA;
    m_axis_arp_TKEEP <= route_by_eth_protoco_U0_m_axis_arp_TKEEP;
    m_axis_arp_TLAST <= route_by_eth_protoco_U0_m_axis_arp_TLAST;
    m_axis_arp_TVALID <= route_by_eth_protoco_U0_m_axis_arp_TVALID;
    m_axis_icmp_TDATA <= detect_ipv4_protocol_U0_m_axis_icmp_TDATA;
    m_axis_icmp_TKEEP <= detect_ipv4_protocol_U0_m_axis_icmp_TKEEP;
    m_axis_icmp_TLAST <= detect_ipv4_protocol_U0_m_axis_icmp_TLAST;
    m_axis_icmp_TVALID <= detect_ipv4_protocol_U0_m_axis_icmp_TVALID;
    m_axis_icmpv6_TDATA <= detect_ipv6_protocol_U0_m_axis_icmpv6_TDATA;
    m_axis_icmpv6_TKEEP <= detect_ipv6_protocol_U0_m_axis_icmpv6_TKEEP;
    m_axis_icmpv6_TLAST <= detect_ipv6_protocol_U0_m_axis_icmpv6_TLAST;
    m_axis_icmpv6_TVALID <= detect_ipv6_protocol_U0_m_axis_icmpv6_TVALID;
    m_axis_ipv6udp_TDATA <= detect_ipv6_protocol_U0_m_axis_ipv6udp_TDATA;
    m_axis_ipv6udp_TKEEP <= detect_ipv6_protocol_U0_m_axis_ipv6udp_TKEEP;
    m_axis_ipv6udp_TLAST <= detect_ipv6_protocol_U0_m_axis_ipv6udp_TLAST;
    m_axis_ipv6udp_TVALID <= detect_ipv6_protocol_U0_m_axis_ipv6udp_TVALID;
    m_axis_roce_TDATA <= duplicate_stream_U0_m_axis_roce_TDATA;
    m_axis_roce_TKEEP <= duplicate_stream_U0_m_axis_roce_TKEEP;
    m_axis_roce_TLAST <= duplicate_stream_U0_m_axis_roce_TLAST;
    m_axis_roce_TVALID <= duplicate_stream_U0_m_axis_roce_TVALID;
    m_axis_tcp_TDATA <= detect_ipv4_protocol_U0_m_axis_tcp_TDATA;
    m_axis_tcp_TKEEP <= detect_ipv4_protocol_U0_m_axis_tcp_TKEEP;
    m_axis_tcp_TLAST <= detect_ipv4_protocol_U0_m_axis_tcp_TLAST;
    m_axis_tcp_TVALID <= detect_ipv4_protocol_U0_m_axis_tcp_TVALID;
    m_axis_udp_TDATA <= duplicate_stream_U0_m_axis_udp_TDATA;
    m_axis_udp_TKEEP <= duplicate_stream_U0_m_axis_udp_TKEEP;
    m_axis_udp_TLAST <= duplicate_stream_U0_m_axis_udp_TLAST;
    m_axis_udp_TVALID <= duplicate_stream_U0_m_axis_udp_TVALID;
    route_by_eth_protoco_U0_ap_continue <= ap_const_logic_1;
    route_by_eth_protoco_U0_ap_start <= ap_const_logic_1;
    rshiftWordByOctet_1_U0_ap_continue <= ap_const_logic_1;
    rshiftWordByOctet_1_U0_ap_start <= ap_const_logic_1;
    rshiftWordByOctet_U0_ap_continue <= ap_const_logic_1;
    rshiftWordByOctet_U0_ap_start <= ap_const_logic_1;
    s_axis_raw_TREADY <= detect_eth_protocol_U0_s_axis_raw_TREADY;
end behav;
