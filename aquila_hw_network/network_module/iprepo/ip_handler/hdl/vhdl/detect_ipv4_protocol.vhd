-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity detect_ipv4_protocol is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ipv4ProtocolFifo_V_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    ipv4ProtocolFifo_V_V_empty_n : IN STD_LOGIC;
    ipv4ProtocolFifo_V_V_read : OUT STD_LOGIC;
    ipv4ValidFifo_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    ipv4ValidFifo_V_empty_n : IN STD_LOGIC;
    ipv4ValidFifo_V_read : OUT STD_LOGIC;
    ipDataCutFifo_V_dout : IN STD_LOGIC_VECTOR (72 downto 0);
    ipDataCutFifo_V_empty_n : IN STD_LOGIC;
    ipDataCutFifo_V_read : OUT STD_LOGIC;
    udpDataFifo_V_din : OUT STD_LOGIC_VECTOR (72 downto 0);
    udpDataFifo_V_full_n : IN STD_LOGIC;
    udpDataFifo_V_write : OUT STD_LOGIC;
    m_axis_tcp_TREADY : IN STD_LOGIC;
    m_axis_icmp_TREADY : IN STD_LOGIC;
    m_axis_icmp_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axis_icmp_TVALID : OUT STD_LOGIC;
    m_axis_icmp_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axis_icmp_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_tcp_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axis_tcp_TVALID : OUT STD_LOGIC;
    m_axis_tcp_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axis_tcp_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of detect_ipv4_protocol is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_11 : STD_LOGIC_VECTOR (7 downto 0) := "00010001";
    constant ap_const_lv8_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000110";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal tmp_18_nbreadreq_fu_82_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_nbreadreq_fu_90_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op10_read_state1 : BOOLEAN;
    signal ap_predicate_op12_read_state1 : BOOLEAN;
    signal tmp_nbreadreq_fu_110_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op17_read_state1 : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal dip_state_load_reg_205 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_221 : STD_LOGIC_VECTOR (0 downto 0);
    signal dip_ipProtocol_V_loa_reg_248 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_predicate_op25_write_state2 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal TCPdataOut_V_data_V_1_ack_in : STD_LOGIC;
    signal ap_predicate_op24_write_state2 : BOOLEAN;
    signal ICMPdataOut_V_data_V_1_ack_in : STD_LOGIC;
    signal ap_predicate_op26_write_state2 : BOOLEAN;
    signal ap_block_state2_io : BOOLEAN;
    signal ICMPdataOut_V_data_V_1_ack_out : STD_LOGIC;
    signal ICMPdataOut_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ICMPdataOut_V_keep_V_1_ack_out : STD_LOGIC;
    signal ICMPdataOut_V_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ICMPdataOut_V_last_V_1_ack_out : STD_LOGIC;
    signal ICMPdataOut_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal TCPdataOut_V_data_V_1_ack_out : STD_LOGIC;
    signal TCPdataOut_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal TCPdataOut_V_keep_V_1_ack_out : STD_LOGIC;
    signal TCPdataOut_V_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal TCPdataOut_V_last_V_1_ack_out : STD_LOGIC;
    signal TCPdataOut_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal dip_state_load_reg_205_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_221_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal dip_ipProtocol_V_loa_reg_248_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_predicate_op38_write_state3 : BOOLEAN;
    signal ap_predicate_op41_write_state3 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ICMPdataOut_V_data_V_1_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal ICMPdataOut_V_data_V_1_vld_in : STD_LOGIC;
    signal ICMPdataOut_V_data_V_1_vld_out : STD_LOGIC;
    signal ICMPdataOut_V_data_V_1_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal ICMPdataOut_V_data_V_1_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal ICMPdataOut_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal ICMPdataOut_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal ICMPdataOut_V_data_V_1_sel : STD_LOGIC;
    signal ICMPdataOut_V_data_V_1_load_A : STD_LOGIC;
    signal ICMPdataOut_V_data_V_1_load_B : STD_LOGIC;
    signal ICMPdataOut_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal ICMPdataOut_V_keep_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal ICMPdataOut_V_keep_V_1_vld_in : STD_LOGIC;
    signal ICMPdataOut_V_keep_V_1_vld_out : STD_LOGIC;
    signal ICMPdataOut_V_keep_V_1_ack_in : STD_LOGIC;
    signal ICMPdataOut_V_keep_V_1_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal ICMPdataOut_V_keep_V_1_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal ICMPdataOut_V_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal ICMPdataOut_V_keep_V_1_sel_wr : STD_LOGIC := '0';
    signal ICMPdataOut_V_keep_V_1_sel : STD_LOGIC;
    signal ICMPdataOut_V_keep_V_1_load_A : STD_LOGIC;
    signal ICMPdataOut_V_keep_V_1_load_B : STD_LOGIC;
    signal ICMPdataOut_V_keep_V_1_state_cmp_full : STD_LOGIC;
    signal ICMPdataOut_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal ICMPdataOut_V_last_V_1_vld_in : STD_LOGIC;
    signal ICMPdataOut_V_last_V_1_vld_out : STD_LOGIC;
    signal ICMPdataOut_V_last_V_1_ack_in : STD_LOGIC;
    signal ICMPdataOut_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal ICMPdataOut_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal ICMPdataOut_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal ICMPdataOut_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal ICMPdataOut_V_last_V_1_sel : STD_LOGIC;
    signal ICMPdataOut_V_last_V_1_load_A : STD_LOGIC;
    signal ICMPdataOut_V_last_V_1_load_B : STD_LOGIC;
    signal ICMPdataOut_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal TCPdataOut_V_data_V_1_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal TCPdataOut_V_data_V_1_vld_in : STD_LOGIC;
    signal TCPdataOut_V_data_V_1_vld_out : STD_LOGIC;
    signal TCPdataOut_V_data_V_1_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal TCPdataOut_V_data_V_1_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal TCPdataOut_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal TCPdataOut_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal TCPdataOut_V_data_V_1_sel : STD_LOGIC;
    signal TCPdataOut_V_data_V_1_load_A : STD_LOGIC;
    signal TCPdataOut_V_data_V_1_load_B : STD_LOGIC;
    signal TCPdataOut_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal TCPdataOut_V_keep_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal TCPdataOut_V_keep_V_1_vld_in : STD_LOGIC;
    signal TCPdataOut_V_keep_V_1_vld_out : STD_LOGIC;
    signal TCPdataOut_V_keep_V_1_ack_in : STD_LOGIC;
    signal TCPdataOut_V_keep_V_1_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal TCPdataOut_V_keep_V_1_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal TCPdataOut_V_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal TCPdataOut_V_keep_V_1_sel_wr : STD_LOGIC := '0';
    signal TCPdataOut_V_keep_V_1_sel : STD_LOGIC;
    signal TCPdataOut_V_keep_V_1_load_A : STD_LOGIC;
    signal TCPdataOut_V_keep_V_1_load_B : STD_LOGIC;
    signal TCPdataOut_V_keep_V_1_state_cmp_full : STD_LOGIC;
    signal TCPdataOut_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal TCPdataOut_V_last_V_1_vld_in : STD_LOGIC;
    signal TCPdataOut_V_last_V_1_vld_out : STD_LOGIC;
    signal TCPdataOut_V_last_V_1_ack_in : STD_LOGIC;
    signal TCPdataOut_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal TCPdataOut_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal TCPdataOut_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal TCPdataOut_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal TCPdataOut_V_last_V_1_sel : STD_LOGIC;
    signal TCPdataOut_V_last_V_1_load_A : STD_LOGIC;
    signal TCPdataOut_V_last_V_1_load_B : STD_LOGIC;
    signal TCPdataOut_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal dip_state : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal dip_ipProtocol_V : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal m_axis_icmp_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal m_axis_tcp_TDATA_blk_n : STD_LOGIC;
    signal ipv4ProtocolFifo_V_V_blk_n : STD_LOGIC;
    signal ipv4ValidFifo_V_blk_n : STD_LOGIC;
    signal ipDataCutFifo_V_blk_n : STD_LOGIC;
    signal udpDataFifo_V_blk_n : STD_LOGIC;
    signal tmp_22_read_fu_104_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp9_reg_225 : STD_LOGIC_VECTOR (72 downto 0);
    signal tmp_data_V_fu_173_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_data_V_reg_230 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_keep_V_reg_236 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_last_V_fu_187_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_242 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_588 : BOOLEAN;
    signal ap_condition_591 : BOOLEAN;
    signal ap_condition_216 : BOOLEAN;


begin




    ICMPdataOut_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ICMPdataOut_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ICMPdataOut_V_data_V_1_vld_out) and (ap_const_logic_1 = ICMPdataOut_V_data_V_1_ack_out))) then 
                                        ICMPdataOut_V_data_V_1_sel_rd <= not(ICMPdataOut_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    ICMPdataOut_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ICMPdataOut_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ICMPdataOut_V_data_V_1_vld_in) and (ap_const_logic_1 = ICMPdataOut_V_data_V_1_ack_in))) then 
                                        ICMPdataOut_V_data_V_1_sel_wr <= not(ICMPdataOut_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    ICMPdataOut_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ICMPdataOut_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = ICMPdataOut_V_data_V_1_vld_in) and (ap_const_logic_1 = ICMPdataOut_V_data_V_1_ack_out) and (ap_const_lv2_3 = ICMPdataOut_V_data_V_1_state)) or ((ap_const_logic_0 = ICMPdataOut_V_data_V_1_vld_in) and (ap_const_lv2_2 = ICMPdataOut_V_data_V_1_state)))) then 
                    ICMPdataOut_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((m_axis_icmp_TREADY = ap_const_logic_0) and (ap_const_lv2_1 = ICMPdataOut_V_data_V_1_state)) or ((m_axis_icmp_TREADY = ap_const_logic_0) and (ap_const_logic_1 = ICMPdataOut_V_data_V_1_vld_in) and (ap_const_lv2_3 = ICMPdataOut_V_data_V_1_state)))) then 
                    ICMPdataOut_V_data_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = ICMPdataOut_V_data_V_1_ack_out) and (ap_const_lv2_1 = ICMPdataOut_V_data_V_1_state)) or (not(((ap_const_logic_0 = ICMPdataOut_V_data_V_1_vld_in) and (ap_const_logic_1 = ICMPdataOut_V_data_V_1_ack_out))) and not(((m_axis_icmp_TREADY = ap_const_logic_0) and (ap_const_logic_1 = ICMPdataOut_V_data_V_1_vld_in))) and (ap_const_lv2_3 = ICMPdataOut_V_data_V_1_state)) or ((ap_const_logic_1 = ICMPdataOut_V_data_V_1_vld_in) and (ap_const_lv2_2 = ICMPdataOut_V_data_V_1_state)))) then 
                    ICMPdataOut_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    ICMPdataOut_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    ICMPdataOut_V_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ICMPdataOut_V_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ICMPdataOut_V_keep_V_1_vld_out) and (ap_const_logic_1 = ICMPdataOut_V_keep_V_1_ack_out))) then 
                                        ICMPdataOut_V_keep_V_1_sel_rd <= not(ICMPdataOut_V_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    ICMPdataOut_V_keep_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ICMPdataOut_V_keep_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ICMPdataOut_V_keep_V_1_ack_in) and (ap_const_logic_1 = ICMPdataOut_V_keep_V_1_vld_in))) then 
                                        ICMPdataOut_V_keep_V_1_sel_wr <= not(ICMPdataOut_V_keep_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    ICMPdataOut_V_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ICMPdataOut_V_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = ICMPdataOut_V_keep_V_1_vld_in) and (ap_const_logic_1 = ICMPdataOut_V_keep_V_1_ack_out) and (ap_const_lv2_3 = ICMPdataOut_V_keep_V_1_state)) or ((ap_const_logic_0 = ICMPdataOut_V_keep_V_1_vld_in) and (ap_const_lv2_2 = ICMPdataOut_V_keep_V_1_state)))) then 
                    ICMPdataOut_V_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((m_axis_icmp_TREADY = ap_const_logic_0) and (ap_const_lv2_1 = ICMPdataOut_V_keep_V_1_state)) or ((m_axis_icmp_TREADY = ap_const_logic_0) and (ap_const_logic_1 = ICMPdataOut_V_keep_V_1_vld_in) and (ap_const_lv2_3 = ICMPdataOut_V_keep_V_1_state)))) then 
                    ICMPdataOut_V_keep_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = ICMPdataOut_V_keep_V_1_ack_out) and (ap_const_lv2_1 = ICMPdataOut_V_keep_V_1_state)) or (not(((ap_const_logic_0 = ICMPdataOut_V_keep_V_1_vld_in) and (ap_const_logic_1 = ICMPdataOut_V_keep_V_1_ack_out))) and not(((m_axis_icmp_TREADY = ap_const_logic_0) and (ap_const_logic_1 = ICMPdataOut_V_keep_V_1_vld_in))) and (ap_const_lv2_3 = ICMPdataOut_V_keep_V_1_state)) or ((ap_const_logic_1 = ICMPdataOut_V_keep_V_1_vld_in) and (ap_const_lv2_2 = ICMPdataOut_V_keep_V_1_state)))) then 
                    ICMPdataOut_V_keep_V_1_state <= ap_const_lv2_3;
                else 
                    ICMPdataOut_V_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    ICMPdataOut_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ICMPdataOut_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ICMPdataOut_V_last_V_1_vld_out) and (ap_const_logic_1 = ICMPdataOut_V_last_V_1_ack_out))) then 
                                        ICMPdataOut_V_last_V_1_sel_rd <= not(ICMPdataOut_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    ICMPdataOut_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ICMPdataOut_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ICMPdataOut_V_last_V_1_ack_in) and (ap_const_logic_1 = ICMPdataOut_V_last_V_1_vld_in))) then 
                                        ICMPdataOut_V_last_V_1_sel_wr <= not(ICMPdataOut_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    ICMPdataOut_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ICMPdataOut_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = ICMPdataOut_V_last_V_1_vld_in) and (ap_const_logic_1 = ICMPdataOut_V_last_V_1_ack_out) and (ap_const_lv2_3 = ICMPdataOut_V_last_V_1_state)) or ((ap_const_logic_0 = ICMPdataOut_V_last_V_1_vld_in) and (ap_const_lv2_2 = ICMPdataOut_V_last_V_1_state)))) then 
                    ICMPdataOut_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((m_axis_icmp_TREADY = ap_const_logic_0) and (ap_const_lv2_1 = ICMPdataOut_V_last_V_1_state)) or ((m_axis_icmp_TREADY = ap_const_logic_0) and (ap_const_logic_1 = ICMPdataOut_V_last_V_1_vld_in) and (ap_const_lv2_3 = ICMPdataOut_V_last_V_1_state)))) then 
                    ICMPdataOut_V_last_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = ICMPdataOut_V_last_V_1_ack_out) and (ap_const_lv2_1 = ICMPdataOut_V_last_V_1_state)) or (not(((ap_const_logic_0 = ICMPdataOut_V_last_V_1_vld_in) and (ap_const_logic_1 = ICMPdataOut_V_last_V_1_ack_out))) and not(((m_axis_icmp_TREADY = ap_const_logic_0) and (ap_const_logic_1 = ICMPdataOut_V_last_V_1_vld_in))) and (ap_const_lv2_3 = ICMPdataOut_V_last_V_1_state)) or ((ap_const_logic_1 = ICMPdataOut_V_last_V_1_vld_in) and (ap_const_lv2_2 = ICMPdataOut_V_last_V_1_state)))) then 
                    ICMPdataOut_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    ICMPdataOut_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    TCPdataOut_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                TCPdataOut_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = TCPdataOut_V_data_V_1_vld_out) and (ap_const_logic_1 = TCPdataOut_V_data_V_1_ack_out))) then 
                                        TCPdataOut_V_data_V_1_sel_rd <= not(TCPdataOut_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    TCPdataOut_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                TCPdataOut_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = TCPdataOut_V_data_V_1_vld_in) and (ap_const_logic_1 = TCPdataOut_V_data_V_1_ack_in))) then 
                                        TCPdataOut_V_data_V_1_sel_wr <= not(TCPdataOut_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    TCPdataOut_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                TCPdataOut_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = TCPdataOut_V_data_V_1_vld_in) and (ap_const_logic_1 = TCPdataOut_V_data_V_1_ack_out) and (ap_const_lv2_3 = TCPdataOut_V_data_V_1_state)) or ((ap_const_logic_0 = TCPdataOut_V_data_V_1_vld_in) and (ap_const_lv2_2 = TCPdataOut_V_data_V_1_state)))) then 
                    TCPdataOut_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((m_axis_tcp_TREADY = ap_const_logic_0) and (ap_const_lv2_1 = TCPdataOut_V_data_V_1_state)) or ((m_axis_tcp_TREADY = ap_const_logic_0) and (ap_const_logic_1 = TCPdataOut_V_data_V_1_vld_in) and (ap_const_lv2_3 = TCPdataOut_V_data_V_1_state)))) then 
                    TCPdataOut_V_data_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = TCPdataOut_V_data_V_1_ack_out) and (ap_const_lv2_1 = TCPdataOut_V_data_V_1_state)) or (not(((ap_const_logic_0 = TCPdataOut_V_data_V_1_vld_in) and (ap_const_logic_1 = TCPdataOut_V_data_V_1_ack_out))) and not(((m_axis_tcp_TREADY = ap_const_logic_0) and (ap_const_logic_1 = TCPdataOut_V_data_V_1_vld_in))) and (ap_const_lv2_3 = TCPdataOut_V_data_V_1_state)) or ((ap_const_logic_1 = TCPdataOut_V_data_V_1_vld_in) and (ap_const_lv2_2 = TCPdataOut_V_data_V_1_state)))) then 
                    TCPdataOut_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    TCPdataOut_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    TCPdataOut_V_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                TCPdataOut_V_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = TCPdataOut_V_keep_V_1_vld_out) and (ap_const_logic_1 = TCPdataOut_V_keep_V_1_ack_out))) then 
                                        TCPdataOut_V_keep_V_1_sel_rd <= not(TCPdataOut_V_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    TCPdataOut_V_keep_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                TCPdataOut_V_keep_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = TCPdataOut_V_keep_V_1_ack_in) and (ap_const_logic_1 = TCPdataOut_V_keep_V_1_vld_in))) then 
                                        TCPdataOut_V_keep_V_1_sel_wr <= not(TCPdataOut_V_keep_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    TCPdataOut_V_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                TCPdataOut_V_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = TCPdataOut_V_keep_V_1_vld_in) and (ap_const_logic_1 = TCPdataOut_V_keep_V_1_ack_out) and (ap_const_lv2_3 = TCPdataOut_V_keep_V_1_state)) or ((ap_const_logic_0 = TCPdataOut_V_keep_V_1_vld_in) and (ap_const_lv2_2 = TCPdataOut_V_keep_V_1_state)))) then 
                    TCPdataOut_V_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((m_axis_tcp_TREADY = ap_const_logic_0) and (ap_const_lv2_1 = TCPdataOut_V_keep_V_1_state)) or ((m_axis_tcp_TREADY = ap_const_logic_0) and (ap_const_logic_1 = TCPdataOut_V_keep_V_1_vld_in) and (ap_const_lv2_3 = TCPdataOut_V_keep_V_1_state)))) then 
                    TCPdataOut_V_keep_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = TCPdataOut_V_keep_V_1_ack_out) and (ap_const_lv2_1 = TCPdataOut_V_keep_V_1_state)) or (not(((ap_const_logic_0 = TCPdataOut_V_keep_V_1_vld_in) and (ap_const_logic_1 = TCPdataOut_V_keep_V_1_ack_out))) and not(((m_axis_tcp_TREADY = ap_const_logic_0) and (ap_const_logic_1 = TCPdataOut_V_keep_V_1_vld_in))) and (ap_const_lv2_3 = TCPdataOut_V_keep_V_1_state)) or ((ap_const_logic_1 = TCPdataOut_V_keep_V_1_vld_in) and (ap_const_lv2_2 = TCPdataOut_V_keep_V_1_state)))) then 
                    TCPdataOut_V_keep_V_1_state <= ap_const_lv2_3;
                else 
                    TCPdataOut_V_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    TCPdataOut_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                TCPdataOut_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = TCPdataOut_V_last_V_1_vld_out) and (ap_const_logic_1 = TCPdataOut_V_last_V_1_ack_out))) then 
                                        TCPdataOut_V_last_V_1_sel_rd <= not(TCPdataOut_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    TCPdataOut_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                TCPdataOut_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = TCPdataOut_V_last_V_1_ack_in) and (ap_const_logic_1 = TCPdataOut_V_last_V_1_vld_in))) then 
                                        TCPdataOut_V_last_V_1_sel_wr <= not(TCPdataOut_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    TCPdataOut_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                TCPdataOut_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = TCPdataOut_V_last_V_1_vld_in) and (ap_const_logic_1 = TCPdataOut_V_last_V_1_ack_out) and (ap_const_lv2_3 = TCPdataOut_V_last_V_1_state)) or ((ap_const_logic_0 = TCPdataOut_V_last_V_1_vld_in) and (ap_const_lv2_2 = TCPdataOut_V_last_V_1_state)))) then 
                    TCPdataOut_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((m_axis_tcp_TREADY = ap_const_logic_0) and (ap_const_lv2_1 = TCPdataOut_V_last_V_1_state)) or ((m_axis_tcp_TREADY = ap_const_logic_0) and (ap_const_logic_1 = TCPdataOut_V_last_V_1_vld_in) and (ap_const_lv2_3 = TCPdataOut_V_last_V_1_state)))) then 
                    TCPdataOut_V_last_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = TCPdataOut_V_last_V_1_ack_out) and (ap_const_lv2_1 = TCPdataOut_V_last_V_1_state)) or (not(((ap_const_logic_0 = TCPdataOut_V_last_V_1_vld_in) and (ap_const_logic_1 = TCPdataOut_V_last_V_1_ack_out))) and not(((m_axis_tcp_TREADY = ap_const_logic_0) and (ap_const_logic_1 = TCPdataOut_V_last_V_1_vld_in))) and (ap_const_lv2_3 = TCPdataOut_V_last_V_1_state)) or ((ap_const_logic_1 = TCPdataOut_V_last_V_1_vld_in) and (ap_const_lv2_2 = TCPdataOut_V_last_V_1_state)))) then 
                    TCPdataOut_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    TCPdataOut_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    dip_state_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_216)) then
                if ((ap_const_boolean_1 = ap_condition_591)) then 
                    dip_state <= ap_const_lv1_0;
                elsif ((ap_const_boolean_1 = ap_condition_588)) then 
                    dip_state <= ap_const_lv1_1;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ICMPdataOut_V_data_V_1_load_A)) then
                ICMPdataOut_V_data_V_1_payload_A <= tmp_data_V_reg_230;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ICMPdataOut_V_data_V_1_load_B)) then
                ICMPdataOut_V_data_V_1_payload_B <= tmp_data_V_reg_230;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ICMPdataOut_V_keep_V_1_load_A)) then
                ICMPdataOut_V_keep_V_1_payload_A <= tmp_keep_V_reg_236;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ICMPdataOut_V_keep_V_1_load_B)) then
                ICMPdataOut_V_keep_V_1_payload_B <= tmp_keep_V_reg_236;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ICMPdataOut_V_last_V_1_load_A)) then
                ICMPdataOut_V_last_V_1_payload_A <= tmp_last_V_reg_242;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ICMPdataOut_V_last_V_1_load_B)) then
                ICMPdataOut_V_last_V_1_payload_B <= tmp_last_V_reg_242;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = TCPdataOut_V_data_V_1_load_A)) then
                TCPdataOut_V_data_V_1_payload_A <= tmp_data_V_reg_230;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = TCPdataOut_V_data_V_1_load_B)) then
                TCPdataOut_V_data_V_1_payload_B <= tmp_data_V_reg_230;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = TCPdataOut_V_keep_V_1_load_A)) then
                TCPdataOut_V_keep_V_1_payload_A <= tmp_keep_V_reg_236;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = TCPdataOut_V_keep_V_1_load_B)) then
                TCPdataOut_V_keep_V_1_payload_B <= tmp_keep_V_reg_236;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = TCPdataOut_V_last_V_1_load_A)) then
                TCPdataOut_V_last_V_1_payload_A <= tmp_last_V_reg_242;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = TCPdataOut_V_last_V_1_load_B)) then
                TCPdataOut_V_last_V_1_payload_B <= tmp_last_V_reg_242;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_20_nbreadreq_fu_90_p3 = ap_const_lv1_1) and (tmp_18_nbreadreq_fu_82_p3 = ap_const_lv1_1) and (dip_state = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                dip_ipProtocol_V <= ipv4ProtocolFifo_V_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_nbreadreq_fu_110_p3 = ap_const_lv1_1) and (dip_state = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                dip_ipProtocol_V_loa_reg_248 <= dip_ipProtocol_V;
                tmp_data_V_reg_230 <= tmp_data_V_fu_173_p1;
                tmp_keep_V_reg_236 <= ipDataCutFifo_V_dout(71 downto 64);
                tmp_last_V_reg_242 <= ipDataCutFifo_V_dout(72 downto 72);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                dip_ipProtocol_V_loa_reg_248_pp0_iter1_reg <= dip_ipProtocol_V_loa_reg_248;
                dip_state_load_reg_205 <= dip_state;
                dip_state_load_reg_205_pp0_iter1_reg <= dip_state_load_reg_205;
                tmp_reg_221_pp0_iter1_reg <= tmp_reg_221;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op17_read_state1 = ap_const_boolean_1))) then
                tmp9_reg_225 <= ipDataCutFifo_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((dip_state = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_reg_221 <= tmp_nbreadreq_fu_110_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ICMPdataOut_V_data_V_1_ack_in <= ICMPdataOut_V_data_V_1_state(1);
    ICMPdataOut_V_data_V_1_ack_out <= m_axis_icmp_TREADY;

    ICMPdataOut_V_data_V_1_data_out_assign_proc : process(ICMPdataOut_V_data_V_1_payload_A, ICMPdataOut_V_data_V_1_payload_B, ICMPdataOut_V_data_V_1_sel)
    begin
        if ((ap_const_logic_1 = ICMPdataOut_V_data_V_1_sel)) then 
            ICMPdataOut_V_data_V_1_data_out <= ICMPdataOut_V_data_V_1_payload_B;
        else 
            ICMPdataOut_V_data_V_1_data_out <= ICMPdataOut_V_data_V_1_payload_A;
        end if; 
    end process;

    ICMPdataOut_V_data_V_1_load_A <= (not(ICMPdataOut_V_data_V_1_sel_wr) and ICMPdataOut_V_data_V_1_state_cmp_full);
    ICMPdataOut_V_data_V_1_load_B <= (ICMPdataOut_V_data_V_1_state_cmp_full and ICMPdataOut_V_data_V_1_sel_wr);
    ICMPdataOut_V_data_V_1_sel <= ICMPdataOut_V_data_V_1_sel_rd;
    ICMPdataOut_V_data_V_1_state_cmp_full <= '0' when (ICMPdataOut_V_data_V_1_state = ap_const_lv2_1) else '1';

    ICMPdataOut_V_data_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op26_write_state2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op26_write_state2 = ap_const_boolean_1))) then 
            ICMPdataOut_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            ICMPdataOut_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    ICMPdataOut_V_data_V_1_vld_out <= ICMPdataOut_V_data_V_1_state(0);
    ICMPdataOut_V_keep_V_1_ack_in <= ICMPdataOut_V_keep_V_1_state(1);
    ICMPdataOut_V_keep_V_1_ack_out <= m_axis_icmp_TREADY;

    ICMPdataOut_V_keep_V_1_data_out_assign_proc : process(ICMPdataOut_V_keep_V_1_payload_A, ICMPdataOut_V_keep_V_1_payload_B, ICMPdataOut_V_keep_V_1_sel)
    begin
        if ((ap_const_logic_1 = ICMPdataOut_V_keep_V_1_sel)) then 
            ICMPdataOut_V_keep_V_1_data_out <= ICMPdataOut_V_keep_V_1_payload_B;
        else 
            ICMPdataOut_V_keep_V_1_data_out <= ICMPdataOut_V_keep_V_1_payload_A;
        end if; 
    end process;

    ICMPdataOut_V_keep_V_1_load_A <= (not(ICMPdataOut_V_keep_V_1_sel_wr) and ICMPdataOut_V_keep_V_1_state_cmp_full);
    ICMPdataOut_V_keep_V_1_load_B <= (ICMPdataOut_V_keep_V_1_state_cmp_full and ICMPdataOut_V_keep_V_1_sel_wr);
    ICMPdataOut_V_keep_V_1_sel <= ICMPdataOut_V_keep_V_1_sel_rd;
    ICMPdataOut_V_keep_V_1_state_cmp_full <= '0' when (ICMPdataOut_V_keep_V_1_state = ap_const_lv2_1) else '1';

    ICMPdataOut_V_keep_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op26_write_state2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op26_write_state2 = ap_const_boolean_1))) then 
            ICMPdataOut_V_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            ICMPdataOut_V_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    ICMPdataOut_V_keep_V_1_vld_out <= ICMPdataOut_V_keep_V_1_state(0);
    ICMPdataOut_V_last_V_1_ack_in <= ICMPdataOut_V_last_V_1_state(1);
    ICMPdataOut_V_last_V_1_ack_out <= m_axis_icmp_TREADY;

    ICMPdataOut_V_last_V_1_data_out_assign_proc : process(ICMPdataOut_V_last_V_1_payload_A, ICMPdataOut_V_last_V_1_payload_B, ICMPdataOut_V_last_V_1_sel)
    begin
        if ((ap_const_logic_1 = ICMPdataOut_V_last_V_1_sel)) then 
            ICMPdataOut_V_last_V_1_data_out <= ICMPdataOut_V_last_V_1_payload_B;
        else 
            ICMPdataOut_V_last_V_1_data_out <= ICMPdataOut_V_last_V_1_payload_A;
        end if; 
    end process;

    ICMPdataOut_V_last_V_1_load_A <= (not(ICMPdataOut_V_last_V_1_sel_wr) and ICMPdataOut_V_last_V_1_state_cmp_full);
    ICMPdataOut_V_last_V_1_load_B <= (ICMPdataOut_V_last_V_1_state_cmp_full and ICMPdataOut_V_last_V_1_sel_wr);
    ICMPdataOut_V_last_V_1_sel <= ICMPdataOut_V_last_V_1_sel_rd;
    ICMPdataOut_V_last_V_1_state_cmp_full <= '0' when (ICMPdataOut_V_last_V_1_state = ap_const_lv2_1) else '1';

    ICMPdataOut_V_last_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op26_write_state2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op26_write_state2 = ap_const_boolean_1))) then 
            ICMPdataOut_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            ICMPdataOut_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    ICMPdataOut_V_last_V_1_vld_out <= ICMPdataOut_V_last_V_1_state(0);
    TCPdataOut_V_data_V_1_ack_in <= TCPdataOut_V_data_V_1_state(1);
    TCPdataOut_V_data_V_1_ack_out <= m_axis_tcp_TREADY;

    TCPdataOut_V_data_V_1_data_out_assign_proc : process(TCPdataOut_V_data_V_1_payload_A, TCPdataOut_V_data_V_1_payload_B, TCPdataOut_V_data_V_1_sel)
    begin
        if ((ap_const_logic_1 = TCPdataOut_V_data_V_1_sel)) then 
            TCPdataOut_V_data_V_1_data_out <= TCPdataOut_V_data_V_1_payload_B;
        else 
            TCPdataOut_V_data_V_1_data_out <= TCPdataOut_V_data_V_1_payload_A;
        end if; 
    end process;

    TCPdataOut_V_data_V_1_load_A <= (not(TCPdataOut_V_data_V_1_sel_wr) and TCPdataOut_V_data_V_1_state_cmp_full);
    TCPdataOut_V_data_V_1_load_B <= (TCPdataOut_V_data_V_1_state_cmp_full and TCPdataOut_V_data_V_1_sel_wr);
    TCPdataOut_V_data_V_1_sel <= TCPdataOut_V_data_V_1_sel_rd;
    TCPdataOut_V_data_V_1_state_cmp_full <= '0' when (TCPdataOut_V_data_V_1_state = ap_const_lv2_1) else '1';

    TCPdataOut_V_data_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op24_write_state2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op24_write_state2 = ap_const_boolean_1))) then 
            TCPdataOut_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            TCPdataOut_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    TCPdataOut_V_data_V_1_vld_out <= TCPdataOut_V_data_V_1_state(0);
    TCPdataOut_V_keep_V_1_ack_in <= TCPdataOut_V_keep_V_1_state(1);
    TCPdataOut_V_keep_V_1_ack_out <= m_axis_tcp_TREADY;

    TCPdataOut_V_keep_V_1_data_out_assign_proc : process(TCPdataOut_V_keep_V_1_payload_A, TCPdataOut_V_keep_V_1_payload_B, TCPdataOut_V_keep_V_1_sel)
    begin
        if ((ap_const_logic_1 = TCPdataOut_V_keep_V_1_sel)) then 
            TCPdataOut_V_keep_V_1_data_out <= TCPdataOut_V_keep_V_1_payload_B;
        else 
            TCPdataOut_V_keep_V_1_data_out <= TCPdataOut_V_keep_V_1_payload_A;
        end if; 
    end process;

    TCPdataOut_V_keep_V_1_load_A <= (not(TCPdataOut_V_keep_V_1_sel_wr) and TCPdataOut_V_keep_V_1_state_cmp_full);
    TCPdataOut_V_keep_V_1_load_B <= (TCPdataOut_V_keep_V_1_state_cmp_full and TCPdataOut_V_keep_V_1_sel_wr);
    TCPdataOut_V_keep_V_1_sel <= TCPdataOut_V_keep_V_1_sel_rd;
    TCPdataOut_V_keep_V_1_state_cmp_full <= '0' when (TCPdataOut_V_keep_V_1_state = ap_const_lv2_1) else '1';

    TCPdataOut_V_keep_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op24_write_state2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op24_write_state2 = ap_const_boolean_1))) then 
            TCPdataOut_V_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            TCPdataOut_V_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    TCPdataOut_V_keep_V_1_vld_out <= TCPdataOut_V_keep_V_1_state(0);
    TCPdataOut_V_last_V_1_ack_in <= TCPdataOut_V_last_V_1_state(1);
    TCPdataOut_V_last_V_1_ack_out <= m_axis_tcp_TREADY;

    TCPdataOut_V_last_V_1_data_out_assign_proc : process(TCPdataOut_V_last_V_1_payload_A, TCPdataOut_V_last_V_1_payload_B, TCPdataOut_V_last_V_1_sel)
    begin
        if ((ap_const_logic_1 = TCPdataOut_V_last_V_1_sel)) then 
            TCPdataOut_V_last_V_1_data_out <= TCPdataOut_V_last_V_1_payload_B;
        else 
            TCPdataOut_V_last_V_1_data_out <= TCPdataOut_V_last_V_1_payload_A;
        end if; 
    end process;

    TCPdataOut_V_last_V_1_load_A <= (not(TCPdataOut_V_last_V_1_sel_wr) and TCPdataOut_V_last_V_1_state_cmp_full);
    TCPdataOut_V_last_V_1_load_B <= (TCPdataOut_V_last_V_1_state_cmp_full and TCPdataOut_V_last_V_1_sel_wr);
    TCPdataOut_V_last_V_1_sel <= TCPdataOut_V_last_V_1_sel_rd;
    TCPdataOut_V_last_V_1_state_cmp_full <= '0' when (TCPdataOut_V_last_V_1_state = ap_const_lv2_1) else '1';

    TCPdataOut_V_last_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op24_write_state2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op24_write_state2 = ap_const_boolean_1))) then 
            TCPdataOut_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            TCPdataOut_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    TCPdataOut_V_last_V_1_vld_out <= TCPdataOut_V_last_V_1_state(0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, ap_done_reg, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ipv4ProtocolFifo_V_V_empty_n, ap_predicate_op10_read_state1, ipv4ValidFifo_V_empty_n, ap_predicate_op12_read_state1, ipDataCutFifo_V_empty_n, ap_predicate_op17_read_state1, udpDataFifo_V_full_n, ap_predicate_op25_write_state2, m_axis_tcp_TREADY, m_axis_icmp_TREADY, ICMPdataOut_V_data_V_1_state, ICMPdataOut_V_keep_V_1_state, ICMPdataOut_V_last_V_1_state, TCPdataOut_V_data_V_1_state, TCPdataOut_V_keep_V_1_state, TCPdataOut_V_last_V_1_state)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((udpDataFifo_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_predicate_op25_write_state2 = ap_const_boolean_1)) or ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((ipDataCutFifo_V_empty_n = ap_const_logic_0) and (ap_predicate_op17_read_state1 = ap_const_boolean_1)) or ((ipv4ValidFifo_V_empty_n = ap_const_logic_0) and (ap_predicate_op12_read_state1 = ap_const_boolean_1)) or ((ipv4ProtocolFifo_V_V_empty_n = ap_const_logic_0) and (ap_predicate_op10_read_state1 = ap_const_boolean_1)))) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((ap_const_lv2_1 = TCPdataOut_V_last_V_1_state) or (ap_const_lv2_1 = TCPdataOut_V_keep_V_1_state) or (ap_const_lv2_1 = TCPdataOut_V_data_V_1_state) or (ap_const_lv2_1 = ICMPdataOut_V_last_V_1_state) or (ap_const_lv2_1 = ICMPdataOut_V_keep_V_1_state) or (ap_const_lv2_1 = ICMPdataOut_V_data_V_1_state) or ((m_axis_tcp_TREADY = ap_const_logic_0) and (ap_const_lv2_3 = TCPdataOut_V_last_V_1_state)) or ((m_axis_tcp_TREADY = ap_const_logic_0) and (ap_const_lv2_3 = TCPdataOut_V_keep_V_1_state)) or ((m_axis_tcp_TREADY = ap_const_logic_0) and (ap_const_lv2_3 = TCPdataOut_V_data_V_1_state)) or ((m_axis_icmp_TREADY = ap_const_logic_0) and (ap_const_lv2_3 = ICMPdataOut_V_last_V_1_state)) or ((m_axis_icmp_TREADY = ap_const_logic_0) and (ap_const_lv2_3 = ICMPdataOut_V_keep_V_1_state)) or ((m_axis_icmp_TREADY = ap_const_logic_0) and (ap_const_lv2_3 = ICMPdataOut_V_data_V_1_state)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_done_reg, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ipv4ProtocolFifo_V_V_empty_n, ap_predicate_op10_read_state1, ipv4ValidFifo_V_empty_n, ap_predicate_op12_read_state1, ipDataCutFifo_V_empty_n, ap_predicate_op17_read_state1, udpDataFifo_V_full_n, ap_predicate_op25_write_state2, m_axis_tcp_TREADY, m_axis_icmp_TREADY, ap_block_state2_io, ICMPdataOut_V_data_V_1_state, ICMPdataOut_V_keep_V_1_state, ICMPdataOut_V_last_V_1_state, TCPdataOut_V_data_V_1_state, TCPdataOut_V_keep_V_1_state, TCPdataOut_V_last_V_1_state, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((ipDataCutFifo_V_empty_n = ap_const_logic_0) and (ap_predicate_op17_read_state1 = ap_const_boolean_1)) or ((ipv4ValidFifo_V_empty_n = ap_const_logic_0) and (ap_predicate_op12_read_state1 = ap_const_boolean_1)) or ((ipv4ProtocolFifo_V_V_empty_n = ap_const_logic_0) and (ap_predicate_op10_read_state1 = ap_const_boolean_1)))) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state3_io) or (ap_const_lv2_1 = TCPdataOut_V_last_V_1_state) or (ap_const_lv2_1 = TCPdataOut_V_keep_V_1_state) or (ap_const_lv2_1 = TCPdataOut_V_data_V_1_state) or (ap_const_lv2_1 = ICMPdataOut_V_last_V_1_state) or (ap_const_lv2_1 = ICMPdataOut_V_keep_V_1_state) or (ap_const_lv2_1 = ICMPdataOut_V_data_V_1_state) or ((m_axis_tcp_TREADY = ap_const_logic_0) and (ap_const_lv2_3 = TCPdataOut_V_last_V_1_state)) or ((m_axis_tcp_TREADY = ap_const_logic_0) and (ap_const_lv2_3 = TCPdataOut_V_keep_V_1_state)) or ((m_axis_tcp_TREADY = ap_const_logic_0) and (ap_const_lv2_3 = TCPdataOut_V_data_V_1_state)) or ((m_axis_icmp_TREADY = ap_const_logic_0) and (ap_const_lv2_3 = ICMPdataOut_V_last_V_1_state)) or ((m_axis_icmp_TREADY = ap_const_logic_0) and (ap_const_lv2_3 = ICMPdataOut_V_keep_V_1_state)) or ((m_axis_icmp_TREADY = ap_const_logic_0) and (ap_const_lv2_3 = ICMPdataOut_V_data_V_1_state)))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state2_io) or ((udpDataFifo_V_full_n = ap_const_logic_0) and (ap_predicate_op25_write_state2 = ap_const_boolean_1)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_done_reg, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ipv4ProtocolFifo_V_V_empty_n, ap_predicate_op10_read_state1, ipv4ValidFifo_V_empty_n, ap_predicate_op12_read_state1, ipDataCutFifo_V_empty_n, ap_predicate_op17_read_state1, udpDataFifo_V_full_n, ap_predicate_op25_write_state2, m_axis_tcp_TREADY, m_axis_icmp_TREADY, ap_block_state2_io, ICMPdataOut_V_data_V_1_state, ICMPdataOut_V_keep_V_1_state, ICMPdataOut_V_last_V_1_state, TCPdataOut_V_data_V_1_state, TCPdataOut_V_keep_V_1_state, TCPdataOut_V_last_V_1_state, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((ipDataCutFifo_V_empty_n = ap_const_logic_0) and (ap_predicate_op17_read_state1 = ap_const_boolean_1)) or ((ipv4ValidFifo_V_empty_n = ap_const_logic_0) and (ap_predicate_op12_read_state1 = ap_const_boolean_1)) or ((ipv4ProtocolFifo_V_V_empty_n = ap_const_logic_0) and (ap_predicate_op10_read_state1 = ap_const_boolean_1)))) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state3_io) or (ap_const_lv2_1 = TCPdataOut_V_last_V_1_state) or (ap_const_lv2_1 = TCPdataOut_V_keep_V_1_state) or (ap_const_lv2_1 = TCPdataOut_V_data_V_1_state) or (ap_const_lv2_1 = ICMPdataOut_V_last_V_1_state) or (ap_const_lv2_1 = ICMPdataOut_V_keep_V_1_state) or (ap_const_lv2_1 = ICMPdataOut_V_data_V_1_state) or ((m_axis_tcp_TREADY = ap_const_logic_0) and (ap_const_lv2_3 = TCPdataOut_V_last_V_1_state)) or ((m_axis_tcp_TREADY = ap_const_logic_0) and (ap_const_lv2_3 = TCPdataOut_V_keep_V_1_state)) or ((m_axis_tcp_TREADY = ap_const_logic_0) and (ap_const_lv2_3 = TCPdataOut_V_data_V_1_state)) or ((m_axis_icmp_TREADY = ap_const_logic_0) and (ap_const_lv2_3 = ICMPdataOut_V_last_V_1_state)) or ((m_axis_icmp_TREADY = ap_const_logic_0) and (ap_const_lv2_3 = ICMPdataOut_V_keep_V_1_state)) or ((m_axis_icmp_TREADY = ap_const_logic_0) and (ap_const_lv2_3 = ICMPdataOut_V_data_V_1_state)))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state2_io) or ((udpDataFifo_V_full_n = ap_const_logic_0) and (ap_predicate_op25_write_state2 = ap_const_boolean_1)))));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start, ap_done_reg, ipv4ProtocolFifo_V_V_empty_n, ap_predicate_op10_read_state1, ipv4ValidFifo_V_empty_n, ap_predicate_op12_read_state1, ipDataCutFifo_V_empty_n, ap_predicate_op17_read_state1)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((ipDataCutFifo_V_empty_n = ap_const_logic_0) and (ap_predicate_op17_read_state1 = ap_const_boolean_1)) or ((ipv4ValidFifo_V_empty_n = ap_const_logic_0) and (ap_predicate_op12_read_state1 = ap_const_boolean_1)) or ((ipv4ProtocolFifo_V_V_empty_n = ap_const_logic_0) and (ap_predicate_op10_read_state1 = ap_const_boolean_1)));
    end process;


    ap_block_state2_io_assign_proc : process(TCPdataOut_V_data_V_1_ack_in, ap_predicate_op24_write_state2, ICMPdataOut_V_data_V_1_ack_in, ap_predicate_op26_write_state2)
    begin
                ap_block_state2_io <= (((ap_const_logic_0 = ICMPdataOut_V_data_V_1_ack_in) and (ap_predicate_op26_write_state2 = ap_const_boolean_1)) or ((ap_const_logic_0 = TCPdataOut_V_data_V_1_ack_in) and (ap_predicate_op24_write_state2 = ap_const_boolean_1)));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(udpDataFifo_V_full_n, ap_predicate_op25_write_state2)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((udpDataFifo_V_full_n = ap_const_logic_0) and (ap_predicate_op25_write_state2 = ap_const_boolean_1));
    end process;


    ap_block_state3_io_assign_proc : process(TCPdataOut_V_data_V_1_ack_in, ICMPdataOut_V_data_V_1_ack_in, ap_predicate_op38_write_state3, ap_predicate_op41_write_state3)
    begin
                ap_block_state3_io <= (((ap_const_logic_0 = ICMPdataOut_V_data_V_1_ack_in) and (ap_predicate_op41_write_state3 = ap_const_boolean_1)) or ((ap_const_logic_0 = TCPdataOut_V_data_V_1_ack_in) and (ap_predicate_op38_write_state3 = ap_const_boolean_1)));
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(m_axis_tcp_TREADY, m_axis_icmp_TREADY, ICMPdataOut_V_data_V_1_state, ICMPdataOut_V_keep_V_1_state, ICMPdataOut_V_last_V_1_state, TCPdataOut_V_data_V_1_state, TCPdataOut_V_keep_V_1_state, TCPdataOut_V_last_V_1_state)
    begin
                ap_block_state3_pp0_stage0_iter2 <= ((ap_const_lv2_1 = TCPdataOut_V_last_V_1_state) or (ap_const_lv2_1 = TCPdataOut_V_keep_V_1_state) or (ap_const_lv2_1 = TCPdataOut_V_data_V_1_state) or (ap_const_lv2_1 = ICMPdataOut_V_last_V_1_state) or (ap_const_lv2_1 = ICMPdataOut_V_keep_V_1_state) or (ap_const_lv2_1 = ICMPdataOut_V_data_V_1_state) or ((m_axis_tcp_TREADY = ap_const_logic_0) and (ap_const_lv2_3 = TCPdataOut_V_last_V_1_state)) or ((m_axis_tcp_TREADY = ap_const_logic_0) and (ap_const_lv2_3 = TCPdataOut_V_keep_V_1_state)) or ((m_axis_tcp_TREADY = ap_const_logic_0) and (ap_const_lv2_3 = TCPdataOut_V_data_V_1_state)) or ((m_axis_icmp_TREADY = ap_const_logic_0) and (ap_const_lv2_3 = ICMPdataOut_V_last_V_1_state)) or ((m_axis_icmp_TREADY = ap_const_logic_0) and (ap_const_lv2_3 = ICMPdataOut_V_keep_V_1_state)) or ((m_axis_icmp_TREADY = ap_const_logic_0) and (ap_const_lv2_3 = ICMPdataOut_V_data_V_1_state)));
    end process;


    ap_condition_216_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
                ap_condition_216 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_588_assign_proc : process(tmp_18_nbreadreq_fu_82_p3, tmp_20_nbreadreq_fu_90_p3, dip_state, tmp_22_read_fu_104_p2)
    begin
                ap_condition_588 <= ((tmp_22_read_fu_104_p2 = ap_const_lv1_1) and (tmp_20_nbreadreq_fu_90_p3 = ap_const_lv1_1) and (tmp_18_nbreadreq_fu_82_p3 = ap_const_lv1_1) and (dip_state = ap_const_lv1_0));
    end process;


    ap_condition_591_assign_proc : process(tmp_nbreadreq_fu_110_p3, dip_state, tmp_last_V_fu_187_p3)
    begin
                ap_condition_591 <= ((tmp_nbreadreq_fu_110_p3 = ap_const_lv1_1) and (tmp_last_V_fu_187_p3 = ap_const_lv1_1) and (dip_state = ap_const_lv1_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op10_read_state1_assign_proc : process(tmp_18_nbreadreq_fu_82_p3, tmp_20_nbreadreq_fu_90_p3, dip_state)
    begin
                ap_predicate_op10_read_state1 <= ((tmp_20_nbreadreq_fu_90_p3 = ap_const_lv1_1) and (tmp_18_nbreadreq_fu_82_p3 = ap_const_lv1_1) and (dip_state = ap_const_lv1_0));
    end process;


    ap_predicate_op12_read_state1_assign_proc : process(tmp_18_nbreadreq_fu_82_p3, tmp_20_nbreadreq_fu_90_p3, dip_state)
    begin
                ap_predicate_op12_read_state1 <= ((tmp_20_nbreadreq_fu_90_p3 = ap_const_lv1_1) and (tmp_18_nbreadreq_fu_82_p3 = ap_const_lv1_1) and (dip_state = ap_const_lv1_0));
    end process;


    ap_predicate_op17_read_state1_assign_proc : process(tmp_nbreadreq_fu_110_p3, dip_state)
    begin
                ap_predicate_op17_read_state1 <= ((tmp_nbreadreq_fu_110_p3 = ap_const_lv1_1) and (dip_state = ap_const_lv1_1));
    end process;


    ap_predicate_op24_write_state2_assign_proc : process(dip_state_load_reg_205, tmp_reg_221, dip_ipProtocol_V_loa_reg_248)
    begin
                ap_predicate_op24_write_state2 <= ((dip_ipProtocol_V_loa_reg_248 = ap_const_lv8_6) and (tmp_reg_221 = ap_const_lv1_1) and (dip_state_load_reg_205 = ap_const_lv1_1));
    end process;


    ap_predicate_op25_write_state2_assign_proc : process(dip_state_load_reg_205, tmp_reg_221, dip_ipProtocol_V_loa_reg_248)
    begin
                ap_predicate_op25_write_state2 <= ((dip_ipProtocol_V_loa_reg_248 = ap_const_lv8_11) and (tmp_reg_221 = ap_const_lv1_1) and (dip_state_load_reg_205 = ap_const_lv1_1));
    end process;


    ap_predicate_op26_write_state2_assign_proc : process(dip_state_load_reg_205, tmp_reg_221, dip_ipProtocol_V_loa_reg_248)
    begin
                ap_predicate_op26_write_state2 <= ((dip_ipProtocol_V_loa_reg_248 = ap_const_lv8_1) and (tmp_reg_221 = ap_const_lv1_1) and (dip_state_load_reg_205 = ap_const_lv1_1));
    end process;


    ap_predicate_op38_write_state3_assign_proc : process(dip_state_load_reg_205_pp0_iter1_reg, tmp_reg_221_pp0_iter1_reg, dip_ipProtocol_V_loa_reg_248_pp0_iter1_reg)
    begin
                ap_predicate_op38_write_state3 <= ((tmp_reg_221_pp0_iter1_reg = ap_const_lv1_1) and (dip_state_load_reg_205_pp0_iter1_reg = ap_const_lv1_1) and (dip_ipProtocol_V_loa_reg_248_pp0_iter1_reg = ap_const_lv8_6));
    end process;


    ap_predicate_op41_write_state3_assign_proc : process(dip_state_load_reg_205_pp0_iter1_reg, tmp_reg_221_pp0_iter1_reg, dip_ipProtocol_V_loa_reg_248_pp0_iter1_reg)
    begin
                ap_predicate_op41_write_state3 <= ((tmp_reg_221_pp0_iter1_reg = ap_const_lv1_1) and (dip_state_load_reg_205_pp0_iter1_reg = ap_const_lv1_1) and (dip_ipProtocol_V_loa_reg_248_pp0_iter1_reg = ap_const_lv8_1));
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to1 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ipDataCutFifo_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_pp0_stage0, ipDataCutFifo_V_empty_n, ap_predicate_op17_read_state1, ap_block_pp0_stage0)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op17_read_state1 = ap_const_boolean_1))) then 
            ipDataCutFifo_V_blk_n <= ipDataCutFifo_V_empty_n;
        else 
            ipDataCutFifo_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ipDataCutFifo_V_read_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_predicate_op17_read_state1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op17_read_state1 = ap_const_boolean_1))) then 
            ipDataCutFifo_V_read <= ap_const_logic_1;
        else 
            ipDataCutFifo_V_read <= ap_const_logic_0;
        end if; 
    end process;


    ipv4ProtocolFifo_V_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_pp0_stage0, ipv4ProtocolFifo_V_V_empty_n, ap_predicate_op10_read_state1, ap_block_pp0_stage0)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op10_read_state1 = ap_const_boolean_1))) then 
            ipv4ProtocolFifo_V_V_blk_n <= ipv4ProtocolFifo_V_V_empty_n;
        else 
            ipv4ProtocolFifo_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ipv4ProtocolFifo_V_V_read_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_predicate_op10_read_state1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op10_read_state1 = ap_const_boolean_1))) then 
            ipv4ProtocolFifo_V_V_read <= ap_const_logic_1;
        else 
            ipv4ProtocolFifo_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    ipv4ValidFifo_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_pp0_stage0, ipv4ValidFifo_V_empty_n, ap_predicate_op12_read_state1, ap_block_pp0_stage0)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op12_read_state1 = ap_const_boolean_1))) then 
            ipv4ValidFifo_V_blk_n <= ipv4ValidFifo_V_empty_n;
        else 
            ipv4ValidFifo_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ipv4ValidFifo_V_read_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_predicate_op12_read_state1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op12_read_state1 = ap_const_boolean_1))) then 
            ipv4ValidFifo_V_read <= ap_const_logic_1;
        else 
            ipv4ValidFifo_V_read <= ap_const_logic_0;
        end if; 
    end process;

    m_axis_icmp_TDATA <= ICMPdataOut_V_data_V_1_data_out;

    m_axis_icmp_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_predicate_op26_write_state2, ICMPdataOut_V_data_V_1_state, ap_predicate_op41_write_state3, ap_block_pp0_stage0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_predicate_op41_write_state3 = ap_const_boolean_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op26_write_state2 = ap_const_boolean_1)))) then 
            m_axis_icmp_TDATA_blk_n <= ICMPdataOut_V_data_V_1_state(1);
        else 
            m_axis_icmp_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    m_axis_icmp_TKEEP <= ICMPdataOut_V_keep_V_1_data_out;
    m_axis_icmp_TLAST <= ICMPdataOut_V_last_V_1_data_out;
    m_axis_icmp_TVALID <= ICMPdataOut_V_last_V_1_state(0);
    m_axis_tcp_TDATA <= TCPdataOut_V_data_V_1_data_out;

    m_axis_tcp_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_predicate_op24_write_state2, TCPdataOut_V_data_V_1_state, ap_predicate_op38_write_state3, ap_block_pp0_stage0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_predicate_op38_write_state3 = ap_const_boolean_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op24_write_state2 = ap_const_boolean_1)))) then 
            m_axis_tcp_TDATA_blk_n <= TCPdataOut_V_data_V_1_state(1);
        else 
            m_axis_tcp_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    m_axis_tcp_TKEEP <= TCPdataOut_V_keep_V_1_data_out;
    m_axis_tcp_TLAST <= TCPdataOut_V_last_V_1_data_out;
    m_axis_tcp_TVALID <= TCPdataOut_V_last_V_1_state(0);
    tmp_18_nbreadreq_fu_82_p3 <= (0=>(ipv4ProtocolFifo_V_V_empty_n), others=>'-');
    tmp_20_nbreadreq_fu_90_p3 <= (0=>(ipv4ValidFifo_V_empty_n), others=>'-');
    tmp_22_read_fu_104_p2 <= ipv4ValidFifo_V_dout;
    tmp_data_V_fu_173_p1 <= ipDataCutFifo_V_dout(64 - 1 downto 0);
    tmp_last_V_fu_187_p3 <= ipDataCutFifo_V_dout(72 downto 72);
    tmp_nbreadreq_fu_110_p3 <= (0=>(ipDataCutFifo_V_empty_n), others=>'-');

    udpDataFifo_V_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, udpDataFifo_V_full_n, ap_predicate_op25_write_state2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op25_write_state2 = ap_const_boolean_1))) then 
            udpDataFifo_V_blk_n <= udpDataFifo_V_full_n;
        else 
            udpDataFifo_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    udpDataFifo_V_din <= tmp9_reg_225;

    udpDataFifo_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op25_write_state2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op25_write_state2 = ap_const_boolean_1))) then 
            udpDataFifo_V_write <= ap_const_logic_1;
        else 
            udpDataFifo_V_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
