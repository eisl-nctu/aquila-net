// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module extract_ip_address (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        s_axis_ip_TVALID,
        dataStreamBuffer0_V_din,
        dataStreamBuffer0_V_full_n,
        dataStreamBuffer0_V_write,
        arpTableOut_V_V_TREADY,
        s_axis_ip_TDATA,
        s_axis_ip_TREADY,
        s_axis_ip_TKEEP,
        s_axis_ip_TLAST,
        arpTableOut_V_V_TDATA,
        arpTableOut_V_V_TVALID,
        regSubNetMask_V,
        regDefaultGateway_V
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input   s_axis_ip_TVALID;
output  [72:0] dataStreamBuffer0_V_din;
input   dataStreamBuffer0_V_full_n;
output   dataStreamBuffer0_V_write;
input   arpTableOut_V_V_TREADY;
input  [63:0] s_axis_ip_TDATA;
output   s_axis_ip_TREADY;
input  [7:0] s_axis_ip_TKEEP;
input  [0:0] s_axis_ip_TLAST;
output  [31:0] arpTableOut_V_V_TDATA;
output   arpTableOut_V_V_TVALID;
input  [31:0] regSubNetMask_V;
input  [31:0] regDefaultGateway_V;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg dataStreamBuffer0_V_write;
reg s_axis_ip_TREADY;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire   [0:0] tmp_nbreadreq_fu_104_p5;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] tmp_reg_497;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    arpTableOut_V_V_1_ack_in;
reg   [0:0] tmp_reg_497_pp0_iter2_reg;
reg   [0:0] or_ln53_reg_551;
reg   [0:0] or_ln53_reg_551_pp0_iter2_reg;
reg   [0:0] icmp_ln879_reg_564;
reg    ap_predicate_op76_write_state4;
reg    ap_predicate_op77_write_state4;
reg    ap_block_state4_io;
wire    arpTableOut_V_V_1_ack_out;
reg   [1:0] arpTableOut_V_V_1_state;
reg    ap_block_state5_pp0_stage0_iter4;
reg   [0:0] tmp_reg_497_pp0_iter3_reg;
reg   [0:0] or_ln53_reg_551_pp0_iter3_reg;
reg   [0:0] icmp_ln879_reg_564_pp0_iter3_reg;
reg    ap_predicate_op82_write_state5;
reg    ap_predicate_op84_write_state5;
reg    ap_block_state5_io;
reg    ap_block_pp0_stage0_11001;
reg   [31:0] arpTableOut_V_V_1_data_in;
reg   [31:0] arpTableOut_V_V_1_data_out;
reg    arpTableOut_V_V_1_vld_in;
wire    arpTableOut_V_V_1_vld_out;
reg   [31:0] arpTableOut_V_V_1_payload_A;
reg   [31:0] arpTableOut_V_V_1_payload_B;
reg    arpTableOut_V_V_1_sel_rd;
reg    arpTableOut_V_V_1_sel_wr;
wire    arpTableOut_V_V_1_sel;
wire    arpTableOut_V_V_1_load_A;
wire    arpTableOut_V_V_1_load_B;
wire    arpTableOut_V_V_1_state_cmp_full;
reg   [0:0] header_ready;
reg   [15:0] header_idx_1;
reg   [159:0] header_header_V_1;
reg   [0:0] metaWritten;
reg    s_axis_ip_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    arpTableOut_V_V_TDATA_blk_n;
reg    dataStreamBuffer0_V_blk_n;
reg   [0:0] tmp_reg_497_pp0_iter1_reg;
reg   [63:0] tmp_data_V_reg_501;
reg   [7:0] tmp_keep_V_reg_507;
reg   [0:0] tmp_last_V_reg_512;
wire   [0:0] header_ready_load_load_fu_182_p1;
reg   [0:0] header_ready_load_reg_518;
wire   [1:0] trunc_ln58_fu_191_p1;
reg   [1:0] trunc_ln58_reg_522;
wire   [0:0] icmp_ln58_1_fu_233_p2;
reg   [0:0] icmp_ln58_1_reg_527;
wire   [7:0] trunc_ln58_1_fu_239_p1;
reg   [7:0] trunc_ln58_1_reg_535;
wire   [0:0] or_ln73_fu_257_p2;
reg   [0:0] or_ln73_reg_541;
wire   [0:0] xor_ln67_fu_263_p2;
reg   [0:0] xor_ln67_reg_546;
wire   [0:0] or_ln53_fu_440_p2;
wire   [0:0] or_ln67_fu_446_p2;
wire   [31:0] dstIpAddress_V_fu_460_p4;
reg   [31:0] dstIpAddress_V_reg_559;
wire   [0:0] icmp_ln879_fu_480_p2;
reg    ap_block_pp0_stage0_subdone;
reg   [15:0] ap_phi_mux_phi_ln73_phi_fu_143_p4;
wire   [15:0] ap_phi_reg_pp0_iter0_phi_ln73_reg_140;
wire   [15:0] add_ln67_fu_250_p2;
reg   [0:0] ap_phi_mux_write_flag_1_i_i_phi_fu_152_p4;
wire   [0:0] ap_phi_reg_pp0_iter0_write_flag_1_i_i_reg_149;
wire   [0:0] xor_ln58_fu_243_p2;
reg   [0:0] ap_phi_mux_metaWritten_flag_0_i_phi_fu_162_p4;
wire   [0:0] ap_phi_reg_pp0_iter1_metaWritten_flag_0_i_reg_159;
wire   [0:0] and_ln67_fu_269_p2;
wire   [15:0] select_ln67_fu_275_p3;
wire   [159:0] or_ln58_fu_411_p2;
reg    ap_block_pp0_stage0_01001;
wire   [21:0] Lo_assign_fu_195_p3;
wire   [22:0] zext_ln58_fu_203_p1;
wire   [22:0] add_ln58_fu_207_p2;
wire   [0:0] icmp_ln58_fu_213_p2;
wire   [21:0] or_ln60_fu_219_p2;
wire   [21:0] select_ln58_fu_225_p3;
wire   [7:0] tmp_27_fu_302_p3;
wire   [7:0] sub_ln58_fu_309_p2;
wire   [7:0] select_ln58_1_fu_315_p3;
wire   [7:0] select_ln58_3_fu_327_p3;
wire   [7:0] select_ln58_2_fu_321_p3;
wire   [7:0] sub_ln58_1_fu_334_p2;
wire   [159:0] tmp_V_2_fu_299_p1;
wire   [159:0] zext_ln58_1_fu_340_p1;
wire   [159:0] shl_ln58_fu_352_p2;
reg   [159:0] tmp_28_fu_358_p4;
wire   [159:0] zext_ln58_2_fu_344_p1;
wire   [159:0] zext_ln58_3_fu_348_p1;
wire   [159:0] shl_ln58_1_fu_375_p2;
wire   [159:0] lshr_ln58_fu_381_p2;
wire   [159:0] and_ln58_fu_387_p2;
wire   [159:0] xor_ln58_1_fu_393_p2;
wire   [159:0] select_ln58_4_fu_368_p3;
wire   [159:0] and_ln58_1_fu_399_p2;
wire   [159:0] and_ln58_2_fu_405_p2;
wire   [0:0] xor_ln53_fu_435_p2;
wire   [31:0] xor_ln879_fu_470_p2;
wire   [31:0] and_ln879_fu_475_p2;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to3;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_221;
reg    ap_condition_206;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 arpTableOut_V_V_1_state = 2'd0;
#0 arpTableOut_V_V_1_sel_rd = 1'b0;
#0 arpTableOut_V_V_1_sel_wr = 1'b0;
#0 header_ready = 1'd0;
#0 header_idx_1 = 16'd0;
#0 header_header_V_1 = 160'd1180591620717411303493;
#0 metaWritten = 1'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        arpTableOut_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((arpTableOut_V_V_1_ack_out == 1'b1) & (arpTableOut_V_V_1_vld_out == 1'b1))) begin
            arpTableOut_V_V_1_sel_rd <= ~arpTableOut_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        arpTableOut_V_V_1_sel_wr <= 1'b0;
    end else begin
        if (((arpTableOut_V_V_1_ack_in == 1'b1) & (arpTableOut_V_V_1_vld_in == 1'b1))) begin
            arpTableOut_V_V_1_sel_wr <= ~arpTableOut_V_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        arpTableOut_V_V_1_state <= 2'd0;
    end else begin
        if ((((arpTableOut_V_V_1_state == 2'd3) & (arpTableOut_V_V_1_vld_in == 1'b0) & (arpTableOut_V_V_1_ack_out == 1'b1)) | ((arpTableOut_V_V_1_state == 2'd2) & (arpTableOut_V_V_1_vld_in == 1'b0)))) begin
            arpTableOut_V_V_1_state <= 2'd2;
        end else if ((((arpTableOut_V_V_1_state == 2'd1) & (arpTableOut_V_V_TREADY == 1'b0)) | ((arpTableOut_V_V_1_state == 2'd3) & (arpTableOut_V_V_TREADY == 1'b0) & (arpTableOut_V_V_1_vld_in == 1'b1)))) begin
            arpTableOut_V_V_1_state <= 2'd1;
        end else if ((((arpTableOut_V_V_1_state == 2'd1) & (arpTableOut_V_V_1_ack_out == 1'b1)) | (~((arpTableOut_V_V_1_vld_in == 1'b0) & (arpTableOut_V_V_1_ack_out == 1'b1)) & ~((arpTableOut_V_V_TREADY == 1'b0) & (arpTableOut_V_V_1_vld_in == 1'b1)) & (arpTableOut_V_V_1_state == 2'd3)) | ((arpTableOut_V_V_1_state == 2'd2) & (arpTableOut_V_V_1_vld_in == 1'b1)))) begin
            arpTableOut_V_V_1_state <= 2'd3;
        end else begin
            arpTableOut_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((arpTableOut_V_V_1_load_A == 1'b1)) begin
        arpTableOut_V_V_1_payload_A <= arpTableOut_V_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((arpTableOut_V_V_1_load_B == 1'b1)) begin
        arpTableOut_V_V_1_payload_B <= arpTableOut_V_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln53_reg_551 == 1'd0) & (tmp_reg_497_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dstIpAddress_V_reg_559 <= {{header_header_V_1[159:128]}};
        icmp_ln879_reg_564 <= icmp_ln879_fu_480_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((header_ready_load_reg_518 == 1'd0) & (tmp_reg_497 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        header_header_V_1 <= or_ln58_fu_411_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_nbreadreq_fu_104_p5 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        header_idx_1 <= select_ln67_fu_275_p3;
        header_ready <= and_ln67_fu_269_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_nbreadreq_fu_104_p5 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        header_ready_load_reg_518 <= header_ready;
        or_ln73_reg_541 <= or_ln73_fu_257_p2;
        tmp_data_V_reg_501 <= s_axis_ip_TDATA;
        tmp_keep_V_reg_507 <= s_axis_ip_TKEEP;
        tmp_last_V_reg_512 <= s_axis_ip_TLAST;
        xor_ln67_reg_546 <= xor_ln67_fu_263_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((header_ready_load_load_fu_182_p1 == 1'd0) & (tmp_nbreadreq_fu_104_p5 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln58_1_reg_527 <= icmp_ln58_1_fu_233_p2;
        trunc_ln58_1_reg_535[7 : 5] <= trunc_ln58_1_fu_239_p1[7 : 5];
        trunc_ln58_reg_522 <= trunc_ln58_fu_191_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln879_reg_564_pp0_iter3_reg <= icmp_ln879_reg_564;
        or_ln53_reg_551_pp0_iter2_reg <= or_ln53_reg_551;
        or_ln53_reg_551_pp0_iter3_reg <= or_ln53_reg_551_pp0_iter2_reg;
        tmp_reg_497_pp0_iter2_reg <= tmp_reg_497_pp0_iter1_reg;
        tmp_reg_497_pp0_iter3_reg <= tmp_reg_497_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_reg_497 == 1'd1) & (or_ln67_fu_446_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        metaWritten <= xor_ln67_reg_546;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_reg_497 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        or_ln53_reg_551 <= or_ln53_fu_440_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_reg_497 <= tmp_nbreadreq_fu_104_p5;
        tmp_reg_497_pp0_iter1_reg <= tmp_reg_497;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to3 = 1'b1;
    end else begin
        ap_idle_pp0_0to3 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_221)) begin
        if ((or_ln53_fu_440_p2 == 1'd1)) begin
            ap_phi_mux_metaWritten_flag_0_i_phi_fu_162_p4 = 1'd0;
        end else if ((or_ln53_fu_440_p2 == 1'd0)) begin
            ap_phi_mux_metaWritten_flag_0_i_phi_fu_162_p4 = 1'd1;
        end else begin
            ap_phi_mux_metaWritten_flag_0_i_phi_fu_162_p4 = ap_phi_reg_pp0_iter1_metaWritten_flag_0_i_reg_159;
        end
    end else begin
        ap_phi_mux_metaWritten_flag_0_i_phi_fu_162_p4 = ap_phi_reg_pp0_iter1_metaWritten_flag_0_i_reg_159;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_206)) begin
        if ((header_ready_load_load_fu_182_p1 == 1'd0)) begin
            ap_phi_mux_phi_ln73_phi_fu_143_p4 = add_ln67_fu_250_p2;
        end else if ((header_ready_load_load_fu_182_p1 == 1'd1)) begin
            ap_phi_mux_phi_ln73_phi_fu_143_p4 = header_idx_1;
        end else begin
            ap_phi_mux_phi_ln73_phi_fu_143_p4 = ap_phi_reg_pp0_iter0_phi_ln73_reg_140;
        end
    end else begin
        ap_phi_mux_phi_ln73_phi_fu_143_p4 = ap_phi_reg_pp0_iter0_phi_ln73_reg_140;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_206)) begin
        if ((header_ready_load_load_fu_182_p1 == 1'd0)) begin
            ap_phi_mux_write_flag_1_i_i_phi_fu_152_p4 = xor_ln58_fu_243_p2;
        end else if ((header_ready_load_load_fu_182_p1 == 1'd1)) begin
            ap_phi_mux_write_flag_1_i_i_phi_fu_152_p4 = 1'd0;
        end else begin
            ap_phi_mux_write_flag_1_i_i_phi_fu_152_p4 = ap_phi_reg_pp0_iter0_write_flag_1_i_i_reg_149;
        end
    end else begin
        ap_phi_mux_write_flag_1_i_i_phi_fu_152_p4 = ap_phi_reg_pp0_iter0_write_flag_1_i_i_reg_149;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to3 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        if ((ap_predicate_op77_write_state4 == 1'b1)) begin
            arpTableOut_V_V_1_data_in = dstIpAddress_V_reg_559;
        end else if ((ap_predicate_op76_write_state4 == 1'b1)) begin
            arpTableOut_V_V_1_data_in = regDefaultGateway_V;
        end else begin
            arpTableOut_V_V_1_data_in = 'bx;
        end
    end else begin
        arpTableOut_V_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((arpTableOut_V_V_1_sel == 1'b1)) begin
        arpTableOut_V_V_1_data_out = arpTableOut_V_V_1_payload_B;
    end else begin
        arpTableOut_V_V_1_data_out = arpTableOut_V_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_predicate_op77_write_state4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_predicate_op76_write_state4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        arpTableOut_V_V_1_vld_in = 1'b1;
    end else begin
        arpTableOut_V_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (ap_predicate_op77_write_state4 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (ap_predicate_op76_write_state4 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (ap_predicate_op84_write_state5 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (ap_predicate_op82_write_state5 == 1'b1)))) begin
        arpTableOut_V_V_TDATA_blk_n = arpTableOut_V_V_1_state[1'd1];
    end else begin
        arpTableOut_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_reg_497 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dataStreamBuffer0_V_blk_n = dataStreamBuffer0_V_full_n;
    end else begin
        dataStreamBuffer0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_reg_497 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dataStreamBuffer0_V_write = 1'b1;
    end else begin
        dataStreamBuffer0_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (tmp_nbreadreq_fu_104_p5 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_axis_ip_TDATA_blk_n = s_axis_ip_TVALID;
    end else begin
        s_axis_ip_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_nbreadreq_fu_104_p5 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        s_axis_ip_TREADY = 1'b1;
    end else begin
        s_axis_ip_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Lo_assign_fu_195_p3 = {{header_idx_1}, {6'd0}};

assign add_ln58_fu_207_p2 = (zext_ln58_fu_203_p1 + 23'd64);

assign add_ln67_fu_250_p2 = (header_idx_1 + 16'd1);

assign and_ln58_1_fu_399_p2 = (xor_ln58_1_fu_393_p2 & header_header_V_1);

assign and_ln58_2_fu_405_p2 = (select_ln58_4_fu_368_p3 & and_ln58_fu_387_p2);

assign and_ln58_fu_387_p2 = (shl_ln58_1_fu_375_p2 & lshr_ln58_fu_381_p2);

assign and_ln67_fu_269_p2 = (xor_ln67_fu_263_p2 & or_ln73_fu_257_p2);

assign and_ln879_fu_475_p2 = (xor_ln879_fu_470_p2 & regSubNetMask_V);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((tmp_reg_497 == 1'd1) & (dataStreamBuffer0_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((tmp_nbreadreq_fu_104_p5 == 1'd1) & (s_axis_ip_TVALID == 1'b0)))) | ((ap_enable_reg_pp0_iter4 == 1'b1) & ((arpTableOut_V_V_1_state == 2'd1) | ((arpTableOut_V_V_1_state == 2'd3) & (arpTableOut_V_V_TREADY == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_io)) | ((tmp_reg_497 == 1'd1) & (dataStreamBuffer0_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((tmp_nbreadreq_fu_104_p5 == 1'd1) & (s_axis_ip_TVALID == 1'b0)))) | ((ap_enable_reg_pp0_iter4 == 1'b1) & ((arpTableOut_V_V_1_state == 2'd1) | (1'b1 == ap_block_state5_io) | ((arpTableOut_V_V_1_state == 2'd3) & (arpTableOut_V_V_TREADY == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_io)) | ((tmp_reg_497 == 1'd1) & (dataStreamBuffer0_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((tmp_nbreadreq_fu_104_p5 == 1'd1) & (s_axis_ip_TVALID == 1'b0)))) | ((ap_enable_reg_pp0_iter4 == 1'b1) & ((arpTableOut_V_V_1_state == 2'd1) | (1'b1 == ap_block_state5_io) | ((arpTableOut_V_V_1_state == 2'd3) & (arpTableOut_V_V_TREADY == 1'b0)))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((tmp_nbreadreq_fu_104_p5 == 1'd1) & (s_axis_ip_TVALID == 1'b0)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((tmp_reg_497 == 1'd1) & (dataStreamBuffer0_V_full_n == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = (((arpTableOut_V_V_1_ack_in == 1'b0) & (ap_predicate_op77_write_state4 == 1'b1)) | ((arpTableOut_V_V_1_ack_in == 1'b0) & (ap_predicate_op76_write_state4 == 1'b1)));
end

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_io = (((arpTableOut_V_V_1_ack_in == 1'b0) & (ap_predicate_op84_write_state5 == 1'b1)) | ((arpTableOut_V_V_1_ack_in == 1'b0) & (ap_predicate_op82_write_state5 == 1'b1)));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter4 = ((arpTableOut_V_V_1_state == 2'd1) | ((arpTableOut_V_V_1_state == 2'd3) & (arpTableOut_V_V_TREADY == 1'b0)));
end

always @ (*) begin
    ap_condition_206 = ((tmp_nbreadreq_fu_104_p5 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_221 = ((tmp_reg_497 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_phi_reg_pp0_iter0_phi_ln73_reg_140 = 'bx;

assign ap_phi_reg_pp0_iter0_write_flag_1_i_i_reg_149 = 'bx;

assign ap_phi_reg_pp0_iter1_metaWritten_flag_0_i_reg_159 = 'bx;

always @ (*) begin
    ap_predicate_op76_write_state4 = ((icmp_ln879_reg_564 == 1'd0) & (or_ln53_reg_551_pp0_iter2_reg == 1'd0) & (tmp_reg_497_pp0_iter2_reg == 1'd1));
end

always @ (*) begin
    ap_predicate_op77_write_state4 = ((or_ln53_reg_551_pp0_iter2_reg == 1'd0) & (icmp_ln879_reg_564 == 1'd1) & (tmp_reg_497_pp0_iter2_reg == 1'd1));
end

always @ (*) begin
    ap_predicate_op82_write_state5 = ((icmp_ln879_reg_564_pp0_iter3_reg == 1'd0) & (or_ln53_reg_551_pp0_iter3_reg == 1'd0) & (tmp_reg_497_pp0_iter3_reg == 1'd1));
end

always @ (*) begin
    ap_predicate_op84_write_state5 = ((or_ln53_reg_551_pp0_iter3_reg == 1'd0) & (icmp_ln879_reg_564_pp0_iter3_reg == 1'd1) & (tmp_reg_497_pp0_iter3_reg == 1'd1));
end

assign arpTableOut_V_V_1_ack_in = arpTableOut_V_V_1_state[1'd1];

assign arpTableOut_V_V_1_ack_out = arpTableOut_V_V_TREADY;

assign arpTableOut_V_V_1_load_A = (~arpTableOut_V_V_1_sel_wr & arpTableOut_V_V_1_state_cmp_full);

assign arpTableOut_V_V_1_load_B = (arpTableOut_V_V_1_state_cmp_full & arpTableOut_V_V_1_sel_wr);

assign arpTableOut_V_V_1_sel = arpTableOut_V_V_1_sel_rd;

assign arpTableOut_V_V_1_state_cmp_full = ((arpTableOut_V_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign arpTableOut_V_V_1_vld_out = arpTableOut_V_V_1_state[1'd0];

assign arpTableOut_V_V_TDATA = arpTableOut_V_V_1_data_out;

assign arpTableOut_V_V_TVALID = arpTableOut_V_V_1_state[1'd0];

assign dataStreamBuffer0_V_din = {{{tmp_last_V_reg_512}, {tmp_keep_V_reg_507}}, {tmp_data_V_reg_501}};

assign dstIpAddress_V_fu_460_p4 = {{header_header_V_1[159:128]}};

assign header_ready_load_load_fu_182_p1 = header_ready;

assign icmp_ln58_1_fu_233_p2 = ((Lo_assign_fu_195_p3 > select_ln58_fu_225_p3) ? 1'b1 : 1'b0);

assign icmp_ln58_fu_213_p2 = ((add_ln58_fu_207_p2 < 23'd160) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_480_p2 = ((and_ln879_fu_475_p2 == 32'd0) ? 1'b1 : 1'b0);

assign lshr_ln58_fu_381_p2 = 160'd1461501637330902918203684832716283019655932542975 >> zext_ln58_3_fu_348_p1;

assign or_ln53_fu_440_p2 = (xor_ln53_fu_435_p2 | metaWritten);

assign or_ln58_fu_411_p2 = (and_ln58_2_fu_405_p2 | and_ln58_1_fu_399_p2);

assign or_ln60_fu_219_p2 = (22'd63 | Lo_assign_fu_195_p3);

assign or_ln67_fu_446_p2 = (tmp_last_V_reg_512 | ap_phi_mux_metaWritten_flag_0_i_phi_fu_162_p4);

assign or_ln73_fu_257_p2 = (header_ready | ap_phi_mux_write_flag_1_i_i_phi_fu_152_p4);

assign select_ln58_1_fu_315_p3 = ((icmp_ln58_1_reg_527[0:0] === 1'b1) ? tmp_27_fu_302_p3 : trunc_ln58_1_reg_535);

assign select_ln58_2_fu_321_p3 = ((icmp_ln58_1_reg_527[0:0] === 1'b1) ? trunc_ln58_1_reg_535 : tmp_27_fu_302_p3);

assign select_ln58_3_fu_327_p3 = ((icmp_ln58_1_reg_527[0:0] === 1'b1) ? sub_ln58_fu_309_p2 : tmp_27_fu_302_p3);

assign select_ln58_4_fu_368_p3 = ((icmp_ln58_1_reg_527[0:0] === 1'b1) ? tmp_28_fu_358_p4 : shl_ln58_fu_352_p2);

assign select_ln58_fu_225_p3 = ((icmp_ln58_fu_213_p2[0:0] === 1'b1) ? or_ln60_fu_219_p2 : 22'd159);

assign select_ln67_fu_275_p3 = ((s_axis_ip_TLAST[0:0] === 1'b1) ? 16'd0 : ap_phi_mux_phi_ln73_phi_fu_143_p4);

assign shl_ln58_1_fu_375_p2 = 160'd1461501637330902918203684832716283019655932542975 << zext_ln58_2_fu_344_p1;

assign shl_ln58_fu_352_p2 = tmp_V_2_fu_299_p1 << zext_ln58_1_fu_340_p1;

assign sub_ln58_1_fu_334_p2 = ($signed(8'd159) - $signed(select_ln58_1_fu_315_p3));

assign sub_ln58_fu_309_p2 = ($signed(8'd159) - $signed(tmp_27_fu_302_p3));

assign tmp_27_fu_302_p3 = {{trunc_ln58_reg_522}, {6'd0}};

integer ap_tvar_int_0;

always @ (shl_ln58_fu_352_p2) begin
    for (ap_tvar_int_0 = 160 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 159 - 0) begin
            tmp_28_fu_358_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_28_fu_358_p4[ap_tvar_int_0] = shl_ln58_fu_352_p2[159 - ap_tvar_int_0];
        end
    end
end

assign tmp_V_2_fu_299_p1 = tmp_data_V_reg_501;

assign tmp_nbreadreq_fu_104_p5 = s_axis_ip_TVALID;

assign trunc_ln58_1_fu_239_p1 = select_ln58_fu_225_p3[7:0];

assign trunc_ln58_fu_191_p1 = header_idx_1[1:0];

assign xor_ln53_fu_435_p2 = (or_ln73_reg_541 ^ 1'd1);

assign xor_ln58_1_fu_393_p2 = (160'd1461501637330902918203684832716283019655932542975 ^ and_ln58_fu_387_p2);

assign xor_ln58_fu_243_p2 = (icmp_ln58_fu_213_p2 ^ 1'd1);

assign xor_ln67_fu_263_p2 = (s_axis_ip_TLAST ^ 1'd1);

assign xor_ln879_fu_470_p2 = (regDefaultGateway_V ^ dstIpAddress_V_fu_460_p4);

assign zext_ln58_1_fu_340_p1 = select_ln58_3_fu_327_p3;

assign zext_ln58_2_fu_344_p1 = select_ln58_2_fu_321_p3;

assign zext_ln58_3_fu_348_p1 = sub_ln58_1_fu_334_p2;

assign zext_ln58_fu_203_p1 = Lo_assign_fu_195_p3;

always @ (posedge ap_clk) begin
    trunc_ln58_1_reg_535[4:0] <= 5'b11111;
end

endmodule //extract_ip_address
