// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module generate_arp_pkg_64_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        arpRequestMetaFifo_V_dout,
        arpRequestMetaFifo_V_empty_n,
        arpRequestMetaFifo_V_read,
        arpReplyMetaFifo_V_dout,
        arpReplyMetaFifo_V_empty_n,
        arpReplyMetaFifo_V_read,
        m_axis_TREADY,
        m_axis_TDATA,
        m_axis_TVALID,
        m_axis_TKEEP,
        m_axis_TLAST,
        myMacAddress_V,
        myIpAddress_V
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] arpRequestMetaFifo_V_dout;
input   arpRequestMetaFifo_V_empty_n;
output   arpRequestMetaFifo_V_read;
input  [127:0] arpReplyMetaFifo_V_dout;
input   arpReplyMetaFifo_V_empty_n;
output   arpReplyMetaFifo_V_read;
input   m_axis_TREADY;
output  [63:0] m_axis_TDATA;
output   m_axis_TVALID;
output  [7:0] m_axis_TKEEP;
output  [0:0] m_axis_TLAST;
input  [47:0] myMacAddress_V;
input  [31:0] myIpAddress_V;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg arpRequestMetaFifo_V_read;
reg arpReplyMetaFifo_V_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire   [1:0] gap_state_load_load_fu_353_p1;
wire   [0:0] tmp_nbreadreq_fu_294_p3;
wire   [0:0] tmp_3_nbreadreq_fu_302_p3;
reg    ap_predicate_op111_read_state1;
reg    ap_predicate_op119_read_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    dataOut_V_data_V_1_ack_in;
reg   [1:0] gap_state_load_reg_1357;
reg    ap_block_state2_io;
wire    dataOut_V_data_V_1_ack_out;
reg   [1:0] dataOut_V_data_V_1_state;
wire    dataOut_V_keep_V_1_ack_out;
reg   [1:0] dataOut_V_keep_V_1_state;
wire    dataOut_V_last_V_1_ack_out;
reg   [1:0] dataOut_V_last_V_1_state;
reg    ap_block_state3_pp0_stage0_iter2;
reg   [1:0] gap_state_load_reg_1357_pp0_iter1_reg;
reg    ap_block_state3_io;
reg    ap_block_pp0_stage0_11001;
reg   [63:0] dataOut_V_data_V_1_data_in;
reg   [63:0] dataOut_V_data_V_1_data_out;
reg    dataOut_V_data_V_1_vld_in;
wire    dataOut_V_data_V_1_vld_out;
reg   [63:0] dataOut_V_data_V_1_payload_A;
reg   [63:0] dataOut_V_data_V_1_payload_B;
reg    dataOut_V_data_V_1_sel_rd;
reg    dataOut_V_data_V_1_sel_wr;
wire    dataOut_V_data_V_1_sel;
wire    dataOut_V_data_V_1_load_A;
wire    dataOut_V_data_V_1_load_B;
wire    dataOut_V_data_V_1_state_cmp_full;
reg   [7:0] dataOut_V_keep_V_1_data_in;
reg   [7:0] dataOut_V_keep_V_1_data_out;
reg    dataOut_V_keep_V_1_vld_in;
wire    dataOut_V_keep_V_1_vld_out;
wire    dataOut_V_keep_V_1_ack_in;
reg   [7:0] dataOut_V_keep_V_1_payload_A;
reg   [7:0] dataOut_V_keep_V_1_payload_B;
reg    dataOut_V_keep_V_1_sel_rd;
reg    dataOut_V_keep_V_1_sel_wr;
wire    dataOut_V_keep_V_1_sel;
wire    dataOut_V_keep_V_1_load_A;
wire    dataOut_V_keep_V_1_load_B;
wire    dataOut_V_keep_V_1_state_cmp_full;
reg   [0:0] dataOut_V_last_V_1_data_in;
reg   [0:0] dataOut_V_last_V_1_data_out;
reg    dataOut_V_last_V_1_vld_in;
wire    dataOut_V_last_V_1_vld_out;
wire    dataOut_V_last_V_1_ack_in;
reg   [0:0] dataOut_V_last_V_1_payload_A;
reg   [0:0] dataOut_V_last_V_1_payload_B;
reg    dataOut_V_last_V_1_sel_rd;
reg    dataOut_V_last_V_1_sel_wr;
wire    dataOut_V_last_V_1_sel;
wire    dataOut_V_last_V_1_load_A;
wire    dataOut_V_last_V_1_load_B;
wire    dataOut_V_last_V_1_state_cmp_full;
reg   [1:0] gap_state;
reg   [15:0] header_idx_1;
reg   [335:0] header_header_V_1;
reg   [7:0] remainingLength_V;
reg    m_axis_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    arpReplyMetaFifo_V_blk_n;
reg    arpRequestMetaFifo_V_blk_n;
wire   [0:0] icmp_ln76_1_fu_388_p2;
reg   [0:0] icmp_ln76_1_reg_1361;
wire   [8:0] sub_ln647_10_fu_470_p2;
reg   [8:0] sub_ln647_10_reg_1366;
wire   [335:0] lshr_ln647_4_fu_480_p2;
reg   [335:0] lshr_ln647_4_reg_1371;
wire   [8:0] sub_ln647_13_fu_558_p2;
reg   [8:0] sub_ln647_13_reg_1376;
wire   [335:0] lshr_ln647_6_fu_568_p2;
reg   [335:0] lshr_ln647_6_reg_1381;
wire   [0:0] and_ln82_1_fu_580_p2;
reg   [0:0] and_ln82_1_reg_1386;
wire   [0:0] icmp_ln76_fu_640_p2;
reg   [0:0] icmp_ln76_reg_1391;
wire   [8:0] sub_ln647_3_fu_722_p2;
reg   [8:0] sub_ln647_3_reg_1396;
wire   [335:0] lshr_ln647_fu_732_p2;
reg   [335:0] lshr_ln647_reg_1401;
wire   [8:0] sub_ln647_6_fu_876_p2;
reg   [8:0] sub_ln647_6_reg_1406;
wire   [335:0] lshr_ln647_2_fu_886_p2;
reg   [335:0] lshr_ln647_2_reg_1411;
wire   [0:0] and_ln82_fu_906_p2;
reg   [0:0] and_ln82_reg_1416;
wire   [0:0] icmp_ln887_fu_958_p2;
wire   [63:0] sendWord_data_V_2_fu_1147_p3;
wire   [7:0] sendWord_keep_V_fu_1297_p1;
wire   [63:0] sendWord_data_V_fu_1349_p3;
reg    ap_block_pp0_stage0_subdone;
wire   [15:0] select_ln82_3_fu_594_p3;
wire   [15:0] select_ln82_1_fu_928_p3;
wire   [335:0] p_Result_11_fu_1014_p5;
wire   [335:0] p_Result_s_fu_1082_p5;
wire   [7:0] select_ln82_fu_912_p3;
reg    ap_block_pp0_stage0_01001;
wire   [21:0] Lo_assign_1_fu_370_p3;
wire   [22:0] zext_ln76_1_fu_378_p1;
wire   [22:0] add_ln76_1_fu_382_p2;
wire   [21:0] or_ln78_1_fu_394_p2;
wire   [2:0] trunc_ln76_3_fu_366_p1;
wire   [8:0] tmp_13_fu_406_p3;
wire   [8:0] trunc_ln647_1_fu_414_p1;
wire   [0:0] icmp_ln647_2_fu_400_p2;
wire   [8:0] sub_ln647_7_fu_428_p2;
wire   [8:0] sub_ln647_9_fu_440_p2;
reg   [335:0] tmp_14_fu_418_p4;
wire   [8:0] sub_ln647_8_fu_434_p2;
wire   [8:0] select_ln647_6_fu_446_p3;
wire   [8:0] select_ln647_8_fu_462_p3;
wire   [335:0] select_ln647_7_fu_454_p3;
wire   [335:0] zext_ln647_4_fu_476_p1;
wire   [2:0] trunc_ln76_2_fu_362_p1;
wire   [8:0] tmp_15_fu_498_p3;
wire   [0:0] icmp_ln647_3_fu_492_p2;
wire   [8:0] add_ln647_1_fu_516_p2;
wire   [8:0] sub_ln647_12_fu_528_p2;
reg   [335:0] tmp_16_fu_506_p4;
wire   [8:0] sub_ln647_11_fu_522_p2;
wire   [8:0] select_ln647_9_fu_534_p3;
wire   [8:0] select_ln647_11_fu_550_p3;
wire   [335:0] select_ln647_10_fu_542_p3;
wire   [335:0] zext_ln647_6_fu_564_p1;
wire   [0:0] icmp_ln82_1_fu_486_p2;
wire   [0:0] xor_ln76_1_fu_574_p2;
wire   [15:0] grp_fu_342_p2;
wire   [15:0] select_ln76_3_fu_586_p3;
wire   [21:0] Lo_assign_fu_622_p3;
wire   [22:0] zext_ln76_fu_630_p1;
wire   [22:0] add_ln76_fu_634_p2;
wire   [21:0] or_ln78_fu_646_p2;
wire   [2:0] trunc_ln76_1_fu_618_p1;
wire   [8:0] tmp_7_fu_658_p3;
wire   [8:0] trunc_ln647_fu_666_p1;
wire   [0:0] icmp_ln647_fu_652_p2;
wire   [8:0] sub_ln647_fu_680_p2;
wire   [8:0] sub_ln647_2_fu_692_p2;
reg   [335:0] tmp_8_fu_670_p4;
wire   [8:0] sub_ln647_1_fu_686_p2;
wire   [8:0] select_ln647_fu_698_p3;
wire   [8:0] select_ln647_2_fu_714_p3;
wire   [335:0] select_ln647_1_fu_706_p3;
wire   [335:0] zext_ln647_fu_728_p1;
wire   [21:0] shl_ln_fu_738_p3;
wire   [22:0] zext_ln80_fu_746_p1;
wire   [22:0] sub_ln80_fu_750_p2;
wire   [22:0] sub_ln80_1_fu_764_p2;
wire   [7:0] trunc_ln80_1_fu_770_p4;
wire   [0:0] tmp_9_fu_756_p3;
wire   [7:0] sub_ln80_2_fu_780_p2;
wire   [7:0] trunc_ln80_2_fu_786_p4;
wire   [2:0] trunc_ln76_fu_614_p1;
wire   [8:0] tmp_10_fu_816_p3;
wire   [0:0] icmp_ln647_1_fu_810_p2;
wire   [8:0] add_ln647_fu_834_p2;
wire   [8:0] sub_ln647_5_fu_846_p2;
reg   [335:0] tmp_11_fu_824_p4;
wire   [8:0] sub_ln647_4_fu_840_p2;
wire   [8:0] select_ln647_3_fu_852_p3;
wire   [8:0] select_ln647_5_fu_868_p3;
wire   [335:0] select_ln647_4_fu_860_p3;
wire   [335:0] zext_ln647_2_fu_882_p1;
wire   [7:0] select_ln80_fu_796_p3;
wire   [0:0] icmp_ln82_fu_804_p2;
wire   [0:0] xor_ln76_fu_900_p2;
wire   [7:0] select_ln76_fu_892_p3;
wire   [15:0] select_ln76_1_fu_920_p3;
wire   [4:0] tmp_12_fu_948_p4;
wire   [335:0] p_Result_14_fu_976_p5;
wire   [335:0] p_Result_15_fu_988_p5;
wire   [175:0] tmp_6_fu_1000_p6;
wire   [47:0] trunc_ln321_fu_1032_p1;
wire   [335:0] p_Result_12_fu_1036_p5;
wire   [79:0] tmp_4_fu_1060_p4;
wire   [335:0] p_Result_13_fu_1048_p5;
wire   [175:0] tmp_5_fu_1070_p5;
wire   [335:0] zext_ln647_5_fu_1100_p1;
wire   [335:0] lshr_ln647_5_fu_1103_p2;
wire   [335:0] p_Result_18_fu_1109_p2;
wire   [335:0] zext_ln647_7_fu_1118_p1;
wire   [335:0] lshr_ln647_7_fu_1121_p2;
wire   [335:0] p_Result_19_fu_1127_p2;
wire   [15:0] trunc_ln215_1_fu_1132_p1;
wire   [63:0] trunc_ln364_1_fu_1114_p1;
wire   [63:0] p_Result_6_fu_1136_p1;
wire   [63:0] select_ln76_4_fu_1140_p3;
wire   [5:0] agg_result_V_i_i_fu_1163_p65;
wire   [63:0] agg_result_V_i_i_fu_1163_p66;
wire   [335:0] zext_ln647_1_fu_1302_p1;
wire   [335:0] lshr_ln647_1_fu_1305_p2;
wire   [335:0] p_Result_16_fu_1311_p2;
wire   [335:0] zext_ln647_3_fu_1320_p1;
wire   [335:0] lshr_ln647_3_fu_1323_p2;
wire   [335:0] p_Result_17_fu_1329_p2;
wire   [15:0] trunc_ln215_fu_1334_p1;
wire   [63:0] trunc_ln364_fu_1316_p1;
wire   [63:0] p_Result_3_fu_1338_p1;
wire   [63:0] select_ln76_2_fu_1342_p3;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_418;
reg    ap_condition_384;
reg    ap_condition_136;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 dataOut_V_data_V_1_state = 2'd0;
#0 dataOut_V_keep_V_1_state = 2'd0;
#0 dataOut_V_last_V_1_state = 2'd0;
#0 dataOut_V_data_V_1_sel_rd = 1'b0;
#0 dataOut_V_data_V_1_sel_wr = 1'b0;
#0 dataOut_V_keep_V_1_sel_rd = 1'b0;
#0 dataOut_V_keep_V_1_sel_wr = 1'b0;
#0 dataOut_V_last_V_1_sel_rd = 1'b0;
#0 dataOut_V_last_V_1_sel_wr = 1'b0;
#0 gap_state = 2'd0;
#0 header_idx_1 = 16'd0;
#0 header_header_V_1 = 336'd22969770278074827527357335424865723297445183488;
#0 remainingLength_V = 8'd0;
end

arp_server_subnet_top_mux_646_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 64 ),
    .din10_WIDTH( 64 ),
    .din11_WIDTH( 64 ),
    .din12_WIDTH( 64 ),
    .din13_WIDTH( 64 ),
    .din14_WIDTH( 64 ),
    .din15_WIDTH( 64 ),
    .din16_WIDTH( 64 ),
    .din17_WIDTH( 64 ),
    .din18_WIDTH( 64 ),
    .din19_WIDTH( 64 ),
    .din20_WIDTH( 64 ),
    .din21_WIDTH( 64 ),
    .din22_WIDTH( 64 ),
    .din23_WIDTH( 64 ),
    .din24_WIDTH( 64 ),
    .din25_WIDTH( 64 ),
    .din26_WIDTH( 64 ),
    .din27_WIDTH( 64 ),
    .din28_WIDTH( 64 ),
    .din29_WIDTH( 64 ),
    .din30_WIDTH( 64 ),
    .din31_WIDTH( 64 ),
    .din32_WIDTH( 64 ),
    .din33_WIDTH( 64 ),
    .din34_WIDTH( 64 ),
    .din35_WIDTH( 64 ),
    .din36_WIDTH( 64 ),
    .din37_WIDTH( 64 ),
    .din38_WIDTH( 64 ),
    .din39_WIDTH( 64 ),
    .din40_WIDTH( 64 ),
    .din41_WIDTH( 64 ),
    .din42_WIDTH( 64 ),
    .din43_WIDTH( 64 ),
    .din44_WIDTH( 64 ),
    .din45_WIDTH( 64 ),
    .din46_WIDTH( 64 ),
    .din47_WIDTH( 64 ),
    .din48_WIDTH( 64 ),
    .din49_WIDTH( 64 ),
    .din50_WIDTH( 64 ),
    .din51_WIDTH( 64 ),
    .din52_WIDTH( 64 ),
    .din53_WIDTH( 64 ),
    .din54_WIDTH( 64 ),
    .din55_WIDTH( 64 ),
    .din56_WIDTH( 64 ),
    .din57_WIDTH( 64 ),
    .din58_WIDTH( 64 ),
    .din59_WIDTH( 64 ),
    .din60_WIDTH( 64 ),
    .din61_WIDTH( 64 ),
    .din62_WIDTH( 64 ),
    .din63_WIDTH( 64 ),
    .din64_WIDTH( 6 ),
    .dout_WIDTH( 64 ))
arp_server_subnet_top_mux_646_64_1_1_U9(
    .din0(64'd18446744073709551615),
    .din1(64'd1),
    .din2(64'd3),
    .din3(64'd7),
    .din4(64'd15),
    .din5(64'd31),
    .din6(64'd63),
    .din7(64'd127),
    .din8(64'd255),
    .din9(64'd511),
    .din10(64'd1023),
    .din11(64'd2047),
    .din12(64'd4095),
    .din13(64'd8191),
    .din14(64'd16383),
    .din15(64'd32767),
    .din16(64'd65535),
    .din17(64'd131071),
    .din18(64'd262143),
    .din19(64'd524287),
    .din20(64'd1048575),
    .din21(64'd2097151),
    .din22(64'd4194303),
    .din23(64'd8388607),
    .din24(64'd16777215),
    .din25(64'd33554431),
    .din26(64'd67108863),
    .din27(64'd134217727),
    .din28(64'd268435455),
    .din29(64'd536870911),
    .din30(64'd1073741823),
    .din31(64'd2147483647),
    .din32(64'd4294967295),
    .din33(64'd8589934591),
    .din34(64'd17179869183),
    .din35(64'd34359738367),
    .din36(64'd68719476735),
    .din37(64'd137438953471),
    .din38(64'd274877906943),
    .din39(64'd549755813887),
    .din40(64'd1099511627775),
    .din41(64'd2199023255551),
    .din42(64'd4398046511103),
    .din43(64'd8796093022207),
    .din44(64'd17592186044415),
    .din45(64'd35184372088831),
    .din46(64'd70368744177663),
    .din47(64'd140737488355327),
    .din48(64'd281474976710655),
    .din49(64'd562949953421311),
    .din50(64'd1125899906842623),
    .din51(64'd2251799813685247),
    .din52(64'd4503599627370495),
    .din53(64'd9007199254740991),
    .din54(64'd18014398509481983),
    .din55(64'd36028797018963967),
    .din56(64'd72057594037927935),
    .din57(64'd144115188075855871),
    .din58(64'd288230376151711743),
    .din59(64'd576460752303423487),
    .din60(64'd1152921504606846975),
    .din61(64'd2305843009213693951),
    .din62(64'd4611686018427387903),
    .din63(64'd9223372036854775807),
    .din64(agg_result_V_i_i_fu_1163_p65),
    .dout(agg_result_V_i_i_fu_1163_p66)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        dataOut_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((dataOut_V_data_V_1_ack_out == 1'b1) & (dataOut_V_data_V_1_vld_out == 1'b1))) begin
            dataOut_V_data_V_1_sel_rd <= ~dataOut_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        dataOut_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((dataOut_V_data_V_1_ack_in == 1'b1) & (dataOut_V_data_V_1_vld_in == 1'b1))) begin
            dataOut_V_data_V_1_sel_wr <= ~dataOut_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        dataOut_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((dataOut_V_data_V_1_state == 2'd3) & (dataOut_V_data_V_1_vld_in == 1'b0) & (dataOut_V_data_V_1_ack_out == 1'b1)) | ((dataOut_V_data_V_1_state == 2'd2) & (dataOut_V_data_V_1_vld_in == 1'b0)))) begin
            dataOut_V_data_V_1_state <= 2'd2;
        end else if ((((dataOut_V_data_V_1_state == 2'd1) & (m_axis_TREADY == 1'b0)) | ((dataOut_V_data_V_1_state == 2'd3) & (m_axis_TREADY == 1'b0) & (dataOut_V_data_V_1_vld_in == 1'b1)))) begin
            dataOut_V_data_V_1_state <= 2'd1;
        end else if ((((dataOut_V_data_V_1_state == 2'd1) & (dataOut_V_data_V_1_ack_out == 1'b1)) | (~((dataOut_V_data_V_1_vld_in == 1'b0) & (dataOut_V_data_V_1_ack_out == 1'b1)) & ~((m_axis_TREADY == 1'b0) & (dataOut_V_data_V_1_vld_in == 1'b1)) & (dataOut_V_data_V_1_state == 2'd3)) | ((dataOut_V_data_V_1_state == 2'd2) & (dataOut_V_data_V_1_vld_in == 1'b1)))) begin
            dataOut_V_data_V_1_state <= 2'd3;
        end else begin
            dataOut_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        dataOut_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((dataOut_V_keep_V_1_ack_out == 1'b1) & (dataOut_V_keep_V_1_vld_out == 1'b1))) begin
            dataOut_V_keep_V_1_sel_rd <= ~dataOut_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        dataOut_V_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((dataOut_V_keep_V_1_ack_in == 1'b1) & (dataOut_V_keep_V_1_vld_in == 1'b1))) begin
            dataOut_V_keep_V_1_sel_wr <= ~dataOut_V_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        dataOut_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((dataOut_V_keep_V_1_state == 2'd3) & (dataOut_V_keep_V_1_vld_in == 1'b0) & (dataOut_V_keep_V_1_ack_out == 1'b1)) | ((dataOut_V_keep_V_1_state == 2'd2) & (dataOut_V_keep_V_1_vld_in == 1'b0)))) begin
            dataOut_V_keep_V_1_state <= 2'd2;
        end else if ((((dataOut_V_keep_V_1_state == 2'd1) & (m_axis_TREADY == 1'b0)) | ((dataOut_V_keep_V_1_state == 2'd3) & (m_axis_TREADY == 1'b0) & (dataOut_V_keep_V_1_vld_in == 1'b1)))) begin
            dataOut_V_keep_V_1_state <= 2'd1;
        end else if ((((dataOut_V_keep_V_1_state == 2'd1) & (dataOut_V_keep_V_1_ack_out == 1'b1)) | (~((dataOut_V_keep_V_1_vld_in == 1'b0) & (dataOut_V_keep_V_1_ack_out == 1'b1)) & ~((m_axis_TREADY == 1'b0) & (dataOut_V_keep_V_1_vld_in == 1'b1)) & (dataOut_V_keep_V_1_state == 2'd3)) | ((dataOut_V_keep_V_1_state == 2'd2) & (dataOut_V_keep_V_1_vld_in == 1'b1)))) begin
            dataOut_V_keep_V_1_state <= 2'd3;
        end else begin
            dataOut_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        dataOut_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((dataOut_V_last_V_1_vld_out == 1'b1) & (dataOut_V_last_V_1_ack_out == 1'b1))) begin
            dataOut_V_last_V_1_sel_rd <= ~dataOut_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        dataOut_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((dataOut_V_last_V_1_ack_in == 1'b1) & (dataOut_V_last_V_1_vld_in == 1'b1))) begin
            dataOut_V_last_V_1_sel_wr <= ~dataOut_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        dataOut_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((dataOut_V_last_V_1_state == 2'd3) & (dataOut_V_last_V_1_vld_in == 1'b0) & (dataOut_V_last_V_1_ack_out == 1'b1)) | ((dataOut_V_last_V_1_state == 2'd2) & (dataOut_V_last_V_1_vld_in == 1'b0)))) begin
            dataOut_V_last_V_1_state <= 2'd2;
        end else if ((((dataOut_V_last_V_1_state == 2'd1) & (m_axis_TREADY == 1'b0)) | ((dataOut_V_last_V_1_state == 2'd3) & (m_axis_TREADY == 1'b0) & (dataOut_V_last_V_1_vld_in == 1'b1)))) begin
            dataOut_V_last_V_1_state <= 2'd1;
        end else if ((((dataOut_V_last_V_1_state == 2'd1) & (dataOut_V_last_V_1_ack_out == 1'b1)) | (~((dataOut_V_last_V_1_vld_in == 1'b0) & (dataOut_V_last_V_1_ack_out == 1'b1)) & ~((m_axis_TREADY == 1'b0) & (dataOut_V_last_V_1_vld_in == 1'b1)) & (dataOut_V_last_V_1_state == 2'd3)) | ((dataOut_V_last_V_1_state == 2'd2) & (dataOut_V_last_V_1_vld_in == 1'b1)))) begin
            dataOut_V_last_V_1_state <= 2'd3;
        end else begin
            dataOut_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((tmp_nbreadreq_fu_294_p3 == 1'd1) & (gap_state == 2'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((tmp_3_nbreadreq_fu_302_p3 == 1'd1) & (tmp_nbreadreq_fu_294_p3 == 1'd0) & (gap_state == 2'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        gap_state <= 2'd1;
    end else if (((icmp_ln887_fu_958_p2 == 1'd1) & (gap_state_load_load_fu_353_p1 == 2'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gap_state <= 2'd2;
    end else if (((gap_state_load_load_fu_353_p1 == 2'd2) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gap_state <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_384)) begin
        if ((tmp_nbreadreq_fu_294_p3 == 1'd1)) begin
            header_header_V_1 <= p_Result_s_fu_1082_p5;
        end else if (((tmp_3_nbreadreq_fu_302_p3 == 1'd1) & (tmp_nbreadreq_fu_294_p3 == 1'd0))) begin
            header_header_V_1 <= p_Result_11_fu_1014_p5;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_136)) begin
        if ((gap_state == 2'd0)) begin
            header_idx_1 <= 16'd0;
        end else if ((gap_state_load_load_fu_353_p1 == 2'd1)) begin
            header_idx_1 <= select_ln82_1_fu_928_p3;
        end else if ((gap_state_load_load_fu_353_p1 == 2'd2)) begin
            header_idx_1 <= select_ln82_3_fu_594_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((gap_state_load_load_fu_353_p1 == 2'd2) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        and_ln82_1_reg_1386 <= and_ln82_1_fu_580_p2;
        icmp_ln76_1_reg_1361 <= icmp_ln76_1_fu_388_p2;
        lshr_ln647_4_reg_1371 <= lshr_ln647_4_fu_480_p2;
        lshr_ln647_6_reg_1381 <= lshr_ln647_6_fu_568_p2;
        sub_ln647_10_reg_1366[8 : 1] <= sub_ln647_10_fu_470_p2[8 : 1];
        sub_ln647_13_reg_1376[8 : 1] <= sub_ln647_13_fu_558_p2[8 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((gap_state_load_load_fu_353_p1 == 2'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        and_ln82_reg_1416 <= and_ln82_fu_906_p2;
        icmp_ln76_reg_1391 <= icmp_ln76_fu_640_p2;
        lshr_ln647_2_reg_1411 <= lshr_ln647_2_fu_886_p2;
        lshr_ln647_reg_1401 <= lshr_ln647_fu_732_p2;
        sub_ln647_3_reg_1396[8 : 1] <= sub_ln647_3_fu_722_p2[8 : 1];
        sub_ln647_6_reg_1406[8 : 1] <= sub_ln647_6_fu_876_p2[8 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((dataOut_V_data_V_1_load_A == 1'b1)) begin
        dataOut_V_data_V_1_payload_A <= dataOut_V_data_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((dataOut_V_data_V_1_load_B == 1'b1)) begin
        dataOut_V_data_V_1_payload_B <= dataOut_V_data_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((dataOut_V_keep_V_1_load_A == 1'b1)) begin
        dataOut_V_keep_V_1_payload_A <= dataOut_V_keep_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((dataOut_V_keep_V_1_load_B == 1'b1)) begin
        dataOut_V_keep_V_1_payload_B <= dataOut_V_keep_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((dataOut_V_last_V_1_load_A == 1'b1)) begin
        dataOut_V_last_V_1_payload_A <= dataOut_V_last_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((dataOut_V_last_V_1_load_B == 1'b1)) begin
        dataOut_V_last_V_1_payload_B <= dataOut_V_last_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gap_state_load_reg_1357 <= gap_state;
        gap_state_load_reg_1357_pp0_iter1_reg <= gap_state_load_reg_1357;
    end
end

always @ (posedge ap_clk) begin
    if (((gap_state_load_load_fu_353_p1 == 2'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        remainingLength_V[1] <= select_ln82_fu_912_p3[1];
remainingLength_V[7 : 3] <= select_ln82_fu_912_p3[7 : 3];
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op119_read_state1 == 1'b1))) begin
        arpReplyMetaFifo_V_blk_n = arpReplyMetaFifo_V_empty_n;
    end else begin
        arpReplyMetaFifo_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op119_read_state1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        arpReplyMetaFifo_V_read = 1'b1;
    end else begin
        arpReplyMetaFifo_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op111_read_state1 == 1'b1))) begin
        arpRequestMetaFifo_V_blk_n = arpRequestMetaFifo_V_empty_n;
    end else begin
        arpRequestMetaFifo_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op111_read_state1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        arpRequestMetaFifo_V_read = 1'b1;
    end else begin
        arpRequestMetaFifo_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_418)) begin
        if ((gap_state_load_reg_1357 == 2'd1)) begin
            dataOut_V_data_V_1_data_in = sendWord_data_V_fu_1349_p3;
        end else if ((gap_state_load_reg_1357 == 2'd2)) begin
            dataOut_V_data_V_1_data_in = sendWord_data_V_2_fu_1147_p3;
        end else begin
            dataOut_V_data_V_1_data_in = 'bx;
        end
    end else begin
        dataOut_V_data_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((dataOut_V_data_V_1_sel == 1'b1)) begin
        dataOut_V_data_V_1_data_out = dataOut_V_data_V_1_payload_B;
    end else begin
        dataOut_V_data_V_1_data_out = dataOut_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((gap_state_load_reg_1357 == 2'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((gap_state_load_reg_1357 == 2'd2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        dataOut_V_data_V_1_vld_in = 1'b1;
    end else begin
        dataOut_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_418)) begin
        if ((gap_state_load_reg_1357 == 2'd1)) begin
            dataOut_V_keep_V_1_data_in = 8'd255;
        end else if ((gap_state_load_reg_1357 == 2'd2)) begin
            dataOut_V_keep_V_1_data_in = sendWord_keep_V_fu_1297_p1;
        end else begin
            dataOut_V_keep_V_1_data_in = 'bx;
        end
    end else begin
        dataOut_V_keep_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((dataOut_V_keep_V_1_sel == 1'b1)) begin
        dataOut_V_keep_V_1_data_out = dataOut_V_keep_V_1_payload_B;
    end else begin
        dataOut_V_keep_V_1_data_out = dataOut_V_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((gap_state_load_reg_1357 == 2'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((gap_state_load_reg_1357 == 2'd2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        dataOut_V_keep_V_1_vld_in = 1'b1;
    end else begin
        dataOut_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_418)) begin
        if ((gap_state_load_reg_1357 == 2'd1)) begin
            dataOut_V_last_V_1_data_in = 1'd0;
        end else if ((gap_state_load_reg_1357 == 2'd2)) begin
            dataOut_V_last_V_1_data_in = 1'd1;
        end else begin
            dataOut_V_last_V_1_data_in = 'bx;
        end
    end else begin
        dataOut_V_last_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((dataOut_V_last_V_1_sel == 1'b1)) begin
        dataOut_V_last_V_1_data_out = dataOut_V_last_V_1_payload_B;
    end else begin
        dataOut_V_last_V_1_data_out = dataOut_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((gap_state_load_reg_1357 == 2'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((gap_state_load_reg_1357 == 2'd2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        dataOut_V_last_V_1_vld_in = 1'b1;
    end else begin
        dataOut_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((gap_state_load_reg_1357 == 2'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((gap_state_load_reg_1357 == 2'd2) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((gap_state_load_reg_1357_pp0_iter1_reg == 2'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((gap_state_load_reg_1357_pp0_iter1_reg == 2'd2) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        m_axis_TDATA_blk_n = dataOut_V_data_V_1_state[1'd1];
    end else begin
        m_axis_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Lo_assign_1_fu_370_p3 = {{header_idx_1}, {6'd0}};

assign Lo_assign_fu_622_p3 = {{header_idx_1}, {6'd0}};

assign add_ln647_1_fu_516_p2 = (tmp_15_fu_498_p3 + 9'd177);

assign add_ln647_fu_834_p2 = (tmp_10_fu_816_p3 + 9'd177);

assign add_ln76_1_fu_382_p2 = (zext_ln76_1_fu_378_p1 + 23'd64);

assign add_ln76_fu_634_p2 = (zext_ln76_fu_630_p1 + 23'd64);

assign agg_result_V_i_i_fu_1163_p65 = remainingLength_V[5:0];

assign and_ln82_1_fu_580_p2 = (xor_ln76_1_fu_574_p2 & icmp_ln82_1_fu_486_p2);

assign and_ln82_fu_906_p2 = (xor_ln76_fu_900_p2 & icmp_ln82_fu_804_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((arpReplyMetaFifo_V_empty_n == 1'b0) & (ap_predicate_op119_read_state1 == 1'b1)) | ((arpRequestMetaFifo_V_empty_n == 1'b0) & (ap_predicate_op111_read_state1 == 1'b1)))) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((dataOut_V_data_V_1_state == 2'd1) | (dataOut_V_last_V_1_state == 2'd1) | (dataOut_V_keep_V_1_state == 2'd1) | ((dataOut_V_data_V_1_state == 2'd3) & (m_axis_TREADY == 1'b0)) | ((dataOut_V_last_V_1_state == 2'd3) & (m_axis_TREADY == 1'b0)) | ((dataOut_V_keep_V_1_state == 2'd3) & (m_axis_TREADY == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_io)) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((arpReplyMetaFifo_V_empty_n == 1'b0) & (ap_predicate_op119_read_state1 == 1'b1)) | ((arpRequestMetaFifo_V_empty_n == 1'b0) & (ap_predicate_op111_read_state1 == 1'b1)))) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((dataOut_V_data_V_1_state == 2'd1) | (dataOut_V_last_V_1_state == 2'd1) | (dataOut_V_keep_V_1_state == 2'd1) | (1'b1 == ap_block_state3_io) | ((dataOut_V_data_V_1_state == 2'd3) & (m_axis_TREADY == 1'b0)) | ((dataOut_V_last_V_1_state == 2'd3) & (m_axis_TREADY == 1'b0)) | ((dataOut_V_keep_V_1_state == 2'd3) & (m_axis_TREADY == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_io)) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((arpReplyMetaFifo_V_empty_n == 1'b0) & (ap_predicate_op119_read_state1 == 1'b1)) | ((arpRequestMetaFifo_V_empty_n == 1'b0) & (ap_predicate_op111_read_state1 == 1'b1)))) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((dataOut_V_data_V_1_state == 2'd1) | (dataOut_V_last_V_1_state == 2'd1) | (dataOut_V_keep_V_1_state == 2'd1) | (1'b1 == ap_block_state3_io) | ((dataOut_V_data_V_1_state == 2'd3) & (m_axis_TREADY == 1'b0)) | ((dataOut_V_last_V_1_state == 2'd3) & (m_axis_TREADY == 1'b0)) | ((dataOut_V_keep_V_1_state == 2'd3) & (m_axis_TREADY == 1'b0)))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((arpReplyMetaFifo_V_empty_n == 1'b0) & (ap_predicate_op119_read_state1 == 1'b1)) | ((arpRequestMetaFifo_V_empty_n == 1'b0) & (ap_predicate_op111_read_state1 == 1'b1)));
end

always @ (*) begin
    ap_block_state2_io = (((gap_state_load_reg_1357 == 2'd1) & (dataOut_V_data_V_1_ack_in == 1'b0)) | ((gap_state_load_reg_1357 == 2'd2) & (dataOut_V_data_V_1_ack_in == 1'b0)));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = (((gap_state_load_reg_1357_pp0_iter1_reg == 2'd1) & (dataOut_V_data_V_1_ack_in == 1'b0)) | ((gap_state_load_reg_1357_pp0_iter1_reg == 2'd2) & (dataOut_V_data_V_1_ack_in == 1'b0)));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((dataOut_V_data_V_1_state == 2'd1) | (dataOut_V_last_V_1_state == 2'd1) | (dataOut_V_keep_V_1_state == 2'd1) | ((dataOut_V_data_V_1_state == 2'd3) & (m_axis_TREADY == 1'b0)) | ((dataOut_V_last_V_1_state == 2'd3) & (m_axis_TREADY == 1'b0)) | ((dataOut_V_keep_V_1_state == 2'd3) & (m_axis_TREADY == 1'b0)));
end

always @ (*) begin
    ap_condition_136 = ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001));
end

always @ (*) begin
    ap_condition_384 = ((gap_state == 2'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001));
end

always @ (*) begin
    ap_condition_418 = ((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

always @ (*) begin
    ap_predicate_op111_read_state1 = ((tmp_3_nbreadreq_fu_302_p3 == 1'd1) & (tmp_nbreadreq_fu_294_p3 == 1'd0) & (gap_state == 2'd0));
end

always @ (*) begin
    ap_predicate_op119_read_state1 = ((tmp_nbreadreq_fu_294_p3 == 1'd1) & (gap_state == 2'd0));
end

assign dataOut_V_data_V_1_ack_in = dataOut_V_data_V_1_state[1'd1];

assign dataOut_V_data_V_1_ack_out = m_axis_TREADY;

assign dataOut_V_data_V_1_load_A = (~dataOut_V_data_V_1_sel_wr & dataOut_V_data_V_1_state_cmp_full);

assign dataOut_V_data_V_1_load_B = (dataOut_V_data_V_1_state_cmp_full & dataOut_V_data_V_1_sel_wr);

assign dataOut_V_data_V_1_sel = dataOut_V_data_V_1_sel_rd;

assign dataOut_V_data_V_1_state_cmp_full = ((dataOut_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign dataOut_V_data_V_1_vld_out = dataOut_V_data_V_1_state[1'd0];

assign dataOut_V_keep_V_1_ack_in = dataOut_V_keep_V_1_state[1'd1];

assign dataOut_V_keep_V_1_ack_out = m_axis_TREADY;

assign dataOut_V_keep_V_1_load_A = (~dataOut_V_keep_V_1_sel_wr & dataOut_V_keep_V_1_state_cmp_full);

assign dataOut_V_keep_V_1_load_B = (dataOut_V_keep_V_1_state_cmp_full & dataOut_V_keep_V_1_sel_wr);

assign dataOut_V_keep_V_1_sel = dataOut_V_keep_V_1_sel_rd;

assign dataOut_V_keep_V_1_state_cmp_full = ((dataOut_V_keep_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign dataOut_V_keep_V_1_vld_out = dataOut_V_keep_V_1_state[1'd0];

assign dataOut_V_last_V_1_ack_in = dataOut_V_last_V_1_state[1'd1];

assign dataOut_V_last_V_1_ack_out = m_axis_TREADY;

assign dataOut_V_last_V_1_load_A = (~dataOut_V_last_V_1_sel_wr & dataOut_V_last_V_1_state_cmp_full);

assign dataOut_V_last_V_1_load_B = (dataOut_V_last_V_1_state_cmp_full & dataOut_V_last_V_1_sel_wr);

assign dataOut_V_last_V_1_sel = dataOut_V_last_V_1_sel_rd;

assign dataOut_V_last_V_1_state_cmp_full = ((dataOut_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign dataOut_V_last_V_1_vld_out = dataOut_V_last_V_1_state[1'd0];

assign gap_state_load_load_fu_353_p1 = gap_state;

assign grp_fu_342_p2 = (header_idx_1 + 16'd1);

assign icmp_ln647_1_fu_810_p2 = ((Lo_assign_fu_622_p3 > 22'd335) ? 1'b1 : 1'b0);

assign icmp_ln647_2_fu_400_p2 = ((Lo_assign_1_fu_370_p3 > or_ln78_1_fu_394_p2) ? 1'b1 : 1'b0);

assign icmp_ln647_3_fu_492_p2 = ((Lo_assign_1_fu_370_p3 > 22'd335) ? 1'b1 : 1'b0);

assign icmp_ln647_fu_652_p2 = ((Lo_assign_fu_622_p3 > or_ln78_fu_646_p2) ? 1'b1 : 1'b0);

assign icmp_ln76_1_fu_388_p2 = ((add_ln76_1_fu_382_p2 < 23'd337) ? 1'b1 : 1'b0);

assign icmp_ln76_fu_640_p2 = ((add_ln76_fu_634_p2 < 23'd337) ? 1'b1 : 1'b0);

assign icmp_ln82_1_fu_486_p2 = ((Lo_assign_1_fu_370_p3 < 22'd336) ? 1'b1 : 1'b0);

assign icmp_ln82_fu_804_p2 = ((Lo_assign_fu_622_p3 < 22'd336) ? 1'b1 : 1'b0);

assign icmp_ln887_fu_958_p2 = ((tmp_12_fu_948_p4 == 5'd0) ? 1'b1 : 1'b0);

assign lshr_ln647_1_fu_1305_p2 = 336'd139984046386112763159840142535527767382602843577165595931249318810236991948760059086304843329475444735 >> zext_ln647_1_fu_1302_p1;

assign lshr_ln647_2_fu_886_p2 = select_ln647_4_fu_860_p3 >> zext_ln647_2_fu_882_p1;

assign lshr_ln647_3_fu_1323_p2 = 336'd139984046386112763159840142535527767382602843577165595931249318810236991948760059086304843329475444735 >> zext_ln647_3_fu_1320_p1;

assign lshr_ln647_4_fu_480_p2 = select_ln647_7_fu_454_p3 >> zext_ln647_4_fu_476_p1;

assign lshr_ln647_5_fu_1103_p2 = 336'd139984046386112763159840142535527767382602843577165595931249318810236991948760059086304843329475444735 >> zext_ln647_5_fu_1100_p1;

assign lshr_ln647_6_fu_568_p2 = select_ln647_10_fu_542_p3 >> zext_ln647_6_fu_564_p1;

assign lshr_ln647_7_fu_1121_p2 = 336'd139984046386112763159840142535527767382602843577165595931249318810236991948760059086304843329475444735 >> zext_ln647_7_fu_1118_p1;

assign lshr_ln647_fu_732_p2 = select_ln647_1_fu_706_p3 >> zext_ln647_fu_728_p1;

assign m_axis_TDATA = dataOut_V_data_V_1_data_out;

assign m_axis_TKEEP = dataOut_V_keep_V_1_data_out;

assign m_axis_TLAST = dataOut_V_last_V_1_data_out;

assign m_axis_TVALID = dataOut_V_last_V_1_state[1'd0];

assign or_ln78_1_fu_394_p2 = (22'd63 | Lo_assign_1_fu_370_p3);

assign or_ln78_fu_646_p2 = (22'd63 | Lo_assign_fu_622_p3);

assign p_Result_11_fu_1014_p5 = {{tmp_6_fu_1000_p6}, {p_Result_15_fu_988_p5[159:0]}};

assign p_Result_12_fu_1036_p5 = {{header_header_V_1[335:48]}, {trunc_ln321_fu_1032_p1}};

assign p_Result_13_fu_1048_p5 = {{p_Result_12_fu_1036_p5[335:96]}, {myMacAddress_V}, {p_Result_12_fu_1036_p5[47:0]}};

assign p_Result_14_fu_976_p5 = {{header_header_V_1[335:48]}, {48'd281474976710655}};

assign p_Result_15_fu_988_p5 = {{p_Result_14_fu_976_p5[335:96]}, {myMacAddress_V}, {p_Result_14_fu_976_p5[47:0]}};

assign p_Result_16_fu_1311_p2 = (lshr_ln647_reg_1401 & lshr_ln647_1_fu_1305_p2);

assign p_Result_17_fu_1329_p2 = (lshr_ln647_3_fu_1323_p2 & lshr_ln647_2_reg_1411);

assign p_Result_18_fu_1109_p2 = (lshr_ln647_5_fu_1103_p2 & lshr_ln647_4_reg_1371);

assign p_Result_19_fu_1127_p2 = (lshr_ln647_7_fu_1121_p2 & lshr_ln647_6_reg_1381);

assign p_Result_3_fu_1338_p1 = trunc_ln215_fu_1334_p1;

assign p_Result_6_fu_1136_p1 = trunc_ln215_1_fu_1132_p1;

assign p_Result_s_fu_1082_p5 = {{tmp_5_fu_1070_p5}, {p_Result_13_fu_1048_p5[159:0]}};

assign select_ln647_10_fu_542_p3 = ((icmp_ln647_3_fu_492_p2[0:0] === 1'b1) ? tmp_16_fu_506_p4 : header_header_V_1);

assign select_ln647_11_fu_550_p3 = ((icmp_ln647_3_fu_492_p2[0:0] === 1'b1) ? sub_ln647_11_fu_522_p2 : tmp_15_fu_498_p3);

assign select_ln647_1_fu_706_p3 = ((icmp_ln647_fu_652_p2[0:0] === 1'b1) ? tmp_8_fu_670_p4 : header_header_V_1);

assign select_ln647_2_fu_714_p3 = ((icmp_ln647_fu_652_p2[0:0] === 1'b1) ? sub_ln647_1_fu_686_p2 : tmp_7_fu_658_p3);

assign select_ln647_3_fu_852_p3 = ((icmp_ln647_1_fu_810_p2[0:0] === 1'b1) ? add_ln647_fu_834_p2 : sub_ln647_5_fu_846_p2);

assign select_ln647_4_fu_860_p3 = ((icmp_ln647_1_fu_810_p2[0:0] === 1'b1) ? tmp_11_fu_824_p4 : header_header_V_1);

assign select_ln647_5_fu_868_p3 = ((icmp_ln647_1_fu_810_p2[0:0] === 1'b1) ? sub_ln647_4_fu_840_p2 : tmp_10_fu_816_p3);

assign select_ln647_6_fu_446_p3 = ((icmp_ln647_2_fu_400_p2[0:0] === 1'b1) ? sub_ln647_7_fu_428_p2 : sub_ln647_9_fu_440_p2);

assign select_ln647_7_fu_454_p3 = ((icmp_ln647_2_fu_400_p2[0:0] === 1'b1) ? tmp_14_fu_418_p4 : header_header_V_1);

assign select_ln647_8_fu_462_p3 = ((icmp_ln647_2_fu_400_p2[0:0] === 1'b1) ? sub_ln647_8_fu_434_p2 : tmp_13_fu_406_p3);

assign select_ln647_9_fu_534_p3 = ((icmp_ln647_3_fu_492_p2[0:0] === 1'b1) ? add_ln647_1_fu_516_p2 : sub_ln647_12_fu_528_p2);

assign select_ln647_fu_698_p3 = ((icmp_ln647_fu_652_p2[0:0] === 1'b1) ? sub_ln647_fu_680_p2 : sub_ln647_2_fu_692_p2);

assign select_ln76_1_fu_920_p3 = ((icmp_ln76_fu_640_p2[0:0] === 1'b1) ? grp_fu_342_p2 : header_idx_1);

assign select_ln76_2_fu_1342_p3 = ((icmp_ln76_reg_1391[0:0] === 1'b1) ? trunc_ln364_fu_1316_p1 : 64'd0);

assign select_ln76_3_fu_586_p3 = ((icmp_ln76_1_fu_388_p2[0:0] === 1'b1) ? grp_fu_342_p2 : header_idx_1);

assign select_ln76_4_fu_1140_p3 = ((icmp_ln76_1_reg_1361[0:0] === 1'b1) ? trunc_ln364_1_fu_1114_p1 : 64'd0);

assign select_ln76_fu_892_p3 = ((icmp_ln76_fu_640_p2[0:0] === 1'b1) ? select_ln80_fu_796_p3 : 8'd0);

assign select_ln80_fu_796_p3 = ((tmp_9_fu_756_p3[0:0] === 1'b1) ? sub_ln80_2_fu_780_p2 : trunc_ln80_2_fu_786_p4);

assign select_ln82_1_fu_928_p3 = ((and_ln82_fu_906_p2[0:0] === 1'b1) ? grp_fu_342_p2 : select_ln76_1_fu_920_p3);

assign select_ln82_3_fu_594_p3 = ((and_ln82_1_fu_580_p2[0:0] === 1'b1) ? grp_fu_342_p2 : select_ln76_3_fu_586_p3);

assign select_ln82_fu_912_p3 = ((and_ln82_fu_906_p2[0:0] === 1'b1) ? 8'd0 : select_ln76_fu_892_p3);

assign sendWord_data_V_2_fu_1147_p3 = ((and_ln82_1_reg_1386[0:0] === 1'b1) ? p_Result_6_fu_1136_p1 : select_ln76_4_fu_1140_p3);

assign sendWord_data_V_fu_1349_p3 = ((and_ln82_reg_1416[0:0] === 1'b1) ? p_Result_3_fu_1338_p1 : select_ln76_2_fu_1342_p3);

assign sendWord_keep_V_fu_1297_p1 = agg_result_V_i_i_fu_1163_p66[7:0];

assign shl_ln_fu_738_p3 = {{grp_fu_342_p2}, {6'd0}};

assign sub_ln647_10_fu_470_p2 = ($signed(9'd335) - $signed(select_ln647_6_fu_446_p3));

assign sub_ln647_11_fu_522_p2 = ($signed(9'd335) - $signed(tmp_15_fu_498_p3));

assign sub_ln647_12_fu_528_p2 = ($signed(9'd335) - $signed(tmp_15_fu_498_p3));

assign sub_ln647_13_fu_558_p2 = ($signed(9'd335) - $signed(select_ln647_9_fu_534_p3));

assign sub_ln647_1_fu_686_p2 = ($signed(9'd335) - $signed(tmp_7_fu_658_p3));

assign sub_ln647_2_fu_692_p2 = (trunc_ln647_fu_666_p1 - tmp_7_fu_658_p3);

assign sub_ln647_3_fu_722_p2 = ($signed(9'd335) - $signed(select_ln647_fu_698_p3));

assign sub_ln647_4_fu_840_p2 = ($signed(9'd335) - $signed(tmp_10_fu_816_p3));

assign sub_ln647_5_fu_846_p2 = ($signed(9'd335) - $signed(tmp_10_fu_816_p3));

assign sub_ln647_6_fu_876_p2 = ($signed(9'd335) - $signed(select_ln647_3_fu_852_p3));

assign sub_ln647_7_fu_428_p2 = (tmp_13_fu_406_p3 - trunc_ln647_1_fu_414_p1);

assign sub_ln647_8_fu_434_p2 = ($signed(9'd335) - $signed(tmp_13_fu_406_p3));

assign sub_ln647_9_fu_440_p2 = (trunc_ln647_1_fu_414_p1 - tmp_13_fu_406_p3);

assign sub_ln647_fu_680_p2 = (tmp_7_fu_658_p3 - trunc_ln647_fu_666_p1);

assign sub_ln80_1_fu_764_p2 = (23'd0 - sub_ln80_fu_750_p2);

assign sub_ln80_2_fu_780_p2 = (8'd0 - trunc_ln80_1_fu_770_p4);

assign sub_ln80_fu_750_p2 = (23'd336 - zext_ln80_fu_746_p1);

assign tmp_10_fu_816_p3 = {{trunc_ln76_fu_614_p1}, {6'd0}};

integer ap_tvar_int_0;

always @ (header_header_V_1) begin
    for (ap_tvar_int_0 = 336 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 335 - 0) begin
            tmp_11_fu_824_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_11_fu_824_p4[ap_tvar_int_0] = header_header_V_1[335 - ap_tvar_int_0];
        end
    end
end

assign tmp_12_fu_948_p4 = {{select_ln82_fu_912_p3[7:3]}};

assign tmp_13_fu_406_p3 = {{trunc_ln76_3_fu_366_p1}, {6'd0}};

integer ap_tvar_int_1;

always @ (header_header_V_1) begin
    for (ap_tvar_int_1 = 336 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 335 - 0) begin
            tmp_14_fu_418_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_14_fu_418_p4[ap_tvar_int_1] = header_header_V_1[335 - ap_tvar_int_1];
        end
    end
end

assign tmp_15_fu_498_p3 = {{trunc_ln76_2_fu_362_p1}, {6'd0}};

integer ap_tvar_int_2;

always @ (header_header_V_1) begin
    for (ap_tvar_int_2 = 336 - 1; ap_tvar_int_2 >= 0; ap_tvar_int_2 = ap_tvar_int_2 - 1) begin
        if (ap_tvar_int_2 > 335 - 0) begin
            tmp_16_fu_506_p4[ap_tvar_int_2] = 1'b0;
        end else begin
            tmp_16_fu_506_p4[ap_tvar_int_2] = header_header_V_1[335 - ap_tvar_int_2];
        end
    end
end

assign tmp_3_nbreadreq_fu_302_p3 = arpRequestMetaFifo_V_empty_n;

assign tmp_4_fu_1060_p4 = {{arpReplyMetaFifo_V_dout[127:48]}};

assign tmp_5_fu_1070_p5 = {{{{tmp_4_fu_1060_p4}, {myIpAddress_V}}, {myMacAddress_V}}, {16'd512}};

assign tmp_6_fu_1000_p6 = {{{{{arpRequestMetaFifo_V_dout}, {48'd0}}, {myIpAddress_V}}, {myMacAddress_V}}, {16'd256}};

assign tmp_7_fu_658_p3 = {{trunc_ln76_1_fu_618_p1}, {6'd0}};

integer ap_tvar_int_3;

always @ (header_header_V_1) begin
    for (ap_tvar_int_3 = 336 - 1; ap_tvar_int_3 >= 0; ap_tvar_int_3 = ap_tvar_int_3 - 1) begin
        if (ap_tvar_int_3 > 335 - 0) begin
            tmp_8_fu_670_p4[ap_tvar_int_3] = 1'b0;
        end else begin
            tmp_8_fu_670_p4[ap_tvar_int_3] = header_header_V_1[335 - ap_tvar_int_3];
        end
    end
end

assign tmp_9_fu_756_p3 = sub_ln80_fu_750_p2[32'd22];

assign tmp_nbreadreq_fu_294_p3 = arpReplyMetaFifo_V_empty_n;

assign trunc_ln215_1_fu_1132_p1 = p_Result_19_fu_1127_p2[15:0];

assign trunc_ln215_fu_1334_p1 = p_Result_17_fu_1329_p2[15:0];

assign trunc_ln321_fu_1032_p1 = arpReplyMetaFifo_V_dout[47:0];

assign trunc_ln364_1_fu_1114_p1 = p_Result_18_fu_1109_p2[63:0];

assign trunc_ln364_fu_1316_p1 = p_Result_16_fu_1311_p2[63:0];

assign trunc_ln647_1_fu_414_p1 = or_ln78_1_fu_394_p2[8:0];

assign trunc_ln647_fu_666_p1 = or_ln78_fu_646_p2[8:0];

assign trunc_ln76_1_fu_618_p1 = header_idx_1[2:0];

assign trunc_ln76_2_fu_362_p1 = header_idx_1[2:0];

assign trunc_ln76_3_fu_366_p1 = header_idx_1[2:0];

assign trunc_ln76_fu_614_p1 = header_idx_1[2:0];

assign trunc_ln80_1_fu_770_p4 = {{sub_ln80_1_fu_764_p2[10:3]}};

assign trunc_ln80_2_fu_786_p4 = {{sub_ln80_fu_750_p2[10:3]}};

assign xor_ln76_1_fu_574_p2 = (icmp_ln76_1_fu_388_p2 ^ 1'd1);

assign xor_ln76_fu_900_p2 = (icmp_ln76_fu_640_p2 ^ 1'd1);

assign zext_ln647_1_fu_1302_p1 = sub_ln647_3_reg_1396;

assign zext_ln647_2_fu_882_p1 = select_ln647_5_fu_868_p3;

assign zext_ln647_3_fu_1320_p1 = sub_ln647_6_reg_1406;

assign zext_ln647_4_fu_476_p1 = select_ln647_8_fu_462_p3;

assign zext_ln647_5_fu_1100_p1 = sub_ln647_10_reg_1366;

assign zext_ln647_6_fu_564_p1 = select_ln647_11_fu_550_p3;

assign zext_ln647_7_fu_1118_p1 = sub_ln647_13_reg_1376;

assign zext_ln647_fu_728_p1 = select_ln647_2_fu_714_p3;

assign zext_ln76_1_fu_378_p1 = Lo_assign_1_fu_370_p3;

assign zext_ln76_fu_630_p1 = Lo_assign_fu_622_p3;

assign zext_ln80_fu_746_p1 = shl_ln_fu_738_p3;

always @ (posedge ap_clk) begin
    remainingLength_V[0] <= 1'b0;
    remainingLength_V[2] <= 1'b0;
    sub_ln647_10_reg_1366[0] <= 1'b0;
    sub_ln647_13_reg_1376[0] <= 1'b0;
    sub_ln647_3_reg_1396[0] <= 1'b0;
    sub_ln647_6_reg_1406[0] <= 1'b0;
end

endmodule //generate_arp_pkg_64_s
