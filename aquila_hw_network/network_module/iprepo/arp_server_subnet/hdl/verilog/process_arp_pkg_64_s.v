// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module process_arp_pkg_64_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        s_axis_TVALID,
        arpTableInsertFifo_V_din,
        arpTableInsertFifo_V_full_n,
        arpTableInsertFifo_V_write,
        arpReplyMetaFifo_V_din,
        arpReplyMetaFifo_V_full_n,
        arpReplyMetaFifo_V_write,
        s_axis_TDATA,
        s_axis_TREADY,
        s_axis_TKEEP,
        s_axis_TLAST,
        myIpAddress_V,
        regRequestCount_V,
        regRequestCount_V_ap_vld,
        regReplyCount_V,
        regReplyCount_V_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input   s_axis_TVALID;
output  [80:0] arpTableInsertFifo_V_din;
input   arpTableInsertFifo_V_full_n;
output   arpTableInsertFifo_V_write;
output  [127:0] arpReplyMetaFifo_V_din;
input   arpReplyMetaFifo_V_full_n;
output   arpReplyMetaFifo_V_write;
input  [63:0] s_axis_TDATA;
output   s_axis_TREADY;
input  [7:0] s_axis_TKEEP;
input  [0:0] s_axis_TLAST;
input  [31:0] myIpAddress_V;
output  [15:0] regRequestCount_V;
output   regRequestCount_V_ap_vld;
output  [15:0] regReplyCount_V;
output   regReplyCount_V_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg arpTableInsertFifo_V_write;
reg arpReplyMetaFifo_V_write;
reg s_axis_TREADY;
reg regRequestCount_V_ap_vld;
reg regReplyCount_V_ap_vld;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire   [0:0] tmp_nbreadreq_fu_130_p5;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
reg   [0:0] tmp_reg_586;
reg   [0:0] tmp_reg_586_pp0_iter2_reg;
reg   [0:0] tmp_last_V_reg_595;
reg   [0:0] tmp_last_V_reg_595_pp0_iter2_reg;
reg   [0:0] icmp_ln879_reg_622;
reg   [0:0] icmp_ln879_1_reg_626;
reg   [0:0] icmp_ln879_2_reg_630;
reg    ap_predicate_op75_write_state4;
reg    ap_predicate_op83_write_state4;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] header_ready;
reg   [15:0] header_idx;
reg   [335:0] header_header_V;
reg   [15:0] pag_requestCounter_V;
reg   [15:0] pag_replyCounter_V;
reg    s_axis_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    arpReplyMetaFifo_V_blk_n;
reg    arpTableInsertFifo_V_blk_n;
reg   [0:0] tmp_reg_586_pp0_iter1_reg;
reg   [63:0] tmp_data_V_reg_590;
wire   [0:0] tmp_last_V_fu_224_p1;
reg   [0:0] tmp_last_V_reg_595_pp0_iter1_reg;
wire   [0:0] header_ready_load_load_fu_228_p1;
reg   [0:0] header_ready_load_reg_599;
wire   [2:0] trunc_ln58_fu_237_p1;
reg   [2:0] trunc_ln58_reg_603;
wire   [0:0] icmp_ln58_1_fu_279_p2;
reg   [0:0] icmp_ln58_1_reg_608;
wire   [8:0] trunc_ln58_1_fu_285_p1;
reg   [8:0] trunc_ln58_1_reg_616;
wire   [0:0] icmp_ln879_fu_464_p2;
wire   [0:0] icmp_ln879_1_fu_479_p2;
wire   [0:0] icmp_ln879_2_fu_485_p2;
reg   [31:0] tmp_ipAddress_V_reg_634;
reg   [47:0] tmp_macAddress_V_reg_639;
reg   [47:0] tmp_srcMacAddr_V_reg_644;
reg   [79:0] tmp_3_reg_649;
reg    ap_block_pp0_stage0_subdone;
reg   [15:0] ap_phi_mux_phi_ln73_phi_fu_183_p4;
wire   [15:0] ap_phi_reg_pp0_iter0_phi_ln73_reg_180;
wire   [15:0] add_ln67_fu_296_p2;
reg   [0:0] ap_phi_mux_write_flag_1_i_i_phi_fu_192_p4;
wire   [0:0] ap_phi_reg_pp0_iter0_write_flag_1_i_i_reg_189;
wire   [0:0] xor_ln58_fu_289_p2;
reg   [0:0] ap_phi_mux_header_ready_1_new_0_phi_fu_202_p4;
wire   [0:0] ap_phi_reg_pp0_iter0_header_ready_1_new_0_reg_199;
wire   [0:0] or_ln73_fu_303_p2;
reg   [15:0] ap_phi_mux_header_idx_new_0_i_phi_fu_212_p4;
wire   [15:0] ap_phi_reg_pp0_iter0_header_idx_new_0_i_reg_209;
wire   [335:0] or_ln58_fu_438_p2;
wire   [15:0] add_ln700_fu_568_p2;
wire   [15:0] add_ln700_1_fu_544_p2;
reg    ap_block_pp0_stage0_01001;
wire   [21:0] Lo_assign_fu_241_p3;
wire   [22:0] zext_ln58_fu_249_p1;
wire   [22:0] add_ln58_fu_253_p2;
wire   [0:0] icmp_ln58_fu_259_p2;
wire   [21:0] or_ln60_fu_265_p2;
wire   [21:0] select_ln58_fu_271_p3;
wire   [8:0] tmp_1_fu_329_p3;
wire   [8:0] sub_ln58_fu_336_p2;
wire   [8:0] select_ln58_1_fu_342_p3;
wire   [8:0] select_ln58_3_fu_354_p3;
wire   [8:0] select_ln58_2_fu_348_p3;
wire   [8:0] sub_ln58_1_fu_361_p2;
wire   [335:0] tmp_V_fu_326_p1;
wire   [335:0] zext_ln58_1_fu_367_p1;
wire   [335:0] shl_ln58_fu_379_p2;
reg   [335:0] tmp_2_fu_385_p4;
wire   [335:0] zext_ln58_2_fu_371_p1;
wire   [335:0] zext_ln58_3_fu_375_p1;
wire   [335:0] shl_ln58_1_fu_402_p2;
wire   [335:0] lshr_ln58_fu_408_p2;
wire   [335:0] and_ln58_fu_414_p2;
wire   [335:0] xor_ln58_1_fu_420_p2;
wire   [335:0] select_ln58_4_fu_395_p3;
wire   [335:0] and_ln58_1_fu_426_p2;
wire   [335:0] and_ln58_2_fu_432_p2;
wire   [31:0] p_Result_i41_i_fu_454_p4;
wire   [15:0] p_Result_i43_i_fu_469_p4;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to2;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_120;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 header_ready = 1'd0;
#0 header_idx = 16'd0;
#0 header_header_V = 336'd22969770278074827527357335424865723297445183488;
#0 pag_requestCounter_V = 16'd0;
#0 pag_replyCounter_V = 16'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (header_ready_load_reg_599 == 1'd0) & (tmp_reg_586 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        header_header_V <= or_ln58_fu_438_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_nbreadreq_fu_130_p5 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        header_idx <= ap_phi_mux_header_idx_new_0_i_phi_fu_212_p4;
        header_ready <= ap_phi_mux_header_ready_1_new_0_phi_fu_202_p4;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_nbreadreq_fu_130_p5 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        header_ready_load_reg_599 <= header_ready;
        tmp_data_V_reg_590 <= s_axis_TDATA;
        tmp_last_V_reg_595 <= s_axis_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (header_ready_load_load_fu_228_p1 == 1'd0) & (tmp_nbreadreq_fu_130_p5 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln58_1_reg_608 <= icmp_ln58_1_fu_279_p2;
        trunc_ln58_1_reg_616[8 : 4] <= trunc_ln58_1_fu_285_p1[8 : 4];
        trunc_ln58_reg_603 <= trunc_ln58_fu_237_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln879_fu_464_p2 == 1'd1) & (tmp_last_V_reg_595_pp0_iter1_reg == 1'd1) & (tmp_reg_586_pp0_iter1_reg == 1'd1))) begin
        icmp_ln879_1_reg_626 <= icmp_ln879_1_fu_479_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln879_1_fu_479_p2 == 1'd0) & (icmp_ln879_fu_464_p2 == 1'd1) & (tmp_last_V_reg_595_pp0_iter1_reg == 1'd1) & (tmp_reg_586_pp0_iter1_reg == 1'd1))) begin
        icmp_ln879_2_reg_630 <= icmp_ln879_2_fu_485_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_last_V_reg_595_pp0_iter1_reg == 1'd1) & (tmp_reg_586_pp0_iter1_reg == 1'd1))) begin
        icmp_ln879_reg_622 <= icmp_ln879_fu_464_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln879_1_reg_626 == 1'd0) & (icmp_ln879_2_reg_630 == 1'd1) & (icmp_ln879_reg_622 == 1'd1) & (tmp_last_V_reg_595_pp0_iter2_reg == 1'd1) & (tmp_reg_586_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        pag_replyCounter_V <= add_ln700_1_fu_544_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln879_1_reg_626 == 1'd1) & (icmp_ln879_reg_622 == 1'd1) & (tmp_last_V_reg_595_pp0_iter2_reg == 1'd1) & (tmp_reg_586_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        pag_requestCounter_V <= add_ln700_fu_568_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln879_1_fu_479_p2 == 1'd1) & (icmp_ln879_fu_464_p2 == 1'd1) & (tmp_last_V_reg_595_pp0_iter1_reg == 1'd1) & (tmp_reg_586_pp0_iter1_reg == 1'd1))) begin
        tmp_3_reg_649 <= {{header_header_V[255:176]}};
        tmp_srcMacAddr_V_reg_644 <= {{header_header_V[95:48]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln879_1_fu_479_p2 == 1'd0) & (icmp_ln879_2_fu_485_p2 == 1'd1) & (icmp_ln879_fu_464_p2 == 1'd1) & (tmp_last_V_reg_595_pp0_iter1_reg == 1'd1) & (tmp_reg_586_pp0_iter1_reg == 1'd1))) begin
        tmp_ipAddress_V_reg_634 <= {{header_header_V[255:224]}};
        tmp_macAddress_V_reg_639 <= {{header_header_V[223:176]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_last_V_reg_595_pp0_iter1_reg <= tmp_last_V_reg_595;
        tmp_reg_586 <= tmp_nbreadreq_fu_130_p5;
        tmp_reg_586_pp0_iter1_reg <= tmp_reg_586;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        tmp_last_V_reg_595_pp0_iter2_reg <= tmp_last_V_reg_595_pp0_iter1_reg;
        tmp_reg_586_pp0_iter2_reg <= tmp_reg_586_pp0_iter1_reg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to2 = 1'b1;
    end else begin
        ap_idle_pp0_0to2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_120)) begin
        if ((tmp_last_V_fu_224_p1 == 1'd0)) begin
            ap_phi_mux_header_idx_new_0_i_phi_fu_212_p4 = ap_phi_mux_phi_ln73_phi_fu_183_p4;
        end else if ((tmp_last_V_fu_224_p1 == 1'd1)) begin
            ap_phi_mux_header_idx_new_0_i_phi_fu_212_p4 = 16'd0;
        end else begin
            ap_phi_mux_header_idx_new_0_i_phi_fu_212_p4 = ap_phi_reg_pp0_iter0_header_idx_new_0_i_reg_209;
        end
    end else begin
        ap_phi_mux_header_idx_new_0_i_phi_fu_212_p4 = ap_phi_reg_pp0_iter0_header_idx_new_0_i_reg_209;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_120)) begin
        if ((tmp_last_V_fu_224_p1 == 1'd0)) begin
            ap_phi_mux_header_ready_1_new_0_phi_fu_202_p4 = or_ln73_fu_303_p2;
        end else if ((tmp_last_V_fu_224_p1 == 1'd1)) begin
            ap_phi_mux_header_ready_1_new_0_phi_fu_202_p4 = 1'd0;
        end else begin
            ap_phi_mux_header_ready_1_new_0_phi_fu_202_p4 = ap_phi_reg_pp0_iter0_header_ready_1_new_0_reg_199;
        end
    end else begin
        ap_phi_mux_header_ready_1_new_0_phi_fu_202_p4 = ap_phi_reg_pp0_iter0_header_ready_1_new_0_reg_199;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_120)) begin
        if ((header_ready_load_load_fu_228_p1 == 1'd0)) begin
            ap_phi_mux_phi_ln73_phi_fu_183_p4 = add_ln67_fu_296_p2;
        end else if ((header_ready_load_load_fu_228_p1 == 1'd1)) begin
            ap_phi_mux_phi_ln73_phi_fu_183_p4 = header_idx;
        end else begin
            ap_phi_mux_phi_ln73_phi_fu_183_p4 = ap_phi_reg_pp0_iter0_phi_ln73_reg_180;
        end
    end else begin
        ap_phi_mux_phi_ln73_phi_fu_183_p4 = ap_phi_reg_pp0_iter0_phi_ln73_reg_180;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_120)) begin
        if ((header_ready_load_load_fu_228_p1 == 1'd0)) begin
            ap_phi_mux_write_flag_1_i_i_phi_fu_192_p4 = xor_ln58_fu_289_p2;
        end else if ((header_ready_load_load_fu_228_p1 == 1'd1)) begin
            ap_phi_mux_write_flag_1_i_i_phi_fu_192_p4 = 1'd0;
        end else begin
            ap_phi_mux_write_flag_1_i_i_phi_fu_192_p4 = ap_phi_reg_pp0_iter0_write_flag_1_i_i_reg_189;
        end
    end else begin
        ap_phi_mux_write_flag_1_i_i_phi_fu_192_p4 = ap_phi_reg_pp0_iter0_write_flag_1_i_i_reg_189;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to2 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_predicate_op83_write_state4 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        arpReplyMetaFifo_V_blk_n = arpReplyMetaFifo_V_full_n;
    end else begin
        arpReplyMetaFifo_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (ap_predicate_op83_write_state4 == 1'b1))) begin
        arpReplyMetaFifo_V_write = 1'b1;
    end else begin
        arpReplyMetaFifo_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_predicate_op75_write_state4 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        arpTableInsertFifo_V_blk_n = arpTableInsertFifo_V_full_n;
    end else begin
        arpTableInsertFifo_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (ap_predicate_op75_write_state4 == 1'b1))) begin
        arpTableInsertFifo_V_write = 1'b1;
    end else begin
        arpTableInsertFifo_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln879_1_reg_626 == 1'd0) & (icmp_ln879_2_reg_630 == 1'd1) & (icmp_ln879_reg_622 == 1'd1) & (tmp_last_V_reg_595_pp0_iter2_reg == 1'd1) & (tmp_reg_586_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        regReplyCount_V_ap_vld = 1'b1;
    end else begin
        regReplyCount_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln879_1_reg_626 == 1'd1) & (icmp_ln879_reg_622 == 1'd1) & (tmp_last_V_reg_595_pp0_iter2_reg == 1'd1) & (tmp_reg_586_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        regRequestCount_V_ap_vld = 1'b1;
    end else begin
        regRequestCount_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (tmp_nbreadreq_fu_130_p5 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        s_axis_TDATA_blk_n = s_axis_TVALID;
    end else begin
        s_axis_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_nbreadreq_fu_130_p5 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_axis_TREADY = 1'b1;
    end else begin
        s_axis_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Lo_assign_fu_241_p3 = {{header_idx}, {6'd0}};

assign add_ln58_fu_253_p2 = (zext_ln58_fu_249_p1 + 23'd64);

assign add_ln67_fu_296_p2 = (header_idx + 16'd1);

assign add_ln700_1_fu_544_p2 = (pag_replyCounter_V + 16'd1);

assign add_ln700_fu_568_p2 = (pag_requestCounter_V + 16'd1);

assign and_ln58_1_fu_426_p2 = (xor_ln58_1_fu_420_p2 & header_header_V);

assign and_ln58_2_fu_432_p2 = (select_ln58_4_fu_395_p3 & and_ln58_fu_414_p2);

assign and_ln58_fu_414_p2 = (shl_ln58_1_fu_402_p2 & lshr_ln58_fu_408_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (((arpReplyMetaFifo_V_full_n == 1'b0) & (ap_predicate_op83_write_state4 == 1'b1)) | ((arpTableInsertFifo_V_full_n == 1'b0) & (ap_predicate_op75_write_state4 == 1'b1)))) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((tmp_nbreadreq_fu_130_p5 == 1'd1) & (s_axis_TVALID == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (((arpReplyMetaFifo_V_full_n == 1'b0) & (ap_predicate_op83_write_state4 == 1'b1)) | ((arpTableInsertFifo_V_full_n == 1'b0) & (ap_predicate_op75_write_state4 == 1'b1)))) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((tmp_nbreadreq_fu_130_p5 == 1'd1) & (s_axis_TVALID == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (((arpReplyMetaFifo_V_full_n == 1'b0) & (ap_predicate_op83_write_state4 == 1'b1)) | ((arpTableInsertFifo_V_full_n == 1'b0) & (ap_predicate_op75_write_state4 == 1'b1)))) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((tmp_nbreadreq_fu_130_p5 == 1'd1) & (s_axis_TVALID == 1'b0)))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((tmp_nbreadreq_fu_130_p5 == 1'd1) & (s_axis_TVALID == 1'b0)));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = (((arpReplyMetaFifo_V_full_n == 1'b0) & (ap_predicate_op83_write_state4 == 1'b1)) | ((arpTableInsertFifo_V_full_n == 1'b0) & (ap_predicate_op75_write_state4 == 1'b1)));
end

always @ (*) begin
    ap_condition_120 = ((tmp_nbreadreq_fu_130_p5 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_phi_reg_pp0_iter0_header_idx_new_0_i_reg_209 = 'bx;

assign ap_phi_reg_pp0_iter0_header_ready_1_new_0_reg_199 = 'bx;

assign ap_phi_reg_pp0_iter0_phi_ln73_reg_180 = 'bx;

assign ap_phi_reg_pp0_iter0_write_flag_1_i_i_reg_189 = 'bx;

always @ (*) begin
    ap_predicate_op75_write_state4 = ((icmp_ln879_1_reg_626 == 1'd0) & (icmp_ln879_2_reg_630 == 1'd1) & (icmp_ln879_reg_622 == 1'd1) & (tmp_last_V_reg_595_pp0_iter2_reg == 1'd1) & (tmp_reg_586_pp0_iter2_reg == 1'd1));
end

always @ (*) begin
    ap_predicate_op83_write_state4 = ((icmp_ln879_1_reg_626 == 1'd1) & (icmp_ln879_reg_622 == 1'd1) & (tmp_last_V_reg_595_pp0_iter2_reg == 1'd1) & (tmp_reg_586_pp0_iter2_reg == 1'd1));
end

assign arpReplyMetaFifo_V_din = {{tmp_3_reg_649}, {tmp_srcMacAddr_V_reg_644}};

assign arpTableInsertFifo_V_din = {{{{1'd1}, {tmp_macAddress_V_reg_639}}}, {tmp_ipAddress_V_reg_634}};

assign header_ready_load_load_fu_228_p1 = header_ready;

assign icmp_ln58_1_fu_279_p2 = ((Lo_assign_fu_241_p3 > select_ln58_fu_271_p3) ? 1'b1 : 1'b0);

assign icmp_ln58_fu_259_p2 = ((add_ln58_fu_253_p2 < 23'd336) ? 1'b1 : 1'b0);

assign icmp_ln879_1_fu_479_p2 = ((p_Result_i43_i_fu_469_p4 == 16'd256) ? 1'b1 : 1'b0);

assign icmp_ln879_2_fu_485_p2 = ((p_Result_i43_i_fu_469_p4 == 16'd512) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_464_p2 = ((p_Result_i41_i_fu_454_p4 == myIpAddress_V) ? 1'b1 : 1'b0);

assign lshr_ln58_fu_408_p2 = 336'd139984046386112763159840142535527767382602843577165595931249318810236991948760059086304843329475444735 >> zext_ln58_3_fu_375_p1;

assign or_ln58_fu_438_p2 = (and_ln58_2_fu_432_p2 | and_ln58_1_fu_426_p2);

assign or_ln60_fu_265_p2 = (22'd63 | Lo_assign_fu_241_p3);

assign or_ln73_fu_303_p2 = (header_ready | ap_phi_mux_write_flag_1_i_i_phi_fu_192_p4);

assign p_Result_i41_i_fu_454_p4 = {{header_header_V[335:304]}};

assign p_Result_i43_i_fu_469_p4 = {{header_header_V[175:160]}};

assign regReplyCount_V = (pag_replyCounter_V + 16'd1);

assign regRequestCount_V = (pag_requestCounter_V + 16'd1);

assign select_ln58_1_fu_342_p3 = ((icmp_ln58_1_reg_608[0:0] === 1'b1) ? tmp_1_fu_329_p3 : trunc_ln58_1_reg_616);

assign select_ln58_2_fu_348_p3 = ((icmp_ln58_1_reg_608[0:0] === 1'b1) ? trunc_ln58_1_reg_616 : tmp_1_fu_329_p3);

assign select_ln58_3_fu_354_p3 = ((icmp_ln58_1_reg_608[0:0] === 1'b1) ? sub_ln58_fu_336_p2 : tmp_1_fu_329_p3);

assign select_ln58_4_fu_395_p3 = ((icmp_ln58_1_reg_608[0:0] === 1'b1) ? tmp_2_fu_385_p4 : shl_ln58_fu_379_p2);

assign select_ln58_fu_271_p3 = ((icmp_ln58_fu_259_p2[0:0] === 1'b1) ? or_ln60_fu_265_p2 : 22'd335);

assign shl_ln58_1_fu_402_p2 = 336'd139984046386112763159840142535527767382602843577165595931249318810236991948760059086304843329475444735 << zext_ln58_2_fu_371_p1;

assign shl_ln58_fu_379_p2 = tmp_V_fu_326_p1 << zext_ln58_1_fu_367_p1;

assign sub_ln58_1_fu_361_p2 = ($signed(9'd335) - $signed(select_ln58_1_fu_342_p3));

assign sub_ln58_fu_336_p2 = ($signed(9'd335) - $signed(tmp_1_fu_329_p3));

assign tmp_1_fu_329_p3 = {{trunc_ln58_reg_603}, {6'd0}};

integer ap_tvar_int_0;

always @ (shl_ln58_fu_379_p2) begin
    for (ap_tvar_int_0 = 336 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 335 - 0) begin
            tmp_2_fu_385_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_2_fu_385_p4[ap_tvar_int_0] = shl_ln58_fu_379_p2[335 - ap_tvar_int_0];
        end
    end
end

assign tmp_V_fu_326_p1 = tmp_data_V_reg_590;

assign tmp_last_V_fu_224_p1 = s_axis_TLAST;

assign tmp_nbreadreq_fu_130_p5 = s_axis_TVALID;

assign trunc_ln58_1_fu_285_p1 = select_ln58_fu_271_p3[8:0];

assign trunc_ln58_fu_237_p1 = header_idx[2:0];

assign xor_ln58_1_fu_420_p2 = (336'd139984046386112763159840142535527767382602843577165595931249318810236991948760059086304843329475444735 ^ and_ln58_fu_414_p2);

assign xor_ln58_fu_289_p2 = (icmp_ln58_fu_259_p2 ^ 1'd1);

assign zext_ln58_1_fu_367_p1 = select_ln58_3_fu_354_p3;

assign zext_ln58_2_fu_371_p1 = select_ln58_2_fu_348_p3;

assign zext_ln58_3_fu_375_p1 = sub_ln58_1_fu_361_p2;

assign zext_ln58_fu_249_p1 = Lo_assign_fu_241_p3;

always @ (posedge ap_clk) begin
    trunc_ln58_1_reg_616[3:0] <= 4'b1111;
end

endmodule //process_arp_pkg_64_s
