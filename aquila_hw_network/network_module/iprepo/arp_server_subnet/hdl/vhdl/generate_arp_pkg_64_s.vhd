-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity generate_arp_pkg_64_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    arpRequestMetaFifo_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    arpRequestMetaFifo_V_empty_n : IN STD_LOGIC;
    arpRequestMetaFifo_V_read : OUT STD_LOGIC;
    arpReplyMetaFifo_V_dout : IN STD_LOGIC_VECTOR (127 downto 0);
    arpReplyMetaFifo_V_empty_n : IN STD_LOGIC;
    arpReplyMetaFifo_V_read : OUT STD_LOGIC;
    m_axis_TREADY : IN STD_LOGIC;
    m_axis_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axis_TVALID : OUT STD_LOGIC;
    m_axis_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axis_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    myMacAddress_V : IN STD_LOGIC_VECTOR (47 downto 0);
    myIpAddress_V : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of generate_arp_pkg_64_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv23_40 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001000000";
    constant ap_const_lv23_151 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000101010001";
    constant ap_const_lv22_3F : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000111111";
    constant ap_const_lv32_14F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101001111";
    constant ap_const_lv9_14F : STD_LOGIC_VECTOR (8 downto 0) := "101001111";
    constant ap_const_lv22_150 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000101010000";
    constant ap_const_lv22_14F : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000101001111";
    constant ap_const_lv9_B1 : STD_LOGIC_VECTOR (8 downto 0) := "010110001";
    constant ap_const_lv23_150 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000101010000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv48_FFFFFFFFFFFF : STD_LOGIC_VECTOR (47 downto 0) := "111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv48_0 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000000";
    constant ap_const_lv16_100 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv16_200 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_const_lv336_lc_2 : STD_LOGIC_VECTOR (335 downto 0) := "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv64_1F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011111";
    constant ap_const_lv64_3F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111111";
    constant ap_const_lv64_7F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001111111";
    constant ap_const_lv64_FF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000011111111";
    constant ap_const_lv64_1FF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000111111111";
    constant ap_const_lv64_3FF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000001111111111";
    constant ap_const_lv64_7FF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000011111111111";
    constant ap_const_lv64_FFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000111111111111";
    constant ap_const_lv64_1FFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000001111111111111";
    constant ap_const_lv64_3FFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000011111111111111";
    constant ap_const_lv64_7FFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000111111111111111";
    constant ap_const_lv64_FFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000001111111111111111";
    constant ap_const_lv64_1FFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000011111111111111111";
    constant ap_const_lv64_3FFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000111111111111111111";
    constant ap_const_lv64_7FFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000001111111111111111111";
    constant ap_const_lv64_FFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000011111111111111111111";
    constant ap_const_lv64_1FFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000111111111111111111111";
    constant ap_const_lv64_3FFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000001111111111111111111111";
    constant ap_const_lv64_7FFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000011111111111111111111111";
    constant ap_const_lv64_FFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000111111111111111111111111";
    constant ap_const_lv64_1FFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000001111111111111111111111111";
    constant ap_const_lv64_3FFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000011111111111111111111111111";
    constant ap_const_lv64_7FFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000111111111111111111111111111";
    constant ap_const_lv64_FFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000001111111111111111111111111111";
    constant ap_const_lv64_1FFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000011111111111111111111111111111";
    constant ap_const_lv64_3FFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000111111111111111111111111111111";
    constant ap_const_lv64_7FFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000001111111111111111111111111111111";
    constant ap_const_lv64_FFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000011111111111111111111111111111111";
    constant ap_const_lv64_1FFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000111111111111111111111111111111111";
    constant ap_const_lv64_3FFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000001111111111111111111111111111111111";
    constant ap_const_lv64_7FFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000011111111111111111111111111111111111";
    constant ap_const_lv64_FFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000111111111111111111111111111111111111";
    constant ap_const_lv64_1FFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000001111111111111111111111111111111111111";
    constant ap_const_lv64_3FFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000011111111111111111111111111111111111111";
    constant ap_const_lv64_7FFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000111111111111111111111111111111111111111";
    constant ap_const_lv64_FFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000001111111111111111111111111111111111111111";
    constant ap_const_lv64_1FFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000011111111111111111111111111111111111111111";
    constant ap_const_lv64_3FFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000111111111111111111111111111111111111111111";
    constant ap_const_lv64_7FFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000001111111111111111111111111111111111111111111";
    constant ap_const_lv64_FFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000011111111111111111111111111111111111111111111";
    constant ap_const_lv64_1FFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000111111111111111111111111111111111111111111111";
    constant ap_const_lv64_3FFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000001111111111111111111111111111111111111111111111";
    constant ap_const_lv64_7FFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000011111111111111111111111111111111111111111111111";
    constant ap_const_lv64_FFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000111111111111111111111111111111111111111111111111";
    constant ap_const_lv64_1FFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000001111111111111111111111111111111111111111111111111";
    constant ap_const_lv64_3FFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000011111111111111111111111111111111111111111111111111";
    constant ap_const_lv64_7FFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000111111111111111111111111111111111111111111111111111";
    constant ap_const_lv64_FFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000001111111111111111111111111111111111111111111111111111";
    constant ap_const_lv64_1FFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000011111111111111111111111111111111111111111111111111111";
    constant ap_const_lv64_3FFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv64_7FFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000001111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv64_FFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000011111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv64_1FFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv64_3FFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000001111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv64_7FFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000011111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv64_FFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv64_1FFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0001111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv64_3FFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0011111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv64_7FFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0111111111111111111111111111111111111111111111111111111111111111";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal gap_state_load_load_fu_353_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_nbreadreq_fu_294_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_nbreadreq_fu_302_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op111_read_state1 : BOOLEAN;
    signal ap_predicate_op119_read_state1 : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal dataOut_V_data_V_1_ack_in : STD_LOGIC;
    signal gap_state_load_reg_1357 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_state2_io : BOOLEAN;
    signal dataOut_V_data_V_1_ack_out : STD_LOGIC;
    signal dataOut_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal dataOut_V_keep_V_1_ack_out : STD_LOGIC;
    signal dataOut_V_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal dataOut_V_last_V_1_ack_out : STD_LOGIC;
    signal dataOut_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal gap_state_load_reg_1357_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal dataOut_V_data_V_1_data_in : STD_LOGIC_VECTOR (63 downto 0);
    signal dataOut_V_data_V_1_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal dataOut_V_data_V_1_vld_in : STD_LOGIC;
    signal dataOut_V_data_V_1_vld_out : STD_LOGIC;
    signal dataOut_V_data_V_1_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal dataOut_V_data_V_1_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal dataOut_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal dataOut_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal dataOut_V_data_V_1_sel : STD_LOGIC;
    signal dataOut_V_data_V_1_load_A : STD_LOGIC;
    signal dataOut_V_data_V_1_load_B : STD_LOGIC;
    signal dataOut_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal dataOut_V_keep_V_1_data_in : STD_LOGIC_VECTOR (7 downto 0);
    signal dataOut_V_keep_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal dataOut_V_keep_V_1_vld_in : STD_LOGIC;
    signal dataOut_V_keep_V_1_vld_out : STD_LOGIC;
    signal dataOut_V_keep_V_1_ack_in : STD_LOGIC;
    signal dataOut_V_keep_V_1_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal dataOut_V_keep_V_1_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal dataOut_V_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal dataOut_V_keep_V_1_sel_wr : STD_LOGIC := '0';
    signal dataOut_V_keep_V_1_sel : STD_LOGIC;
    signal dataOut_V_keep_V_1_load_A : STD_LOGIC;
    signal dataOut_V_keep_V_1_load_B : STD_LOGIC;
    signal dataOut_V_keep_V_1_state_cmp_full : STD_LOGIC;
    signal dataOut_V_last_V_1_data_in : STD_LOGIC_VECTOR (0 downto 0);
    signal dataOut_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal dataOut_V_last_V_1_vld_in : STD_LOGIC;
    signal dataOut_V_last_V_1_vld_out : STD_LOGIC;
    signal dataOut_V_last_V_1_ack_in : STD_LOGIC;
    signal dataOut_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal dataOut_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal dataOut_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal dataOut_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal dataOut_V_last_V_1_sel : STD_LOGIC;
    signal dataOut_V_last_V_1_load_A : STD_LOGIC;
    signal dataOut_V_last_V_1_load_B : STD_LOGIC;
    signal dataOut_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal gap_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal header_idx_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal header_header_V_1 : STD_LOGIC_VECTOR (335 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000110000000000000100000000001000000000000011000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal remainingLength_V : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal m_axis_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal arpReplyMetaFifo_V_blk_n : STD_LOGIC;
    signal arpRequestMetaFifo_V_blk_n : STD_LOGIC;
    signal icmp_ln76_1_fu_388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_1_reg_1361 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln647_10_fu_470_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln647_10_reg_1366 : STD_LOGIC_VECTOR (8 downto 0);
    signal lshr_ln647_4_fu_480_p2 : STD_LOGIC_VECTOR (335 downto 0);
    signal lshr_ln647_4_reg_1371 : STD_LOGIC_VECTOR (335 downto 0);
    signal sub_ln647_13_fu_558_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln647_13_reg_1376 : STD_LOGIC_VECTOR (8 downto 0);
    signal lshr_ln647_6_fu_568_p2 : STD_LOGIC_VECTOR (335 downto 0);
    signal lshr_ln647_6_reg_1381 : STD_LOGIC_VECTOR (335 downto 0);
    signal and_ln82_1_fu_580_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln82_1_reg_1386 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_fu_640_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_reg_1391 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln647_3_fu_722_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln647_3_reg_1396 : STD_LOGIC_VECTOR (8 downto 0);
    signal lshr_ln647_fu_732_p2 : STD_LOGIC_VECTOR (335 downto 0);
    signal lshr_ln647_reg_1401 : STD_LOGIC_VECTOR (335 downto 0);
    signal sub_ln647_6_fu_876_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln647_6_reg_1406 : STD_LOGIC_VECTOR (8 downto 0);
    signal lshr_ln647_2_fu_886_p2 : STD_LOGIC_VECTOR (335 downto 0);
    signal lshr_ln647_2_reg_1411 : STD_LOGIC_VECTOR (335 downto 0);
    signal and_ln82_fu_906_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln82_reg_1416 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_fu_958_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sendWord_data_V_2_fu_1147_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal sendWord_keep_V_fu_1297_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sendWord_data_V_fu_1349_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal select_ln82_3_fu_594_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln82_1_fu_928_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_11_fu_1014_p5 : STD_LOGIC_VECTOR (335 downto 0);
    signal p_Result_s_fu_1082_p5 : STD_LOGIC_VECTOR (335 downto 0);
    signal select_ln82_fu_912_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal Lo_assign_1_fu_370_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln76_1_fu_378_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln76_1_fu_382_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln78_1_fu_394_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal trunc_ln76_3_fu_366_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_13_fu_406_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln647_1_fu_414_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln647_2_fu_400_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln647_7_fu_428_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln647_9_fu_440_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_14_fu_418_p4 : STD_LOGIC_VECTOR (335 downto 0);
    signal sub_ln647_8_fu_434_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln647_6_fu_446_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln647_8_fu_462_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln647_7_fu_454_p3 : STD_LOGIC_VECTOR (335 downto 0);
    signal zext_ln647_4_fu_476_p1 : STD_LOGIC_VECTOR (335 downto 0);
    signal trunc_ln76_2_fu_362_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_15_fu_498_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln647_3_fu_492_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln647_1_fu_516_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln647_12_fu_528_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_16_fu_506_p4 : STD_LOGIC_VECTOR (335 downto 0);
    signal sub_ln647_11_fu_522_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln647_9_fu_534_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln647_11_fu_550_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln647_10_fu_542_p3 : STD_LOGIC_VECTOR (335 downto 0);
    signal zext_ln647_6_fu_564_p1 : STD_LOGIC_VECTOR (335 downto 0);
    signal icmp_ln82_1_fu_486_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln76_1_fu_574_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_342_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln76_3_fu_586_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal Lo_assign_fu_622_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln76_fu_630_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln76_fu_634_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln78_fu_646_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal trunc_ln76_1_fu_618_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_7_fu_658_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln647_fu_666_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln647_fu_652_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln647_fu_680_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln647_2_fu_692_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_8_fu_670_p4 : STD_LOGIC_VECTOR (335 downto 0);
    signal sub_ln647_1_fu_686_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln647_fu_698_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln647_2_fu_714_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln647_1_fu_706_p3 : STD_LOGIC_VECTOR (335 downto 0);
    signal zext_ln647_fu_728_p1 : STD_LOGIC_VECTOR (335 downto 0);
    signal shl_ln_fu_738_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln80_fu_746_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal sub_ln80_fu_750_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal sub_ln80_1_fu_764_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln80_1_fu_770_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_756_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln80_2_fu_780_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln80_2_fu_786_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln76_fu_614_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_10_fu_816_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln647_1_fu_810_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln647_fu_834_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln647_5_fu_846_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_11_fu_824_p4 : STD_LOGIC_VECTOR (335 downto 0);
    signal sub_ln647_4_fu_840_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln647_3_fu_852_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln647_5_fu_868_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln647_4_fu_860_p3 : STD_LOGIC_VECTOR (335 downto 0);
    signal zext_ln647_2_fu_882_p1 : STD_LOGIC_VECTOR (335 downto 0);
    signal select_ln80_fu_796_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln82_fu_804_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln76_fu_900_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln76_fu_892_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln76_1_fu_920_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_fu_948_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_Result_14_fu_976_p5 : STD_LOGIC_VECTOR (335 downto 0);
    signal p_Result_15_fu_988_p5 : STD_LOGIC_VECTOR (335 downto 0);
    signal tmp_6_fu_1000_p6 : STD_LOGIC_VECTOR (175 downto 0);
    signal trunc_ln321_fu_1032_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal p_Result_12_fu_1036_p5 : STD_LOGIC_VECTOR (335 downto 0);
    signal tmp_4_fu_1060_p4 : STD_LOGIC_VECTOR (79 downto 0);
    signal p_Result_13_fu_1048_p5 : STD_LOGIC_VECTOR (335 downto 0);
    signal tmp_5_fu_1070_p5 : STD_LOGIC_VECTOR (175 downto 0);
    signal zext_ln647_5_fu_1100_p1 : STD_LOGIC_VECTOR (335 downto 0);
    signal lshr_ln647_5_fu_1103_p2 : STD_LOGIC_VECTOR (335 downto 0);
    signal p_Result_18_fu_1109_p2 : STD_LOGIC_VECTOR (335 downto 0);
    signal zext_ln647_7_fu_1118_p1 : STD_LOGIC_VECTOR (335 downto 0);
    signal lshr_ln647_7_fu_1121_p2 : STD_LOGIC_VECTOR (335 downto 0);
    signal p_Result_19_fu_1127_p2 : STD_LOGIC_VECTOR (335 downto 0);
    signal trunc_ln215_1_fu_1132_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln364_1_fu_1114_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_6_fu_1136_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln76_4_fu_1140_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal agg_result_V_i_i_fu_1163_p65 : STD_LOGIC_VECTOR (5 downto 0);
    signal agg_result_V_i_i_fu_1163_p66 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln647_1_fu_1302_p1 : STD_LOGIC_VECTOR (335 downto 0);
    signal lshr_ln647_1_fu_1305_p2 : STD_LOGIC_VECTOR (335 downto 0);
    signal p_Result_16_fu_1311_p2 : STD_LOGIC_VECTOR (335 downto 0);
    signal zext_ln647_3_fu_1320_p1 : STD_LOGIC_VECTOR (335 downto 0);
    signal lshr_ln647_3_fu_1323_p2 : STD_LOGIC_VECTOR (335 downto 0);
    signal p_Result_17_fu_1329_p2 : STD_LOGIC_VECTOR (335 downto 0);
    signal trunc_ln215_fu_1334_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln364_fu_1316_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_3_fu_1338_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln76_2_fu_1342_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_418 : BOOLEAN;
    signal ap_condition_384 : BOOLEAN;
    signal ap_condition_136 : BOOLEAN;

    component arp_server_subnet_top_mux_646_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        din26_WIDTH : INTEGER;
        din27_WIDTH : INTEGER;
        din28_WIDTH : INTEGER;
        din29_WIDTH : INTEGER;
        din30_WIDTH : INTEGER;
        din31_WIDTH : INTEGER;
        din32_WIDTH : INTEGER;
        din33_WIDTH : INTEGER;
        din34_WIDTH : INTEGER;
        din35_WIDTH : INTEGER;
        din36_WIDTH : INTEGER;
        din37_WIDTH : INTEGER;
        din38_WIDTH : INTEGER;
        din39_WIDTH : INTEGER;
        din40_WIDTH : INTEGER;
        din41_WIDTH : INTEGER;
        din42_WIDTH : INTEGER;
        din43_WIDTH : INTEGER;
        din44_WIDTH : INTEGER;
        din45_WIDTH : INTEGER;
        din46_WIDTH : INTEGER;
        din47_WIDTH : INTEGER;
        din48_WIDTH : INTEGER;
        din49_WIDTH : INTEGER;
        din50_WIDTH : INTEGER;
        din51_WIDTH : INTEGER;
        din52_WIDTH : INTEGER;
        din53_WIDTH : INTEGER;
        din54_WIDTH : INTEGER;
        din55_WIDTH : INTEGER;
        din56_WIDTH : INTEGER;
        din57_WIDTH : INTEGER;
        din58_WIDTH : INTEGER;
        din59_WIDTH : INTEGER;
        din60_WIDTH : INTEGER;
        din61_WIDTH : INTEGER;
        din62_WIDTH : INTEGER;
        din63_WIDTH : INTEGER;
        din64_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        din2 : IN STD_LOGIC_VECTOR (63 downto 0);
        din3 : IN STD_LOGIC_VECTOR (63 downto 0);
        din4 : IN STD_LOGIC_VECTOR (63 downto 0);
        din5 : IN STD_LOGIC_VECTOR (63 downto 0);
        din6 : IN STD_LOGIC_VECTOR (63 downto 0);
        din7 : IN STD_LOGIC_VECTOR (63 downto 0);
        din8 : IN STD_LOGIC_VECTOR (63 downto 0);
        din9 : IN STD_LOGIC_VECTOR (63 downto 0);
        din10 : IN STD_LOGIC_VECTOR (63 downto 0);
        din11 : IN STD_LOGIC_VECTOR (63 downto 0);
        din12 : IN STD_LOGIC_VECTOR (63 downto 0);
        din13 : IN STD_LOGIC_VECTOR (63 downto 0);
        din14 : IN STD_LOGIC_VECTOR (63 downto 0);
        din15 : IN STD_LOGIC_VECTOR (63 downto 0);
        din16 : IN STD_LOGIC_VECTOR (63 downto 0);
        din17 : IN STD_LOGIC_VECTOR (63 downto 0);
        din18 : IN STD_LOGIC_VECTOR (63 downto 0);
        din19 : IN STD_LOGIC_VECTOR (63 downto 0);
        din20 : IN STD_LOGIC_VECTOR (63 downto 0);
        din21 : IN STD_LOGIC_VECTOR (63 downto 0);
        din22 : IN STD_LOGIC_VECTOR (63 downto 0);
        din23 : IN STD_LOGIC_VECTOR (63 downto 0);
        din24 : IN STD_LOGIC_VECTOR (63 downto 0);
        din25 : IN STD_LOGIC_VECTOR (63 downto 0);
        din26 : IN STD_LOGIC_VECTOR (63 downto 0);
        din27 : IN STD_LOGIC_VECTOR (63 downto 0);
        din28 : IN STD_LOGIC_VECTOR (63 downto 0);
        din29 : IN STD_LOGIC_VECTOR (63 downto 0);
        din30 : IN STD_LOGIC_VECTOR (63 downto 0);
        din31 : IN STD_LOGIC_VECTOR (63 downto 0);
        din32 : IN STD_LOGIC_VECTOR (63 downto 0);
        din33 : IN STD_LOGIC_VECTOR (63 downto 0);
        din34 : IN STD_LOGIC_VECTOR (63 downto 0);
        din35 : IN STD_LOGIC_VECTOR (63 downto 0);
        din36 : IN STD_LOGIC_VECTOR (63 downto 0);
        din37 : IN STD_LOGIC_VECTOR (63 downto 0);
        din38 : IN STD_LOGIC_VECTOR (63 downto 0);
        din39 : IN STD_LOGIC_VECTOR (63 downto 0);
        din40 : IN STD_LOGIC_VECTOR (63 downto 0);
        din41 : IN STD_LOGIC_VECTOR (63 downto 0);
        din42 : IN STD_LOGIC_VECTOR (63 downto 0);
        din43 : IN STD_LOGIC_VECTOR (63 downto 0);
        din44 : IN STD_LOGIC_VECTOR (63 downto 0);
        din45 : IN STD_LOGIC_VECTOR (63 downto 0);
        din46 : IN STD_LOGIC_VECTOR (63 downto 0);
        din47 : IN STD_LOGIC_VECTOR (63 downto 0);
        din48 : IN STD_LOGIC_VECTOR (63 downto 0);
        din49 : IN STD_LOGIC_VECTOR (63 downto 0);
        din50 : IN STD_LOGIC_VECTOR (63 downto 0);
        din51 : IN STD_LOGIC_VECTOR (63 downto 0);
        din52 : IN STD_LOGIC_VECTOR (63 downto 0);
        din53 : IN STD_LOGIC_VECTOR (63 downto 0);
        din54 : IN STD_LOGIC_VECTOR (63 downto 0);
        din55 : IN STD_LOGIC_VECTOR (63 downto 0);
        din56 : IN STD_LOGIC_VECTOR (63 downto 0);
        din57 : IN STD_LOGIC_VECTOR (63 downto 0);
        din58 : IN STD_LOGIC_VECTOR (63 downto 0);
        din59 : IN STD_LOGIC_VECTOR (63 downto 0);
        din60 : IN STD_LOGIC_VECTOR (63 downto 0);
        din61 : IN STD_LOGIC_VECTOR (63 downto 0);
        din62 : IN STD_LOGIC_VECTOR (63 downto 0);
        din63 : IN STD_LOGIC_VECTOR (63 downto 0);
        din64 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    arp_server_subnet_top_mux_646_64_1_1_U9 : component arp_server_subnet_top_mux_646_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 64,
        din10_WIDTH => 64,
        din11_WIDTH => 64,
        din12_WIDTH => 64,
        din13_WIDTH => 64,
        din14_WIDTH => 64,
        din15_WIDTH => 64,
        din16_WIDTH => 64,
        din17_WIDTH => 64,
        din18_WIDTH => 64,
        din19_WIDTH => 64,
        din20_WIDTH => 64,
        din21_WIDTH => 64,
        din22_WIDTH => 64,
        din23_WIDTH => 64,
        din24_WIDTH => 64,
        din25_WIDTH => 64,
        din26_WIDTH => 64,
        din27_WIDTH => 64,
        din28_WIDTH => 64,
        din29_WIDTH => 64,
        din30_WIDTH => 64,
        din31_WIDTH => 64,
        din32_WIDTH => 64,
        din33_WIDTH => 64,
        din34_WIDTH => 64,
        din35_WIDTH => 64,
        din36_WIDTH => 64,
        din37_WIDTH => 64,
        din38_WIDTH => 64,
        din39_WIDTH => 64,
        din40_WIDTH => 64,
        din41_WIDTH => 64,
        din42_WIDTH => 64,
        din43_WIDTH => 64,
        din44_WIDTH => 64,
        din45_WIDTH => 64,
        din46_WIDTH => 64,
        din47_WIDTH => 64,
        din48_WIDTH => 64,
        din49_WIDTH => 64,
        din50_WIDTH => 64,
        din51_WIDTH => 64,
        din52_WIDTH => 64,
        din53_WIDTH => 64,
        din54_WIDTH => 64,
        din55_WIDTH => 64,
        din56_WIDTH => 64,
        din57_WIDTH => 64,
        din58_WIDTH => 64,
        din59_WIDTH => 64,
        din60_WIDTH => 64,
        din61_WIDTH => 64,
        din62_WIDTH => 64,
        din63_WIDTH => 64,
        din64_WIDTH => 6,
        dout_WIDTH => 64)
    port map (
        din0 => ap_const_lv64_FFFFFFFFFFFFFFFF,
        din1 => ap_const_lv64_1,
        din2 => ap_const_lv64_3,
        din3 => ap_const_lv64_7,
        din4 => ap_const_lv64_F,
        din5 => ap_const_lv64_1F,
        din6 => ap_const_lv64_3F,
        din7 => ap_const_lv64_7F,
        din8 => ap_const_lv64_FF,
        din9 => ap_const_lv64_1FF,
        din10 => ap_const_lv64_3FF,
        din11 => ap_const_lv64_7FF,
        din12 => ap_const_lv64_FFF,
        din13 => ap_const_lv64_1FFF,
        din14 => ap_const_lv64_3FFF,
        din15 => ap_const_lv64_7FFF,
        din16 => ap_const_lv64_FFFF,
        din17 => ap_const_lv64_1FFFF,
        din18 => ap_const_lv64_3FFFF,
        din19 => ap_const_lv64_7FFFF,
        din20 => ap_const_lv64_FFFFF,
        din21 => ap_const_lv64_1FFFFF,
        din22 => ap_const_lv64_3FFFFF,
        din23 => ap_const_lv64_7FFFFF,
        din24 => ap_const_lv64_FFFFFF,
        din25 => ap_const_lv64_1FFFFFF,
        din26 => ap_const_lv64_3FFFFFF,
        din27 => ap_const_lv64_7FFFFFF,
        din28 => ap_const_lv64_FFFFFFF,
        din29 => ap_const_lv64_1FFFFFFF,
        din30 => ap_const_lv64_3FFFFFFF,
        din31 => ap_const_lv64_7FFFFFFF,
        din32 => ap_const_lv64_FFFFFFFF,
        din33 => ap_const_lv64_1FFFFFFFF,
        din34 => ap_const_lv64_3FFFFFFFF,
        din35 => ap_const_lv64_7FFFFFFFF,
        din36 => ap_const_lv64_FFFFFFFFF,
        din37 => ap_const_lv64_1FFFFFFFFF,
        din38 => ap_const_lv64_3FFFFFFFFF,
        din39 => ap_const_lv64_7FFFFFFFFF,
        din40 => ap_const_lv64_FFFFFFFFFF,
        din41 => ap_const_lv64_1FFFFFFFFFF,
        din42 => ap_const_lv64_3FFFFFFFFFF,
        din43 => ap_const_lv64_7FFFFFFFFFF,
        din44 => ap_const_lv64_FFFFFFFFFFF,
        din45 => ap_const_lv64_1FFFFFFFFFFF,
        din46 => ap_const_lv64_3FFFFFFFFFFF,
        din47 => ap_const_lv64_7FFFFFFFFFFF,
        din48 => ap_const_lv64_FFFFFFFFFFFF,
        din49 => ap_const_lv64_1FFFFFFFFFFFF,
        din50 => ap_const_lv64_3FFFFFFFFFFFF,
        din51 => ap_const_lv64_7FFFFFFFFFFFF,
        din52 => ap_const_lv64_FFFFFFFFFFFFF,
        din53 => ap_const_lv64_1FFFFFFFFFFFFF,
        din54 => ap_const_lv64_3FFFFFFFFFFFFF,
        din55 => ap_const_lv64_7FFFFFFFFFFFFF,
        din56 => ap_const_lv64_FFFFFFFFFFFFFF,
        din57 => ap_const_lv64_1FFFFFFFFFFFFFF,
        din58 => ap_const_lv64_3FFFFFFFFFFFFFF,
        din59 => ap_const_lv64_7FFFFFFFFFFFFFF,
        din60 => ap_const_lv64_FFFFFFFFFFFFFFF,
        din61 => ap_const_lv64_1FFFFFFFFFFFFFFF,
        din62 => ap_const_lv64_3FFFFFFFFFFFFFFF,
        din63 => ap_const_lv64_7FFFFFFFFFFFFFFF,
        din64 => agg_result_V_i_i_fu_1163_p65,
        dout => agg_result_V_i_i_fu_1163_p66);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    dataOut_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                dataOut_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((dataOut_V_data_V_1_ack_out = ap_const_logic_1) and (dataOut_V_data_V_1_vld_out = ap_const_logic_1))) then 
                                        dataOut_V_data_V_1_sel_rd <= not(dataOut_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    dataOut_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                dataOut_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((dataOut_V_data_V_1_ack_in = ap_const_logic_1) and (dataOut_V_data_V_1_vld_in = ap_const_logic_1))) then 
                                        dataOut_V_data_V_1_sel_wr <= not(dataOut_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    dataOut_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                dataOut_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((dataOut_V_data_V_1_state = ap_const_lv2_3) and (dataOut_V_data_V_1_vld_in = ap_const_logic_0) and (dataOut_V_data_V_1_ack_out = ap_const_logic_1)) or ((dataOut_V_data_V_1_state = ap_const_lv2_2) and (dataOut_V_data_V_1_vld_in = ap_const_logic_0)))) then 
                    dataOut_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((dataOut_V_data_V_1_state = ap_const_lv2_1) and (m_axis_TREADY = ap_const_logic_0)) or ((dataOut_V_data_V_1_state = ap_const_lv2_3) and (m_axis_TREADY = ap_const_logic_0) and (dataOut_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    dataOut_V_data_V_1_state <= ap_const_lv2_1;
                elsif ((((dataOut_V_data_V_1_state = ap_const_lv2_1) and (dataOut_V_data_V_1_ack_out = ap_const_logic_1)) or (not(((dataOut_V_data_V_1_vld_in = ap_const_logic_0) and (dataOut_V_data_V_1_ack_out = ap_const_logic_1))) and not(((m_axis_TREADY = ap_const_logic_0) and (dataOut_V_data_V_1_vld_in = ap_const_logic_1))) and (dataOut_V_data_V_1_state = ap_const_lv2_3)) or ((dataOut_V_data_V_1_state = ap_const_lv2_2) and (dataOut_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    dataOut_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    dataOut_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    dataOut_V_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                dataOut_V_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((dataOut_V_keep_V_1_ack_out = ap_const_logic_1) and (dataOut_V_keep_V_1_vld_out = ap_const_logic_1))) then 
                                        dataOut_V_keep_V_1_sel_rd <= not(dataOut_V_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    dataOut_V_keep_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                dataOut_V_keep_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((dataOut_V_keep_V_1_ack_in = ap_const_logic_1) and (dataOut_V_keep_V_1_vld_in = ap_const_logic_1))) then 
                                        dataOut_V_keep_V_1_sel_wr <= not(dataOut_V_keep_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    dataOut_V_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                dataOut_V_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((dataOut_V_keep_V_1_state = ap_const_lv2_3) and (dataOut_V_keep_V_1_vld_in = ap_const_logic_0) and (dataOut_V_keep_V_1_ack_out = ap_const_logic_1)) or ((dataOut_V_keep_V_1_state = ap_const_lv2_2) and (dataOut_V_keep_V_1_vld_in = ap_const_logic_0)))) then 
                    dataOut_V_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((dataOut_V_keep_V_1_state = ap_const_lv2_1) and (m_axis_TREADY = ap_const_logic_0)) or ((dataOut_V_keep_V_1_state = ap_const_lv2_3) and (m_axis_TREADY = ap_const_logic_0) and (dataOut_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    dataOut_V_keep_V_1_state <= ap_const_lv2_1;
                elsif ((((dataOut_V_keep_V_1_state = ap_const_lv2_1) and (dataOut_V_keep_V_1_ack_out = ap_const_logic_1)) or (not(((dataOut_V_keep_V_1_vld_in = ap_const_logic_0) and (dataOut_V_keep_V_1_ack_out = ap_const_logic_1))) and not(((m_axis_TREADY = ap_const_logic_0) and (dataOut_V_keep_V_1_vld_in = ap_const_logic_1))) and (dataOut_V_keep_V_1_state = ap_const_lv2_3)) or ((dataOut_V_keep_V_1_state = ap_const_lv2_2) and (dataOut_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    dataOut_V_keep_V_1_state <= ap_const_lv2_3;
                else 
                    dataOut_V_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    dataOut_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                dataOut_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((dataOut_V_last_V_1_vld_out = ap_const_logic_1) and (dataOut_V_last_V_1_ack_out = ap_const_logic_1))) then 
                                        dataOut_V_last_V_1_sel_rd <= not(dataOut_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    dataOut_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                dataOut_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((dataOut_V_last_V_1_ack_in = ap_const_logic_1) and (dataOut_V_last_V_1_vld_in = ap_const_logic_1))) then 
                                        dataOut_V_last_V_1_sel_wr <= not(dataOut_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    dataOut_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                dataOut_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((dataOut_V_last_V_1_state = ap_const_lv2_3) and (dataOut_V_last_V_1_vld_in = ap_const_logic_0) and (dataOut_V_last_V_1_ack_out = ap_const_logic_1)) or ((dataOut_V_last_V_1_state = ap_const_lv2_2) and (dataOut_V_last_V_1_vld_in = ap_const_logic_0)))) then 
                    dataOut_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((dataOut_V_last_V_1_state = ap_const_lv2_1) and (m_axis_TREADY = ap_const_logic_0)) or ((dataOut_V_last_V_1_state = ap_const_lv2_3) and (m_axis_TREADY = ap_const_logic_0) and (dataOut_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    dataOut_V_last_V_1_state <= ap_const_lv2_1;
                elsif ((((dataOut_V_last_V_1_state = ap_const_lv2_1) and (dataOut_V_last_V_1_ack_out = ap_const_logic_1)) or (not(((dataOut_V_last_V_1_vld_in = ap_const_logic_0) and (dataOut_V_last_V_1_ack_out = ap_const_logic_1))) and not(((m_axis_TREADY = ap_const_logic_0) and (dataOut_V_last_V_1_vld_in = ap_const_logic_1))) and (dataOut_V_last_V_1_state = ap_const_lv2_3)) or ((dataOut_V_last_V_1_state = ap_const_lv2_2) and (dataOut_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    dataOut_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    dataOut_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    gap_state_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((tmp_nbreadreq_fu_294_p3 = ap_const_lv1_1) and (gap_state = ap_const_lv2_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((tmp_3_nbreadreq_fu_302_p3 = ap_const_lv1_1) and (tmp_nbreadreq_fu_294_p3 = ap_const_lv1_0) and (gap_state = ap_const_lv2_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
                gap_state <= ap_const_lv2_1;
            elsif (((icmp_ln887_fu_958_p2 = ap_const_lv1_1) and (gap_state_load_load_fu_353_p1 = ap_const_lv2_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                gap_state <= ap_const_lv2_2;
            elsif (((gap_state_load_load_fu_353_p1 = ap_const_lv2_2) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                gap_state <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    header_header_V_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_384)) then
                if ((tmp_nbreadreq_fu_294_p3 = ap_const_lv1_1)) then 
                    header_header_V_1 <= p_Result_s_fu_1082_p5;
                elsif (((tmp_3_nbreadreq_fu_302_p3 = ap_const_lv1_1) and (tmp_nbreadreq_fu_294_p3 = ap_const_lv1_0))) then 
                    header_header_V_1 <= p_Result_11_fu_1014_p5;
                end if;
            end if; 
        end if;
    end process;

    header_idx_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_136)) then
                if ((gap_state = ap_const_lv2_0)) then 
                    header_idx_1 <= ap_const_lv16_0;
                elsif ((gap_state_load_load_fu_353_p1 = ap_const_lv2_1)) then 
                    header_idx_1 <= select_ln82_1_fu_928_p3;
                elsif ((gap_state_load_load_fu_353_p1 = ap_const_lv2_2)) then 
                    header_idx_1 <= select_ln82_3_fu_594_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((gap_state_load_load_fu_353_p1 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln82_1_reg_1386 <= and_ln82_1_fu_580_p2;
                icmp_ln76_1_reg_1361 <= icmp_ln76_1_fu_388_p2;
                lshr_ln647_4_reg_1371 <= lshr_ln647_4_fu_480_p2;
                lshr_ln647_6_reg_1381 <= lshr_ln647_6_fu_568_p2;
                    sub_ln647_10_reg_1366(8 downto 1) <= sub_ln647_10_fu_470_p2(8 downto 1);
                    sub_ln647_13_reg_1376(8 downto 1) <= sub_ln647_13_fu_558_p2(8 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((gap_state_load_load_fu_353_p1 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln82_reg_1416 <= and_ln82_fu_906_p2;
                icmp_ln76_reg_1391 <= icmp_ln76_fu_640_p2;
                lshr_ln647_2_reg_1411 <= lshr_ln647_2_fu_886_p2;
                lshr_ln647_reg_1401 <= lshr_ln647_fu_732_p2;
                    sub_ln647_3_reg_1396(8 downto 1) <= sub_ln647_3_fu_722_p2(8 downto 1);
                    sub_ln647_6_reg_1406(8 downto 1) <= sub_ln647_6_fu_876_p2(8 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((dataOut_V_data_V_1_load_A = ap_const_logic_1)) then
                dataOut_V_data_V_1_payload_A <= dataOut_V_data_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((dataOut_V_data_V_1_load_B = ap_const_logic_1)) then
                dataOut_V_data_V_1_payload_B <= dataOut_V_data_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((dataOut_V_keep_V_1_load_A = ap_const_logic_1)) then
                dataOut_V_keep_V_1_payload_A <= dataOut_V_keep_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((dataOut_V_keep_V_1_load_B = ap_const_logic_1)) then
                dataOut_V_keep_V_1_payload_B <= dataOut_V_keep_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((dataOut_V_last_V_1_load_A = ap_const_logic_1)) then
                dataOut_V_last_V_1_payload_A <= dataOut_V_last_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((dataOut_V_last_V_1_load_B = ap_const_logic_1)) then
                dataOut_V_last_V_1_payload_B <= dataOut_V_last_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                gap_state_load_reg_1357 <= gap_state;
                gap_state_load_reg_1357_pp0_iter1_reg <= gap_state_load_reg_1357;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((gap_state_load_load_fu_353_p1 = ap_const_lv2_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    remainingLength_V(1) <= select_ln82_fu_912_p3(1);    remainingLength_V(7 downto 3) <= select_ln82_fu_912_p3(7 downto 3);
            end if;
        end if;
    end process;
    remainingLength_V(0) <= '0';
    remainingLength_V(2) <= '0';
    sub_ln647_10_reg_1366(0) <= '0';
    sub_ln647_13_reg_1376(0) <= '0';
    sub_ln647_3_reg_1396(0) <= '0';
    sub_ln647_6_reg_1406(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    Lo_assign_1_fu_370_p3 <= (header_idx_1 & ap_const_lv6_0);
    Lo_assign_fu_622_p3 <= (header_idx_1 & ap_const_lv6_0);
    add_ln647_1_fu_516_p2 <= std_logic_vector(unsigned(tmp_15_fu_498_p3) + unsigned(ap_const_lv9_B1));
    add_ln647_fu_834_p2 <= std_logic_vector(unsigned(tmp_10_fu_816_p3) + unsigned(ap_const_lv9_B1));
    add_ln76_1_fu_382_p2 <= std_logic_vector(unsigned(zext_ln76_1_fu_378_p1) + unsigned(ap_const_lv23_40));
    add_ln76_fu_634_p2 <= std_logic_vector(unsigned(zext_ln76_fu_630_p1) + unsigned(ap_const_lv23_40));
    agg_result_V_i_i_fu_1163_p65 <= remainingLength_V(6 - 1 downto 0);
    and_ln82_1_fu_580_p2 <= (xor_ln76_1_fu_574_p2 and icmp_ln82_1_fu_486_p2);
    and_ln82_fu_906_p2 <= (xor_ln76_fu_900_p2 and icmp_ln82_fu_804_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, ap_done_reg, ap_enable_reg_pp0_iter2, arpRequestMetaFifo_V_empty_n, ap_predicate_op111_read_state1, arpReplyMetaFifo_V_empty_n, ap_predicate_op119_read_state1, m_axis_TREADY, dataOut_V_data_V_1_state, dataOut_V_keep_V_1_state, dataOut_V_last_V_1_state)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((arpReplyMetaFifo_V_empty_n = ap_const_logic_0) and (ap_predicate_op119_read_state1 = ap_const_boolean_1)) or ((arpRequestMetaFifo_V_empty_n = ap_const_logic_0) and (ap_predicate_op111_read_state1 = ap_const_boolean_1)))) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((dataOut_V_data_V_1_state = ap_const_lv2_1) or (dataOut_V_last_V_1_state = ap_const_lv2_1) or (dataOut_V_keep_V_1_state = ap_const_lv2_1) or ((dataOut_V_data_V_1_state = ap_const_lv2_3) and (m_axis_TREADY = ap_const_logic_0)) or ((dataOut_V_last_V_1_state = ap_const_lv2_3) and (m_axis_TREADY = ap_const_logic_0)) or ((dataOut_V_keep_V_1_state = ap_const_lv2_3) and (m_axis_TREADY = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_done_reg, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, arpRequestMetaFifo_V_empty_n, ap_predicate_op111_read_state1, arpReplyMetaFifo_V_empty_n, ap_predicate_op119_read_state1, m_axis_TREADY, ap_block_state2_io, dataOut_V_data_V_1_state, dataOut_V_keep_V_1_state, dataOut_V_last_V_1_state, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_io)) or ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((arpReplyMetaFifo_V_empty_n = ap_const_logic_0) and (ap_predicate_op119_read_state1 = ap_const_boolean_1)) or ((arpRequestMetaFifo_V_empty_n = ap_const_logic_0) and (ap_predicate_op111_read_state1 = ap_const_boolean_1)))) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((dataOut_V_data_V_1_state = ap_const_lv2_1) or (dataOut_V_last_V_1_state = ap_const_lv2_1) or (dataOut_V_keep_V_1_state = ap_const_lv2_1) or (ap_const_boolean_1 = ap_block_state3_io) or ((dataOut_V_data_V_1_state = ap_const_lv2_3) and (m_axis_TREADY = ap_const_logic_0)) or ((dataOut_V_last_V_1_state = ap_const_lv2_3) and (m_axis_TREADY = ap_const_logic_0)) or ((dataOut_V_keep_V_1_state = ap_const_lv2_3) and (m_axis_TREADY = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_done_reg, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, arpRequestMetaFifo_V_empty_n, ap_predicate_op111_read_state1, arpReplyMetaFifo_V_empty_n, ap_predicate_op119_read_state1, m_axis_TREADY, ap_block_state2_io, dataOut_V_data_V_1_state, dataOut_V_keep_V_1_state, dataOut_V_last_V_1_state, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_io)) or ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((arpReplyMetaFifo_V_empty_n = ap_const_logic_0) and (ap_predicate_op119_read_state1 = ap_const_boolean_1)) or ((arpRequestMetaFifo_V_empty_n = ap_const_logic_0) and (ap_predicate_op111_read_state1 = ap_const_boolean_1)))) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((dataOut_V_data_V_1_state = ap_const_lv2_1) or (dataOut_V_last_V_1_state = ap_const_lv2_1) or (dataOut_V_keep_V_1_state = ap_const_lv2_1) or (ap_const_boolean_1 = ap_block_state3_io) or ((dataOut_V_data_V_1_state = ap_const_lv2_3) and (m_axis_TREADY = ap_const_logic_0)) or ((dataOut_V_last_V_1_state = ap_const_lv2_3) and (m_axis_TREADY = ap_const_logic_0)) or ((dataOut_V_keep_V_1_state = ap_const_lv2_3) and (m_axis_TREADY = ap_const_logic_0)))));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start, ap_done_reg, arpRequestMetaFifo_V_empty_n, ap_predicate_op111_read_state1, arpReplyMetaFifo_V_empty_n, ap_predicate_op119_read_state1)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((arpReplyMetaFifo_V_empty_n = ap_const_logic_0) and (ap_predicate_op119_read_state1 = ap_const_boolean_1)) or ((arpRequestMetaFifo_V_empty_n = ap_const_logic_0) and (ap_predicate_op111_read_state1 = ap_const_boolean_1)));
    end process;


    ap_block_state2_io_assign_proc : process(dataOut_V_data_V_1_ack_in, gap_state_load_reg_1357)
    begin
                ap_block_state2_io <= (((gap_state_load_reg_1357 = ap_const_lv2_1) and (dataOut_V_data_V_1_ack_in = ap_const_logic_0)) or ((gap_state_load_reg_1357 = ap_const_lv2_2) and (dataOut_V_data_V_1_ack_in = ap_const_logic_0)));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_io_assign_proc : process(dataOut_V_data_V_1_ack_in, gap_state_load_reg_1357_pp0_iter1_reg)
    begin
                ap_block_state3_io <= (((gap_state_load_reg_1357_pp0_iter1_reg = ap_const_lv2_1) and (dataOut_V_data_V_1_ack_in = ap_const_logic_0)) or ((gap_state_load_reg_1357_pp0_iter1_reg = ap_const_lv2_2) and (dataOut_V_data_V_1_ack_in = ap_const_logic_0)));
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(m_axis_TREADY, dataOut_V_data_V_1_state, dataOut_V_keep_V_1_state, dataOut_V_last_V_1_state)
    begin
                ap_block_state3_pp0_stage0_iter2 <= ((dataOut_V_data_V_1_state = ap_const_lv2_1) or (dataOut_V_last_V_1_state = ap_const_lv2_1) or (dataOut_V_keep_V_1_state = ap_const_lv2_1) or ((dataOut_V_data_V_1_state = ap_const_lv2_3) and (m_axis_TREADY = ap_const_logic_0)) or ((dataOut_V_last_V_1_state = ap_const_lv2_3) and (m_axis_TREADY = ap_const_logic_0)) or ((dataOut_V_keep_V_1_state = ap_const_lv2_3) and (m_axis_TREADY = ap_const_logic_0)));
    end process;


    ap_condition_136_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
                ap_condition_136 <= ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_384_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, gap_state)
    begin
                ap_condition_384 <= ((gap_state = ap_const_lv2_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_418_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_01001)
    begin
                ap_condition_418 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op111_read_state1_assign_proc : process(tmp_nbreadreq_fu_294_p3, tmp_3_nbreadreq_fu_302_p3, gap_state)
    begin
                ap_predicate_op111_read_state1 <= ((tmp_3_nbreadreq_fu_302_p3 = ap_const_lv1_1) and (tmp_nbreadreq_fu_294_p3 = ap_const_lv1_0) and (gap_state = ap_const_lv2_0));
    end process;


    ap_predicate_op119_read_state1_assign_proc : process(tmp_nbreadreq_fu_294_p3, gap_state)
    begin
                ap_predicate_op119_read_state1 <= ((tmp_nbreadreq_fu_294_p3 = ap_const_lv1_1) and (gap_state = ap_const_lv2_0));
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to1 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    arpReplyMetaFifo_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_pp0_stage0, arpReplyMetaFifo_V_empty_n, ap_predicate_op119_read_state1, ap_block_pp0_stage0)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op119_read_state1 = ap_const_boolean_1))) then 
            arpReplyMetaFifo_V_blk_n <= arpReplyMetaFifo_V_empty_n;
        else 
            arpReplyMetaFifo_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    arpReplyMetaFifo_V_read_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_predicate_op119_read_state1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op119_read_state1 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            arpReplyMetaFifo_V_read <= ap_const_logic_1;
        else 
            arpReplyMetaFifo_V_read <= ap_const_logic_0;
        end if; 
    end process;


    arpRequestMetaFifo_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_pp0_stage0, arpRequestMetaFifo_V_empty_n, ap_predicate_op111_read_state1, ap_block_pp0_stage0)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op111_read_state1 = ap_const_boolean_1))) then 
            arpRequestMetaFifo_V_blk_n <= arpRequestMetaFifo_V_empty_n;
        else 
            arpRequestMetaFifo_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    arpRequestMetaFifo_V_read_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_predicate_op111_read_state1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op111_read_state1 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            arpRequestMetaFifo_V_read <= ap_const_logic_1;
        else 
            arpRequestMetaFifo_V_read <= ap_const_logic_0;
        end if; 
    end process;

    dataOut_V_data_V_1_ack_in <= dataOut_V_data_V_1_state(1);
    dataOut_V_data_V_1_ack_out <= m_axis_TREADY;

    dataOut_V_data_V_1_data_in_assign_proc : process(gap_state_load_reg_1357, sendWord_data_V_2_fu_1147_p3, sendWord_data_V_fu_1349_p3, ap_condition_418)
    begin
        if ((ap_const_boolean_1 = ap_condition_418)) then
            if ((gap_state_load_reg_1357 = ap_const_lv2_1)) then 
                dataOut_V_data_V_1_data_in <= sendWord_data_V_fu_1349_p3;
            elsif ((gap_state_load_reg_1357 = ap_const_lv2_2)) then 
                dataOut_V_data_V_1_data_in <= sendWord_data_V_2_fu_1147_p3;
            else 
                dataOut_V_data_V_1_data_in <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            dataOut_V_data_V_1_data_in <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dataOut_V_data_V_1_data_out_assign_proc : process(dataOut_V_data_V_1_payload_A, dataOut_V_data_V_1_payload_B, dataOut_V_data_V_1_sel)
    begin
        if ((dataOut_V_data_V_1_sel = ap_const_logic_1)) then 
            dataOut_V_data_V_1_data_out <= dataOut_V_data_V_1_payload_B;
        else 
            dataOut_V_data_V_1_data_out <= dataOut_V_data_V_1_payload_A;
        end if; 
    end process;

    dataOut_V_data_V_1_load_A <= (not(dataOut_V_data_V_1_sel_wr) and dataOut_V_data_V_1_state_cmp_full);
    dataOut_V_data_V_1_load_B <= (dataOut_V_data_V_1_state_cmp_full and dataOut_V_data_V_1_sel_wr);
    dataOut_V_data_V_1_sel <= dataOut_V_data_V_1_sel_rd;
    dataOut_V_data_V_1_state_cmp_full <= '0' when (dataOut_V_data_V_1_state = ap_const_lv2_1) else '1';

    dataOut_V_data_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, gap_state_load_reg_1357, ap_block_pp0_stage0_11001)
    begin
        if ((((gap_state_load_reg_1357 = ap_const_lv2_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((gap_state_load_reg_1357 = ap_const_lv2_2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            dataOut_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            dataOut_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    dataOut_V_data_V_1_vld_out <= dataOut_V_data_V_1_state(0);
    dataOut_V_keep_V_1_ack_in <= dataOut_V_keep_V_1_state(1);
    dataOut_V_keep_V_1_ack_out <= m_axis_TREADY;

    dataOut_V_keep_V_1_data_in_assign_proc : process(gap_state_load_reg_1357, sendWord_keep_V_fu_1297_p1, ap_condition_418)
    begin
        if ((ap_const_boolean_1 = ap_condition_418)) then
            if ((gap_state_load_reg_1357 = ap_const_lv2_1)) then 
                dataOut_V_keep_V_1_data_in <= ap_const_lv8_FF;
            elsif ((gap_state_load_reg_1357 = ap_const_lv2_2)) then 
                dataOut_V_keep_V_1_data_in <= sendWord_keep_V_fu_1297_p1;
            else 
                dataOut_V_keep_V_1_data_in <= "XXXXXXXX";
            end if;
        else 
            dataOut_V_keep_V_1_data_in <= "XXXXXXXX";
        end if; 
    end process;


    dataOut_V_keep_V_1_data_out_assign_proc : process(dataOut_V_keep_V_1_payload_A, dataOut_V_keep_V_1_payload_B, dataOut_V_keep_V_1_sel)
    begin
        if ((dataOut_V_keep_V_1_sel = ap_const_logic_1)) then 
            dataOut_V_keep_V_1_data_out <= dataOut_V_keep_V_1_payload_B;
        else 
            dataOut_V_keep_V_1_data_out <= dataOut_V_keep_V_1_payload_A;
        end if; 
    end process;

    dataOut_V_keep_V_1_load_A <= (not(dataOut_V_keep_V_1_sel_wr) and dataOut_V_keep_V_1_state_cmp_full);
    dataOut_V_keep_V_1_load_B <= (dataOut_V_keep_V_1_state_cmp_full and dataOut_V_keep_V_1_sel_wr);
    dataOut_V_keep_V_1_sel <= dataOut_V_keep_V_1_sel_rd;
    dataOut_V_keep_V_1_state_cmp_full <= '0' when (dataOut_V_keep_V_1_state = ap_const_lv2_1) else '1';

    dataOut_V_keep_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, gap_state_load_reg_1357, ap_block_pp0_stage0_11001)
    begin
        if ((((gap_state_load_reg_1357 = ap_const_lv2_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((gap_state_load_reg_1357 = ap_const_lv2_2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            dataOut_V_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            dataOut_V_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    dataOut_V_keep_V_1_vld_out <= dataOut_V_keep_V_1_state(0);
    dataOut_V_last_V_1_ack_in <= dataOut_V_last_V_1_state(1);
    dataOut_V_last_V_1_ack_out <= m_axis_TREADY;

    dataOut_V_last_V_1_data_in_assign_proc : process(gap_state_load_reg_1357, ap_condition_418)
    begin
        if ((ap_const_boolean_1 = ap_condition_418)) then
            if ((gap_state_load_reg_1357 = ap_const_lv2_1)) then 
                dataOut_V_last_V_1_data_in <= ap_const_lv1_0;
            elsif ((gap_state_load_reg_1357 = ap_const_lv2_2)) then 
                dataOut_V_last_V_1_data_in <= ap_const_lv1_1;
            else 
                dataOut_V_last_V_1_data_in <= "X";
            end if;
        else 
            dataOut_V_last_V_1_data_in <= "X";
        end if; 
    end process;


    dataOut_V_last_V_1_data_out_assign_proc : process(dataOut_V_last_V_1_payload_A, dataOut_V_last_V_1_payload_B, dataOut_V_last_V_1_sel)
    begin
        if ((dataOut_V_last_V_1_sel = ap_const_logic_1)) then 
            dataOut_V_last_V_1_data_out <= dataOut_V_last_V_1_payload_B;
        else 
            dataOut_V_last_V_1_data_out <= dataOut_V_last_V_1_payload_A;
        end if; 
    end process;

    dataOut_V_last_V_1_load_A <= (not(dataOut_V_last_V_1_sel_wr) and dataOut_V_last_V_1_state_cmp_full);
    dataOut_V_last_V_1_load_B <= (dataOut_V_last_V_1_state_cmp_full and dataOut_V_last_V_1_sel_wr);
    dataOut_V_last_V_1_sel <= dataOut_V_last_V_1_sel_rd;
    dataOut_V_last_V_1_state_cmp_full <= '0' when (dataOut_V_last_V_1_state = ap_const_lv2_1) else '1';

    dataOut_V_last_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, gap_state_load_reg_1357, ap_block_pp0_stage0_11001)
    begin
        if ((((gap_state_load_reg_1357 = ap_const_lv2_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((gap_state_load_reg_1357 = ap_const_lv2_2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            dataOut_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            dataOut_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    dataOut_V_last_V_1_vld_out <= dataOut_V_last_V_1_state(0);
    gap_state_load_load_fu_353_p1 <= gap_state;
    grp_fu_342_p2 <= std_logic_vector(unsigned(header_idx_1) + unsigned(ap_const_lv16_1));
    icmp_ln647_1_fu_810_p2 <= "1" when (unsigned(Lo_assign_fu_622_p3) > unsigned(ap_const_lv22_14F)) else "0";
    icmp_ln647_2_fu_400_p2 <= "1" when (unsigned(Lo_assign_1_fu_370_p3) > unsigned(or_ln78_1_fu_394_p2)) else "0";
    icmp_ln647_3_fu_492_p2 <= "1" when (unsigned(Lo_assign_1_fu_370_p3) > unsigned(ap_const_lv22_14F)) else "0";
    icmp_ln647_fu_652_p2 <= "1" when (unsigned(Lo_assign_fu_622_p3) > unsigned(or_ln78_fu_646_p2)) else "0";
    icmp_ln76_1_fu_388_p2 <= "1" when (unsigned(add_ln76_1_fu_382_p2) < unsigned(ap_const_lv23_151)) else "0";
    icmp_ln76_fu_640_p2 <= "1" when (unsigned(add_ln76_fu_634_p2) < unsigned(ap_const_lv23_151)) else "0";
    icmp_ln82_1_fu_486_p2 <= "1" when (unsigned(Lo_assign_1_fu_370_p3) < unsigned(ap_const_lv22_150)) else "0";
    icmp_ln82_fu_804_p2 <= "1" when (unsigned(Lo_assign_fu_622_p3) < unsigned(ap_const_lv22_150)) else "0";
    icmp_ln887_fu_958_p2 <= "1" when (tmp_12_fu_948_p4 = ap_const_lv5_0) else "0";
    lshr_ln647_1_fu_1305_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv336_lc_2),to_integer(unsigned('0' & zext_ln647_1_fu_1302_p1(31-1 downto 0)))));
    lshr_ln647_2_fu_886_p2 <= std_logic_vector(shift_right(unsigned(select_ln647_4_fu_860_p3),to_integer(unsigned('0' & zext_ln647_2_fu_882_p1(31-1 downto 0)))));
    lshr_ln647_3_fu_1323_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv336_lc_2),to_integer(unsigned('0' & zext_ln647_3_fu_1320_p1(31-1 downto 0)))));
    lshr_ln647_4_fu_480_p2 <= std_logic_vector(shift_right(unsigned(select_ln647_7_fu_454_p3),to_integer(unsigned('0' & zext_ln647_4_fu_476_p1(31-1 downto 0)))));
    lshr_ln647_5_fu_1103_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv336_lc_2),to_integer(unsigned('0' & zext_ln647_5_fu_1100_p1(31-1 downto 0)))));
    lshr_ln647_6_fu_568_p2 <= std_logic_vector(shift_right(unsigned(select_ln647_10_fu_542_p3),to_integer(unsigned('0' & zext_ln647_6_fu_564_p1(31-1 downto 0)))));
    lshr_ln647_7_fu_1121_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv336_lc_2),to_integer(unsigned('0' & zext_ln647_7_fu_1118_p1(31-1 downto 0)))));
    lshr_ln647_fu_732_p2 <= std_logic_vector(shift_right(unsigned(select_ln647_1_fu_706_p3),to_integer(unsigned('0' & zext_ln647_fu_728_p1(31-1 downto 0)))));
    m_axis_TDATA <= dataOut_V_data_V_1_data_out;

    m_axis_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, gap_state_load_reg_1357, dataOut_V_data_V_1_state, gap_state_load_reg_1357_pp0_iter1_reg, ap_block_pp0_stage0)
    begin
        if ((((gap_state_load_reg_1357 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((gap_state_load_reg_1357 = ap_const_lv2_2) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((gap_state_load_reg_1357_pp0_iter1_reg = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((gap_state_load_reg_1357_pp0_iter1_reg = ap_const_lv2_2) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            m_axis_TDATA_blk_n <= dataOut_V_data_V_1_state(1);
        else 
            m_axis_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    m_axis_TKEEP <= dataOut_V_keep_V_1_data_out;
    m_axis_TLAST <= dataOut_V_last_V_1_data_out;
    m_axis_TVALID <= dataOut_V_last_V_1_state(0);
    or_ln78_1_fu_394_p2 <= (ap_const_lv22_3F or Lo_assign_1_fu_370_p3);
    or_ln78_fu_646_p2 <= (ap_const_lv22_3F or Lo_assign_fu_622_p3);
    p_Result_11_fu_1014_p5 <= (tmp_6_fu_1000_p6 & p_Result_15_fu_988_p5(159 downto 0));
    p_Result_12_fu_1036_p5 <= (header_header_V_1(335 downto 48) & trunc_ln321_fu_1032_p1);
    p_Result_13_fu_1048_p5 <= (p_Result_12_fu_1036_p5(335 downto 96) & myMacAddress_V & p_Result_12_fu_1036_p5(47 downto 0));
    p_Result_14_fu_976_p5 <= (header_header_V_1(335 downto 48) & ap_const_lv48_FFFFFFFFFFFF);
    p_Result_15_fu_988_p5 <= (p_Result_14_fu_976_p5(335 downto 96) & myMacAddress_V & p_Result_14_fu_976_p5(47 downto 0));
    p_Result_16_fu_1311_p2 <= (lshr_ln647_reg_1401 and lshr_ln647_1_fu_1305_p2);
    p_Result_17_fu_1329_p2 <= (lshr_ln647_3_fu_1323_p2 and lshr_ln647_2_reg_1411);
    p_Result_18_fu_1109_p2 <= (lshr_ln647_5_fu_1103_p2 and lshr_ln647_4_reg_1371);
    p_Result_19_fu_1127_p2 <= (lshr_ln647_7_fu_1121_p2 and lshr_ln647_6_reg_1381);
    p_Result_3_fu_1338_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln215_fu_1334_p1),64));
    p_Result_6_fu_1136_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln215_1_fu_1132_p1),64));
    p_Result_s_fu_1082_p5 <= (tmp_5_fu_1070_p5 & p_Result_13_fu_1048_p5(159 downto 0));
    select_ln647_10_fu_542_p3 <= 
        tmp_16_fu_506_p4 when (icmp_ln647_3_fu_492_p2(0) = '1') else 
        header_header_V_1;
    select_ln647_11_fu_550_p3 <= 
        sub_ln647_11_fu_522_p2 when (icmp_ln647_3_fu_492_p2(0) = '1') else 
        tmp_15_fu_498_p3;
    select_ln647_1_fu_706_p3 <= 
        tmp_8_fu_670_p4 when (icmp_ln647_fu_652_p2(0) = '1') else 
        header_header_V_1;
    select_ln647_2_fu_714_p3 <= 
        sub_ln647_1_fu_686_p2 when (icmp_ln647_fu_652_p2(0) = '1') else 
        tmp_7_fu_658_p3;
    select_ln647_3_fu_852_p3 <= 
        add_ln647_fu_834_p2 when (icmp_ln647_1_fu_810_p2(0) = '1') else 
        sub_ln647_5_fu_846_p2;
    select_ln647_4_fu_860_p3 <= 
        tmp_11_fu_824_p4 when (icmp_ln647_1_fu_810_p2(0) = '1') else 
        header_header_V_1;
    select_ln647_5_fu_868_p3 <= 
        sub_ln647_4_fu_840_p2 when (icmp_ln647_1_fu_810_p2(0) = '1') else 
        tmp_10_fu_816_p3;
    select_ln647_6_fu_446_p3 <= 
        sub_ln647_7_fu_428_p2 when (icmp_ln647_2_fu_400_p2(0) = '1') else 
        sub_ln647_9_fu_440_p2;
    select_ln647_7_fu_454_p3 <= 
        tmp_14_fu_418_p4 when (icmp_ln647_2_fu_400_p2(0) = '1') else 
        header_header_V_1;
    select_ln647_8_fu_462_p3 <= 
        sub_ln647_8_fu_434_p2 when (icmp_ln647_2_fu_400_p2(0) = '1') else 
        tmp_13_fu_406_p3;
    select_ln647_9_fu_534_p3 <= 
        add_ln647_1_fu_516_p2 when (icmp_ln647_3_fu_492_p2(0) = '1') else 
        sub_ln647_12_fu_528_p2;
    select_ln647_fu_698_p3 <= 
        sub_ln647_fu_680_p2 when (icmp_ln647_fu_652_p2(0) = '1') else 
        sub_ln647_2_fu_692_p2;
    select_ln76_1_fu_920_p3 <= 
        grp_fu_342_p2 when (icmp_ln76_fu_640_p2(0) = '1') else 
        header_idx_1;
    select_ln76_2_fu_1342_p3 <= 
        trunc_ln364_fu_1316_p1 when (icmp_ln76_reg_1391(0) = '1') else 
        ap_const_lv64_0;
    select_ln76_3_fu_586_p3 <= 
        grp_fu_342_p2 when (icmp_ln76_1_fu_388_p2(0) = '1') else 
        header_idx_1;
    select_ln76_4_fu_1140_p3 <= 
        trunc_ln364_1_fu_1114_p1 when (icmp_ln76_1_reg_1361(0) = '1') else 
        ap_const_lv64_0;
    select_ln76_fu_892_p3 <= 
        select_ln80_fu_796_p3 when (icmp_ln76_fu_640_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln80_fu_796_p3 <= 
        sub_ln80_2_fu_780_p2 when (tmp_9_fu_756_p3(0) = '1') else 
        trunc_ln80_2_fu_786_p4;
    select_ln82_1_fu_928_p3 <= 
        grp_fu_342_p2 when (and_ln82_fu_906_p2(0) = '1') else 
        select_ln76_1_fu_920_p3;
    select_ln82_3_fu_594_p3 <= 
        grp_fu_342_p2 when (and_ln82_1_fu_580_p2(0) = '1') else 
        select_ln76_3_fu_586_p3;
    select_ln82_fu_912_p3 <= 
        ap_const_lv8_0 when (and_ln82_fu_906_p2(0) = '1') else 
        select_ln76_fu_892_p3;
    sendWord_data_V_2_fu_1147_p3 <= 
        p_Result_6_fu_1136_p1 when (and_ln82_1_reg_1386(0) = '1') else 
        select_ln76_4_fu_1140_p3;
    sendWord_data_V_fu_1349_p3 <= 
        p_Result_3_fu_1338_p1 when (and_ln82_reg_1416(0) = '1') else 
        select_ln76_2_fu_1342_p3;
    sendWord_keep_V_fu_1297_p1 <= agg_result_V_i_i_fu_1163_p66(8 - 1 downto 0);
    shl_ln_fu_738_p3 <= (grp_fu_342_p2 & ap_const_lv6_0);
    sub_ln647_10_fu_470_p2 <= std_logic_vector(signed(ap_const_lv9_14F) - signed(select_ln647_6_fu_446_p3));
    sub_ln647_11_fu_522_p2 <= std_logic_vector(signed(ap_const_lv9_14F) - signed(tmp_15_fu_498_p3));
    sub_ln647_12_fu_528_p2 <= std_logic_vector(signed(ap_const_lv9_14F) - signed(tmp_15_fu_498_p3));
    sub_ln647_13_fu_558_p2 <= std_logic_vector(signed(ap_const_lv9_14F) - signed(select_ln647_9_fu_534_p3));
    sub_ln647_1_fu_686_p2 <= std_logic_vector(signed(ap_const_lv9_14F) - signed(tmp_7_fu_658_p3));
    sub_ln647_2_fu_692_p2 <= std_logic_vector(unsigned(trunc_ln647_fu_666_p1) - unsigned(tmp_7_fu_658_p3));
    sub_ln647_3_fu_722_p2 <= std_logic_vector(signed(ap_const_lv9_14F) - signed(select_ln647_fu_698_p3));
    sub_ln647_4_fu_840_p2 <= std_logic_vector(signed(ap_const_lv9_14F) - signed(tmp_10_fu_816_p3));
    sub_ln647_5_fu_846_p2 <= std_logic_vector(signed(ap_const_lv9_14F) - signed(tmp_10_fu_816_p3));
    sub_ln647_6_fu_876_p2 <= std_logic_vector(signed(ap_const_lv9_14F) - signed(select_ln647_3_fu_852_p3));
    sub_ln647_7_fu_428_p2 <= std_logic_vector(unsigned(tmp_13_fu_406_p3) - unsigned(trunc_ln647_1_fu_414_p1));
    sub_ln647_8_fu_434_p2 <= std_logic_vector(signed(ap_const_lv9_14F) - signed(tmp_13_fu_406_p3));
    sub_ln647_9_fu_440_p2 <= std_logic_vector(unsigned(trunc_ln647_1_fu_414_p1) - unsigned(tmp_13_fu_406_p3));
    sub_ln647_fu_680_p2 <= std_logic_vector(unsigned(tmp_7_fu_658_p3) - unsigned(trunc_ln647_fu_666_p1));
    sub_ln80_1_fu_764_p2 <= std_logic_vector(unsigned(ap_const_lv23_0) - unsigned(sub_ln80_fu_750_p2));
    sub_ln80_2_fu_780_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(trunc_ln80_1_fu_770_p4));
    sub_ln80_fu_750_p2 <= std_logic_vector(unsigned(ap_const_lv23_150) - unsigned(zext_ln80_fu_746_p1));
    tmp_10_fu_816_p3 <= (trunc_ln76_fu_614_p1 & ap_const_lv6_0);
    
    tmp_11_fu_824_p4_proc : process(header_header_V_1)
    variable vlo_cpy : STD_LOGIC_VECTOR(336+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(336+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(336 - 1 downto 0);
    variable tmp_11_fu_824_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(336 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(336 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(336 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(9 - 1 downto 0) := ap_const_lv32_14F(9 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(9 - 1 downto 0) := ap_const_lv32_0(9 - 1 downto 0);
        v0_cpy := header_header_V_1;
        if (vlo_cpy(9 - 1 downto 0) > vhi_cpy(9 - 1 downto 0)) then
            vhi_cpy(9-1 downto 0) := std_logic_vector(336-1-unsigned(ap_const_lv32_0(9-1 downto 0)));
            vlo_cpy(9-1 downto 0) := std_logic_vector(336-1-unsigned(ap_const_lv32_14F(9-1 downto 0)));
            for tmp_11_fu_824_p4_i in 0 to 336-1 loop
                v0_cpy(tmp_11_fu_824_p4_i) := header_header_V_1(336-1-tmp_11_fu_824_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(9-1 downto 0)))));

        section := (others=>'0');
        section(9-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(9-1 downto 0)) - unsigned(vlo_cpy(9-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(336-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_11_fu_824_p4 <= resvalue(336-1 downto 0);
    end process;

    tmp_12_fu_948_p4 <= select_ln82_fu_912_p3(7 downto 3);
    tmp_13_fu_406_p3 <= (trunc_ln76_3_fu_366_p1 & ap_const_lv6_0);
    
    tmp_14_fu_418_p4_proc : process(header_header_V_1)
    variable vlo_cpy : STD_LOGIC_VECTOR(336+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(336+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(336 - 1 downto 0);
    variable tmp_14_fu_418_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(336 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(336 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(336 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(9 - 1 downto 0) := ap_const_lv32_14F(9 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(9 - 1 downto 0) := ap_const_lv32_0(9 - 1 downto 0);
        v0_cpy := header_header_V_1;
        if (vlo_cpy(9 - 1 downto 0) > vhi_cpy(9 - 1 downto 0)) then
            vhi_cpy(9-1 downto 0) := std_logic_vector(336-1-unsigned(ap_const_lv32_0(9-1 downto 0)));
            vlo_cpy(9-1 downto 0) := std_logic_vector(336-1-unsigned(ap_const_lv32_14F(9-1 downto 0)));
            for tmp_14_fu_418_p4_i in 0 to 336-1 loop
                v0_cpy(tmp_14_fu_418_p4_i) := header_header_V_1(336-1-tmp_14_fu_418_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(9-1 downto 0)))));

        section := (others=>'0');
        section(9-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(9-1 downto 0)) - unsigned(vlo_cpy(9-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(336-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_14_fu_418_p4 <= resvalue(336-1 downto 0);
    end process;

    tmp_15_fu_498_p3 <= (trunc_ln76_2_fu_362_p1 & ap_const_lv6_0);
    
    tmp_16_fu_506_p4_proc : process(header_header_V_1)
    variable vlo_cpy : STD_LOGIC_VECTOR(336+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(336+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(336 - 1 downto 0);
    variable tmp_16_fu_506_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(336 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(336 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(336 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(9 - 1 downto 0) := ap_const_lv32_14F(9 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(9 - 1 downto 0) := ap_const_lv32_0(9 - 1 downto 0);
        v0_cpy := header_header_V_1;
        if (vlo_cpy(9 - 1 downto 0) > vhi_cpy(9 - 1 downto 0)) then
            vhi_cpy(9-1 downto 0) := std_logic_vector(336-1-unsigned(ap_const_lv32_0(9-1 downto 0)));
            vlo_cpy(9-1 downto 0) := std_logic_vector(336-1-unsigned(ap_const_lv32_14F(9-1 downto 0)));
            for tmp_16_fu_506_p4_i in 0 to 336-1 loop
                v0_cpy(tmp_16_fu_506_p4_i) := header_header_V_1(336-1-tmp_16_fu_506_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(9-1 downto 0)))));

        section := (others=>'0');
        section(9-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(9-1 downto 0)) - unsigned(vlo_cpy(9-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(336-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_16_fu_506_p4 <= resvalue(336-1 downto 0);
    end process;

    tmp_3_nbreadreq_fu_302_p3 <= (0=>(arpRequestMetaFifo_V_empty_n), others=>'-');
    tmp_4_fu_1060_p4 <= arpReplyMetaFifo_V_dout(127 downto 48);
    tmp_5_fu_1070_p5 <= (((tmp_4_fu_1060_p4 & myIpAddress_V) & myMacAddress_V) & ap_const_lv16_200);
    tmp_6_fu_1000_p6 <= ((((arpRequestMetaFifo_V_dout & ap_const_lv48_0) & myIpAddress_V) & myMacAddress_V) & ap_const_lv16_100);
    tmp_7_fu_658_p3 <= (trunc_ln76_1_fu_618_p1 & ap_const_lv6_0);
    
    tmp_8_fu_670_p4_proc : process(header_header_V_1)
    variable vlo_cpy : STD_LOGIC_VECTOR(336+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(336+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(336 - 1 downto 0);
    variable tmp_8_fu_670_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(336 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(336 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(336 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(9 - 1 downto 0) := ap_const_lv32_14F(9 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(9 - 1 downto 0) := ap_const_lv32_0(9 - 1 downto 0);
        v0_cpy := header_header_V_1;
        if (vlo_cpy(9 - 1 downto 0) > vhi_cpy(9 - 1 downto 0)) then
            vhi_cpy(9-1 downto 0) := std_logic_vector(336-1-unsigned(ap_const_lv32_0(9-1 downto 0)));
            vlo_cpy(9-1 downto 0) := std_logic_vector(336-1-unsigned(ap_const_lv32_14F(9-1 downto 0)));
            for tmp_8_fu_670_p4_i in 0 to 336-1 loop
                v0_cpy(tmp_8_fu_670_p4_i) := header_header_V_1(336-1-tmp_8_fu_670_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(9-1 downto 0)))));

        section := (others=>'0');
        section(9-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(9-1 downto 0)) - unsigned(vlo_cpy(9-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(336-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_8_fu_670_p4 <= resvalue(336-1 downto 0);
    end process;

    tmp_9_fu_756_p3 <= sub_ln80_fu_750_p2(22 downto 22);
    tmp_nbreadreq_fu_294_p3 <= (0=>(arpReplyMetaFifo_V_empty_n), others=>'-');
    trunc_ln215_1_fu_1132_p1 <= p_Result_19_fu_1127_p2(16 - 1 downto 0);
    trunc_ln215_fu_1334_p1 <= p_Result_17_fu_1329_p2(16 - 1 downto 0);
    trunc_ln321_fu_1032_p1 <= arpReplyMetaFifo_V_dout(48 - 1 downto 0);
    trunc_ln364_1_fu_1114_p1 <= p_Result_18_fu_1109_p2(64 - 1 downto 0);
    trunc_ln364_fu_1316_p1 <= p_Result_16_fu_1311_p2(64 - 1 downto 0);
    trunc_ln647_1_fu_414_p1 <= or_ln78_1_fu_394_p2(9 - 1 downto 0);
    trunc_ln647_fu_666_p1 <= or_ln78_fu_646_p2(9 - 1 downto 0);
    trunc_ln76_1_fu_618_p1 <= header_idx_1(3 - 1 downto 0);
    trunc_ln76_2_fu_362_p1 <= header_idx_1(3 - 1 downto 0);
    trunc_ln76_3_fu_366_p1 <= header_idx_1(3 - 1 downto 0);
    trunc_ln76_fu_614_p1 <= header_idx_1(3 - 1 downto 0);
    trunc_ln80_1_fu_770_p4 <= sub_ln80_1_fu_764_p2(10 downto 3);
    trunc_ln80_2_fu_786_p4 <= sub_ln80_fu_750_p2(10 downto 3);
    xor_ln76_1_fu_574_p2 <= (icmp_ln76_1_fu_388_p2 xor ap_const_lv1_1);
    xor_ln76_fu_900_p2 <= (icmp_ln76_fu_640_p2 xor ap_const_lv1_1);
    zext_ln647_1_fu_1302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln647_3_reg_1396),336));
    zext_ln647_2_fu_882_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln647_5_fu_868_p3),336));
    zext_ln647_3_fu_1320_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln647_6_reg_1406),336));
    zext_ln647_4_fu_476_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln647_8_fu_462_p3),336));
    zext_ln647_5_fu_1100_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln647_10_reg_1366),336));
    zext_ln647_6_fu_564_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln647_11_fu_550_p3),336));
    zext_ln647_7_fu_1118_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln647_13_reg_1376),336));
    zext_ln647_fu_728_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln647_2_fu_714_p3),336));
    zext_ln76_1_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Lo_assign_1_fu_370_p3),23));
    zext_ln76_fu_630_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Lo_assign_fu_622_p3),23));
    zext_ln80_fu_746_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_738_p3),23));
end behav;
