// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module rxAppMemDataRead_64_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        rxBufferReadCmd_V_V_dout,
        rxBufferReadCmd_V_V_empty_n,
        rxBufferReadCmd_V_V_read,
        s_axis_rxread_data_TVALID,
        m_axis_rx_data_rsp_TREADY,
        s_axis_rxread_data_TDATA,
        s_axis_rxread_data_TREADY,
        s_axis_rxread_data_TKEEP,
        s_axis_rxread_data_TLAST,
        m_axis_rx_data_rsp_TDATA,
        m_axis_rx_data_rsp_TVALID,
        m_axis_rx_data_rsp_TKEEP,
        m_axis_rx_data_rsp_TLAST
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [0:0] rxBufferReadCmd_V_V_dout;
input   rxBufferReadCmd_V_V_empty_n;
output   rxBufferReadCmd_V_V_read;
input   s_axis_rxread_data_TVALID;
input   m_axis_rx_data_rsp_TREADY;
input  [63:0] s_axis_rxread_data_TDATA;
output   s_axis_rxread_data_TREADY;
input  [7:0] s_axis_rxread_data_TKEEP;
input  [0:0] s_axis_rxread_data_TLAST;
output  [63:0] m_axis_rx_data_rsp_TDATA;
output   m_axis_rx_data_rsp_TVALID;
output  [7:0] m_axis_rx_data_rsp_TKEEP;
output  [0:0] m_axis_rx_data_rsp_TLAST;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg rxBufferReadCmd_V_V_read;
reg s_axis_rxread_data_TREADY;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire   [0:0] tmp_134_nbreadreq_fu_54_p3;
reg    ap_predicate_op8_read_state1;
wire   [0:0] tmp_nbreadreq_fu_68_p5;
reg    ap_predicate_op12_read_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    rxDataRsp_V_data_V_1_ack_in;
reg   [0:0] ramdr_fsmState_V_loa_reg_131;
reg   [0:0] tmp_reg_139;
reg    ap_predicate_op17_write_state2;
reg    ap_block_state2_io;
wire    rxDataRsp_V_data_V_1_ack_out;
reg   [1:0] rxDataRsp_V_data_V_1_state;
wire    rxDataRsp_V_keep_V_1_ack_out;
reg   [1:0] rxDataRsp_V_keep_V_1_state;
wire    rxDataRsp_V_last_V_1_ack_out;
reg   [1:0] rxDataRsp_V_last_V_1_state;
reg    ap_block_state3_pp0_stage0_iter2;
reg   [0:0] ramdr_fsmState_V_loa_reg_131_pp0_iter1_reg;
reg   [0:0] tmp_reg_139_pp0_iter1_reg;
reg    ap_predicate_op25_write_state3;
reg    ap_block_state3_io;
reg    ap_block_pp0_stage0_11001;
reg   [63:0] rxDataRsp_V_data_V_1_data_out;
reg    rxDataRsp_V_data_V_1_vld_in;
wire    rxDataRsp_V_data_V_1_vld_out;
reg   [63:0] rxDataRsp_V_data_V_1_payload_A;
reg   [63:0] rxDataRsp_V_data_V_1_payload_B;
reg    rxDataRsp_V_data_V_1_sel_rd;
reg    rxDataRsp_V_data_V_1_sel_wr;
wire    rxDataRsp_V_data_V_1_sel;
wire    rxDataRsp_V_data_V_1_load_A;
wire    rxDataRsp_V_data_V_1_load_B;
wire    rxDataRsp_V_data_V_1_state_cmp_full;
reg   [7:0] rxDataRsp_V_keep_V_1_data_out;
reg    rxDataRsp_V_keep_V_1_vld_in;
wire    rxDataRsp_V_keep_V_1_vld_out;
wire    rxDataRsp_V_keep_V_1_ack_in;
reg   [7:0] rxDataRsp_V_keep_V_1_payload_A;
reg   [7:0] rxDataRsp_V_keep_V_1_payload_B;
reg    rxDataRsp_V_keep_V_1_sel_rd;
reg    rxDataRsp_V_keep_V_1_sel_wr;
wire    rxDataRsp_V_keep_V_1_sel;
wire    rxDataRsp_V_keep_V_1_load_A;
wire    rxDataRsp_V_keep_V_1_load_B;
wire    rxDataRsp_V_keep_V_1_state_cmp_full;
reg   [0:0] rxDataRsp_V_last_V_1_data_out;
reg    rxDataRsp_V_last_V_1_vld_in;
wire    rxDataRsp_V_last_V_1_vld_out;
wire    rxDataRsp_V_last_V_1_ack_in;
reg   [0:0] rxDataRsp_V_last_V_1_payload_A;
reg   [0:0] rxDataRsp_V_last_V_1_payload_B;
reg    rxDataRsp_V_last_V_1_sel_rd;
reg    rxDataRsp_V_last_V_1_sel_wr;
wire    rxDataRsp_V_last_V_1_sel;
wire    rxDataRsp_V_last_V_1_load_A;
wire    rxDataRsp_V_last_V_1_load_B;
wire    rxDataRsp_V_last_V_1_state_cmp_full;
reg   [0:0] ramdr_fsmState_V;
reg    s_axis_rxread_data_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    m_axis_rx_data_rsp_TDATA_blk_n;
reg    rxBufferReadCmd_V_V_blk_n;
reg   [63:0] tmp_data_V_reg_143;
reg   [7:0] tmp_keep_V_reg_148;
wire   [0:0] tmp_last_V_fu_121_p1;
reg   [0:0] tmp_last_V_reg_153;
reg    ap_block_pp0_stage0_subdone;
reg    ap_block_pp0_stage0_01001;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_338;
reg    ap_condition_136;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 rxDataRsp_V_data_V_1_state = 2'd0;
#0 rxDataRsp_V_keep_V_1_state = 2'd0;
#0 rxDataRsp_V_last_V_1_state = 2'd0;
#0 rxDataRsp_V_data_V_1_sel_rd = 1'b0;
#0 rxDataRsp_V_data_V_1_sel_wr = 1'b0;
#0 rxDataRsp_V_keep_V_1_sel_rd = 1'b0;
#0 rxDataRsp_V_keep_V_1_sel_wr = 1'b0;
#0 rxDataRsp_V_last_V_1_sel_rd = 1'b0;
#0 rxDataRsp_V_last_V_1_sel_wr = 1'b0;
#0 ramdr_fsmState_V = 1'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        rxDataRsp_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((rxDataRsp_V_data_V_1_ack_out == 1'b1) & (rxDataRsp_V_data_V_1_vld_out == 1'b1))) begin
            rxDataRsp_V_data_V_1_sel_rd <= ~rxDataRsp_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        rxDataRsp_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((rxDataRsp_V_data_V_1_ack_in == 1'b1) & (rxDataRsp_V_data_V_1_vld_in == 1'b1))) begin
            rxDataRsp_V_data_V_1_sel_wr <= ~rxDataRsp_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        rxDataRsp_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((rxDataRsp_V_data_V_1_state == 2'd3) & (rxDataRsp_V_data_V_1_vld_in == 1'b0) & (rxDataRsp_V_data_V_1_ack_out == 1'b1)) | ((rxDataRsp_V_data_V_1_state == 2'd2) & (rxDataRsp_V_data_V_1_vld_in == 1'b0)))) begin
            rxDataRsp_V_data_V_1_state <= 2'd2;
        end else if ((((rxDataRsp_V_data_V_1_state == 2'd1) & (m_axis_rx_data_rsp_TREADY == 1'b0)) | ((rxDataRsp_V_data_V_1_state == 2'd3) & (m_axis_rx_data_rsp_TREADY == 1'b0) & (rxDataRsp_V_data_V_1_vld_in == 1'b1)))) begin
            rxDataRsp_V_data_V_1_state <= 2'd1;
        end else if ((((rxDataRsp_V_data_V_1_state == 2'd1) & (rxDataRsp_V_data_V_1_ack_out == 1'b1)) | (~((rxDataRsp_V_data_V_1_vld_in == 1'b0) & (rxDataRsp_V_data_V_1_ack_out == 1'b1)) & ~((m_axis_rx_data_rsp_TREADY == 1'b0) & (rxDataRsp_V_data_V_1_vld_in == 1'b1)) & (rxDataRsp_V_data_V_1_state == 2'd3)) | ((rxDataRsp_V_data_V_1_state == 2'd2) & (rxDataRsp_V_data_V_1_vld_in == 1'b1)))) begin
            rxDataRsp_V_data_V_1_state <= 2'd3;
        end else begin
            rxDataRsp_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        rxDataRsp_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((rxDataRsp_V_keep_V_1_ack_out == 1'b1) & (rxDataRsp_V_keep_V_1_vld_out == 1'b1))) begin
            rxDataRsp_V_keep_V_1_sel_rd <= ~rxDataRsp_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        rxDataRsp_V_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((rxDataRsp_V_keep_V_1_ack_in == 1'b1) & (rxDataRsp_V_keep_V_1_vld_in == 1'b1))) begin
            rxDataRsp_V_keep_V_1_sel_wr <= ~rxDataRsp_V_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        rxDataRsp_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((rxDataRsp_V_keep_V_1_state == 2'd3) & (rxDataRsp_V_keep_V_1_vld_in == 1'b0) & (rxDataRsp_V_keep_V_1_ack_out == 1'b1)) | ((rxDataRsp_V_keep_V_1_state == 2'd2) & (rxDataRsp_V_keep_V_1_vld_in == 1'b0)))) begin
            rxDataRsp_V_keep_V_1_state <= 2'd2;
        end else if ((((rxDataRsp_V_keep_V_1_state == 2'd1) & (m_axis_rx_data_rsp_TREADY == 1'b0)) | ((rxDataRsp_V_keep_V_1_state == 2'd3) & (m_axis_rx_data_rsp_TREADY == 1'b0) & (rxDataRsp_V_keep_V_1_vld_in == 1'b1)))) begin
            rxDataRsp_V_keep_V_1_state <= 2'd1;
        end else if ((((rxDataRsp_V_keep_V_1_state == 2'd1) & (rxDataRsp_V_keep_V_1_ack_out == 1'b1)) | (~((rxDataRsp_V_keep_V_1_vld_in == 1'b0) & (rxDataRsp_V_keep_V_1_ack_out == 1'b1)) & ~((m_axis_rx_data_rsp_TREADY == 1'b0) & (rxDataRsp_V_keep_V_1_vld_in == 1'b1)) & (rxDataRsp_V_keep_V_1_state == 2'd3)) | ((rxDataRsp_V_keep_V_1_state == 2'd2) & (rxDataRsp_V_keep_V_1_vld_in == 1'b1)))) begin
            rxDataRsp_V_keep_V_1_state <= 2'd3;
        end else begin
            rxDataRsp_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        rxDataRsp_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((rxDataRsp_V_last_V_1_vld_out == 1'b1) & (rxDataRsp_V_last_V_1_ack_out == 1'b1))) begin
            rxDataRsp_V_last_V_1_sel_rd <= ~rxDataRsp_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        rxDataRsp_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((rxDataRsp_V_last_V_1_ack_in == 1'b1) & (rxDataRsp_V_last_V_1_vld_in == 1'b1))) begin
            rxDataRsp_V_last_V_1_sel_wr <= ~rxDataRsp_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        rxDataRsp_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((rxDataRsp_V_last_V_1_state == 2'd3) & (rxDataRsp_V_last_V_1_vld_in == 1'b0) & (rxDataRsp_V_last_V_1_ack_out == 1'b1)) | ((rxDataRsp_V_last_V_1_state == 2'd2) & (rxDataRsp_V_last_V_1_vld_in == 1'b0)))) begin
            rxDataRsp_V_last_V_1_state <= 2'd2;
        end else if ((((rxDataRsp_V_last_V_1_state == 2'd1) & (m_axis_rx_data_rsp_TREADY == 1'b0)) | ((rxDataRsp_V_last_V_1_state == 2'd3) & (m_axis_rx_data_rsp_TREADY == 1'b0) & (rxDataRsp_V_last_V_1_vld_in == 1'b1)))) begin
            rxDataRsp_V_last_V_1_state <= 2'd1;
        end else if ((((rxDataRsp_V_last_V_1_state == 2'd1) & (rxDataRsp_V_last_V_1_ack_out == 1'b1)) | (~((rxDataRsp_V_last_V_1_vld_in == 1'b0) & (rxDataRsp_V_last_V_1_ack_out == 1'b1)) & ~((m_axis_rx_data_rsp_TREADY == 1'b0) & (rxDataRsp_V_last_V_1_vld_in == 1'b1)) & (rxDataRsp_V_last_V_1_state == 2'd3)) | ((rxDataRsp_V_last_V_1_state == 2'd2) & (rxDataRsp_V_last_V_1_vld_in == 1'b1)))) begin
            rxDataRsp_V_last_V_1_state <= 2'd3;
        end else begin
            rxDataRsp_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_136)) begin
        if ((1'b1 == ap_condition_338)) begin
            ramdr_fsmState_V <= 1'd0;
        end else if (((tmp_134_nbreadreq_fu_54_p3 == 1'd1) & (ramdr_fsmState_V == 1'd0))) begin
            ramdr_fsmState_V <= 1'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ramdr_fsmState_V_loa_reg_131 <= ramdr_fsmState_V;
        ramdr_fsmState_V_loa_reg_131_pp0_iter1_reg <= ramdr_fsmState_V_loa_reg_131;
        tmp_reg_139_pp0_iter1_reg <= tmp_reg_139;
    end
end

always @ (posedge ap_clk) begin
    if ((rxDataRsp_V_data_V_1_load_A == 1'b1)) begin
        rxDataRsp_V_data_V_1_payload_A <= tmp_data_V_reg_143;
    end
end

always @ (posedge ap_clk) begin
    if ((rxDataRsp_V_data_V_1_load_B == 1'b1)) begin
        rxDataRsp_V_data_V_1_payload_B <= tmp_data_V_reg_143;
    end
end

always @ (posedge ap_clk) begin
    if ((rxDataRsp_V_keep_V_1_load_A == 1'b1)) begin
        rxDataRsp_V_keep_V_1_payload_A <= tmp_keep_V_reg_148;
    end
end

always @ (posedge ap_clk) begin
    if ((rxDataRsp_V_keep_V_1_load_B == 1'b1)) begin
        rxDataRsp_V_keep_V_1_payload_B <= tmp_keep_V_reg_148;
    end
end

always @ (posedge ap_clk) begin
    if ((rxDataRsp_V_last_V_1_load_A == 1'b1)) begin
        rxDataRsp_V_last_V_1_payload_A <= tmp_last_V_reg_153;
    end
end

always @ (posedge ap_clk) begin
    if ((rxDataRsp_V_last_V_1_load_B == 1'b1)) begin
        rxDataRsp_V_last_V_1_payload_B <= tmp_last_V_reg_153;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_nbreadreq_fu_68_p5 == 1'd1) & (ramdr_fsmState_V == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_data_V_reg_143 <= s_axis_rxread_data_TDATA;
        tmp_keep_V_reg_148 <= s_axis_rxread_data_TKEEP;
        tmp_last_V_reg_153 <= s_axis_rxread_data_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if (((ramdr_fsmState_V == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_reg_139 <= tmp_nbreadreq_fu_68_p5;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op17_write_state2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op25_write_state3 == 1'b1)))) begin
        m_axis_rx_data_rsp_TDATA_blk_n = rxDataRsp_V_data_V_1_state[1'd1];
    end else begin
        m_axis_rx_data_rsp_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op8_read_state1 == 1'b1))) begin
        rxBufferReadCmd_V_V_blk_n = rxBufferReadCmd_V_V_empty_n;
    end else begin
        rxBufferReadCmd_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op8_read_state1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        rxBufferReadCmd_V_V_read = 1'b1;
    end else begin
        rxBufferReadCmd_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((rxDataRsp_V_data_V_1_sel == 1'b1)) begin
        rxDataRsp_V_data_V_1_data_out = rxDataRsp_V_data_V_1_payload_B;
    end else begin
        rxDataRsp_V_data_V_1_data_out = rxDataRsp_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op17_write_state2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        rxDataRsp_V_data_V_1_vld_in = 1'b1;
    end else begin
        rxDataRsp_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((rxDataRsp_V_keep_V_1_sel == 1'b1)) begin
        rxDataRsp_V_keep_V_1_data_out = rxDataRsp_V_keep_V_1_payload_B;
    end else begin
        rxDataRsp_V_keep_V_1_data_out = rxDataRsp_V_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op17_write_state2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        rxDataRsp_V_keep_V_1_vld_in = 1'b1;
    end else begin
        rxDataRsp_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((rxDataRsp_V_last_V_1_sel == 1'b1)) begin
        rxDataRsp_V_last_V_1_data_out = rxDataRsp_V_last_V_1_payload_B;
    end else begin
        rxDataRsp_V_last_V_1_data_out = rxDataRsp_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op17_write_state2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        rxDataRsp_V_last_V_1_vld_in = 1'b1;
    end else begin
        rxDataRsp_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op12_read_state1 == 1'b1))) begin
        s_axis_rxread_data_TDATA_blk_n = s_axis_rxread_data_TVALID;
    end else begin
        s_axis_rxread_data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op12_read_state1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        s_axis_rxread_data_TREADY = 1'b1;
    end else begin
        s_axis_rxread_data_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((s_axis_rxread_data_TVALID == 1'b0) & (ap_predicate_op12_read_state1 == 1'b1)) | ((rxBufferReadCmd_V_V_empty_n == 1'b0) & (ap_predicate_op8_read_state1 == 1'b1)))) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((rxDataRsp_V_keep_V_1_state == 2'd1) | (rxDataRsp_V_last_V_1_state == 2'd1) | (rxDataRsp_V_data_V_1_state == 2'd1) | ((rxDataRsp_V_keep_V_1_state == 2'd3) & (m_axis_rx_data_rsp_TREADY == 1'b0)) | ((rxDataRsp_V_data_V_1_state == 2'd3) & (m_axis_rx_data_rsp_TREADY == 1'b0)) | ((rxDataRsp_V_last_V_1_state == 2'd3) & (m_axis_rx_data_rsp_TREADY == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_io)) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((s_axis_rxread_data_TVALID == 1'b0) & (ap_predicate_op12_read_state1 == 1'b1)) | ((rxBufferReadCmd_V_V_empty_n == 1'b0) & (ap_predicate_op8_read_state1 == 1'b1)))) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((rxDataRsp_V_keep_V_1_state == 2'd1) | (rxDataRsp_V_last_V_1_state == 2'd1) | (rxDataRsp_V_data_V_1_state == 2'd1) | (1'b1 == ap_block_state3_io) | ((rxDataRsp_V_keep_V_1_state == 2'd3) & (m_axis_rx_data_rsp_TREADY == 1'b0)) | ((rxDataRsp_V_data_V_1_state == 2'd3) & (m_axis_rx_data_rsp_TREADY == 1'b0)) | ((rxDataRsp_V_last_V_1_state == 2'd3) & (m_axis_rx_data_rsp_TREADY == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_io)) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((s_axis_rxread_data_TVALID == 1'b0) & (ap_predicate_op12_read_state1 == 1'b1)) | ((rxBufferReadCmd_V_V_empty_n == 1'b0) & (ap_predicate_op8_read_state1 == 1'b1)))) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((rxDataRsp_V_keep_V_1_state == 2'd1) | (rxDataRsp_V_last_V_1_state == 2'd1) | (rxDataRsp_V_data_V_1_state == 2'd1) | (1'b1 == ap_block_state3_io) | ((rxDataRsp_V_keep_V_1_state == 2'd3) & (m_axis_rx_data_rsp_TREADY == 1'b0)) | ((rxDataRsp_V_data_V_1_state == 2'd3) & (m_axis_rx_data_rsp_TREADY == 1'b0)) | ((rxDataRsp_V_last_V_1_state == 2'd3) & (m_axis_rx_data_rsp_TREADY == 1'b0)))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((s_axis_rxread_data_TVALID == 1'b0) & (ap_predicate_op12_read_state1 == 1'b1)) | ((rxBufferReadCmd_V_V_empty_n == 1'b0) & (ap_predicate_op8_read_state1 == 1'b1)));
end

always @ (*) begin
    ap_block_state2_io = ((rxDataRsp_V_data_V_1_ack_in == 1'b0) & (ap_predicate_op17_write_state2 == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = ((rxDataRsp_V_data_V_1_ack_in == 1'b0) & (ap_predicate_op25_write_state3 == 1'b1));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((rxDataRsp_V_keep_V_1_state == 2'd1) | (rxDataRsp_V_last_V_1_state == 2'd1) | (rxDataRsp_V_data_V_1_state == 2'd1) | ((rxDataRsp_V_keep_V_1_state == 2'd3) & (m_axis_rx_data_rsp_TREADY == 1'b0)) | ((rxDataRsp_V_data_V_1_state == 2'd3) & (m_axis_rx_data_rsp_TREADY == 1'b0)) | ((rxDataRsp_V_last_V_1_state == 2'd3) & (m_axis_rx_data_rsp_TREADY == 1'b0)));
end

always @ (*) begin
    ap_condition_136 = ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001));
end

always @ (*) begin
    ap_condition_338 = ((tmp_nbreadreq_fu_68_p5 == 1'd1) & (tmp_last_V_fu_121_p1 == 1'd1) & (ramdr_fsmState_V == 1'd1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

always @ (*) begin
    ap_predicate_op12_read_state1 = ((tmp_nbreadreq_fu_68_p5 == 1'd1) & (ramdr_fsmState_V == 1'd1));
end

always @ (*) begin
    ap_predicate_op17_write_state2 = ((tmp_reg_139 == 1'd1) & (ramdr_fsmState_V_loa_reg_131 == 1'd1));
end

always @ (*) begin
    ap_predicate_op25_write_state3 = ((tmp_reg_139_pp0_iter1_reg == 1'd1) & (ramdr_fsmState_V_loa_reg_131_pp0_iter1_reg == 1'd1));
end

always @ (*) begin
    ap_predicate_op8_read_state1 = ((tmp_134_nbreadreq_fu_54_p3 == 1'd1) & (ramdr_fsmState_V == 1'd0));
end

assign m_axis_rx_data_rsp_TDATA = rxDataRsp_V_data_V_1_data_out;

assign m_axis_rx_data_rsp_TKEEP = rxDataRsp_V_keep_V_1_data_out;

assign m_axis_rx_data_rsp_TLAST = rxDataRsp_V_last_V_1_data_out;

assign m_axis_rx_data_rsp_TVALID = rxDataRsp_V_last_V_1_state[1'd0];

assign rxDataRsp_V_data_V_1_ack_in = rxDataRsp_V_data_V_1_state[1'd1];

assign rxDataRsp_V_data_V_1_ack_out = m_axis_rx_data_rsp_TREADY;

assign rxDataRsp_V_data_V_1_load_A = (rxDataRsp_V_data_V_1_state_cmp_full & ~rxDataRsp_V_data_V_1_sel_wr);

assign rxDataRsp_V_data_V_1_load_B = (rxDataRsp_V_data_V_1_state_cmp_full & rxDataRsp_V_data_V_1_sel_wr);

assign rxDataRsp_V_data_V_1_sel = rxDataRsp_V_data_V_1_sel_rd;

assign rxDataRsp_V_data_V_1_state_cmp_full = ((rxDataRsp_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign rxDataRsp_V_data_V_1_vld_out = rxDataRsp_V_data_V_1_state[1'd0];

assign rxDataRsp_V_keep_V_1_ack_in = rxDataRsp_V_keep_V_1_state[1'd1];

assign rxDataRsp_V_keep_V_1_ack_out = m_axis_rx_data_rsp_TREADY;

assign rxDataRsp_V_keep_V_1_load_A = (rxDataRsp_V_keep_V_1_state_cmp_full & ~rxDataRsp_V_keep_V_1_sel_wr);

assign rxDataRsp_V_keep_V_1_load_B = (rxDataRsp_V_keep_V_1_state_cmp_full & rxDataRsp_V_keep_V_1_sel_wr);

assign rxDataRsp_V_keep_V_1_sel = rxDataRsp_V_keep_V_1_sel_rd;

assign rxDataRsp_V_keep_V_1_state_cmp_full = ((rxDataRsp_V_keep_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign rxDataRsp_V_keep_V_1_vld_out = rxDataRsp_V_keep_V_1_state[1'd0];

assign rxDataRsp_V_last_V_1_ack_in = rxDataRsp_V_last_V_1_state[1'd1];

assign rxDataRsp_V_last_V_1_ack_out = m_axis_rx_data_rsp_TREADY;

assign rxDataRsp_V_last_V_1_load_A = (rxDataRsp_V_last_V_1_state_cmp_full & ~rxDataRsp_V_last_V_1_sel_wr);

assign rxDataRsp_V_last_V_1_load_B = (rxDataRsp_V_last_V_1_state_cmp_full & rxDataRsp_V_last_V_1_sel_wr);

assign rxDataRsp_V_last_V_1_sel = rxDataRsp_V_last_V_1_sel_rd;

assign rxDataRsp_V_last_V_1_state_cmp_full = ((rxDataRsp_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign rxDataRsp_V_last_V_1_vld_out = rxDataRsp_V_last_V_1_state[1'd0];

assign tmp_134_nbreadreq_fu_54_p3 = rxBufferReadCmd_V_V_empty_n;

assign tmp_last_V_fu_121_p1 = s_axis_rxread_data_TLAST;

assign tmp_nbreadreq_fu_68_p5 = s_axis_rxread_data_TVALID;

endmodule //rxAppMemDataRead_64_s
