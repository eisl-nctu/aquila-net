// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module stream_merger_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        closeTimer2stateTabl_1_dout,
        closeTimer2stateTabl_1_empty_n,
        closeTimer2stateTabl_1_read,
        rtTimer2stateTable_r_1_dout,
        rtTimer2stateTable_r_1_empty_n,
        rtTimer2stateTable_r_1_read,
        timer2stateTable_rel_1_din,
        timer2stateTable_rel_1_full_n,
        timer2stateTable_rel_1_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] closeTimer2stateTabl_1_dout;
input   closeTimer2stateTabl_1_empty_n;
output   closeTimer2stateTabl_1_read;
input  [15:0] rtTimer2stateTable_r_1_dout;
input   rtTimer2stateTable_r_1_empty_n;
output   rtTimer2stateTable_r_1_read;
output  [15:0] timer2stateTable_rel_1_din;
input   timer2stateTable_rel_1_full_n;
output   timer2stateTable_rel_1_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg closeTimer2stateTabl_1_read;
reg rtTimer2stateTable_r_1_read;
reg[15:0] timer2stateTable_rel_1_din;
reg timer2stateTable_rel_1_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire   [0:0] tmp_nbreadreq_fu_28_p3;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] tmp_reg_63;
wire   [0:0] tmp_73_nbreadreq_fu_42_p3;
reg    ap_predicate_op9_read_state2;
reg    ap_block_state2_pp0_stage0_iter1;
reg   [0:0] tmp_reg_63_pp0_iter1_reg;
reg   [0:0] tmp_73_reg_72;
reg    ap_predicate_op14_write_state3;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg    closeTimer2stateTabl_1_blk_n;
wire    ap_block_pp0_stage0;
reg    timer2stateTable_rel_1_blk_n;
reg    rtTimer2stateTable_r_1_blk_n;
reg   [15:0] tmp_V_reg_67;
reg   [15:0] tmp_V_reg_67_pp0_iter1_reg;
reg   [15:0] tmp_V_2_reg_76;
reg    ap_block_pp0_stage0_subdone;
reg    ap_block_pp0_stage0_01001;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_63 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_73_reg_72 <= tmp_73_nbreadreq_fu_42_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op9_read_state2 == 1'b1))) begin
        tmp_V_2_reg_76 <= rtTimer2stateTable_r_1_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_nbreadreq_fu_28_p3 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_V_reg_67 <= closeTimer2stateTabl_1_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_V_reg_67_pp0_iter1_reg <= tmp_V_reg_67;
        tmp_reg_63 <= tmp_nbreadreq_fu_28_p3;
        tmp_reg_63_pp0_iter1_reg <= tmp_reg_63;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (tmp_nbreadreq_fu_28_p3 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        closeTimer2stateTabl_1_blk_n = closeTimer2stateTabl_1_empty_n;
    end else begin
        closeTimer2stateTabl_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_nbreadreq_fu_28_p3 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        closeTimer2stateTabl_1_read = 1'b1;
    end else begin
        closeTimer2stateTabl_1_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op9_read_state2 == 1'b1))) begin
        rtTimer2stateTable_r_1_blk_n = rtTimer2stateTable_r_1_empty_n;
    end else begin
        rtTimer2stateTable_r_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op9_read_state2 == 1'b1))) begin
        rtTimer2stateTable_r_1_read = 1'b1;
    end else begin
        rtTimer2stateTable_r_1_read = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (tmp_reg_63_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op14_write_state3 == 1'b1)))) begin
        timer2stateTable_rel_1_blk_n = timer2stateTable_rel_1_full_n;
    end else begin
        timer2stateTable_rel_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        if ((tmp_reg_63_pp0_iter1_reg == 1'd1)) begin
            timer2stateTable_rel_1_din = tmp_V_reg_67_pp0_iter1_reg;
        end else if ((ap_predicate_op14_write_state3 == 1'b1)) begin
            timer2stateTable_rel_1_din = tmp_V_2_reg_76;
        end else begin
            timer2stateTable_rel_1_din = 'bx;
        end
    end else begin
        timer2stateTable_rel_1_din = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_63_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op14_write_state3 == 1'b1)))) begin
        timer2stateTable_rel_1_write = 1'b1;
    end else begin
        timer2stateTable_rel_1_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (((tmp_reg_63_pp0_iter1_reg == 1'd1) & (timer2stateTable_rel_1_full_n == 1'b0)) | ((timer2stateTable_rel_1_full_n == 1'b0) & (ap_predicate_op14_write_state3 == 1'b1)))) | ((rtTimer2stateTable_r_1_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_predicate_op9_read_state2 == 1'b1)) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((tmp_nbreadreq_fu_28_p3 == 1'd1) & (closeTimer2stateTabl_1_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (((tmp_reg_63_pp0_iter1_reg == 1'd1) & (timer2stateTable_rel_1_full_n == 1'b0)) | ((timer2stateTable_rel_1_full_n == 1'b0) & (ap_predicate_op14_write_state3 == 1'b1)))) | ((rtTimer2stateTable_r_1_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_predicate_op9_read_state2 == 1'b1)) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((tmp_nbreadreq_fu_28_p3 == 1'd1) & (closeTimer2stateTabl_1_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (((tmp_reg_63_pp0_iter1_reg == 1'd1) & (timer2stateTable_rel_1_full_n == 1'b0)) | ((timer2stateTable_rel_1_full_n == 1'b0) & (ap_predicate_op14_write_state3 == 1'b1)))) | ((rtTimer2stateTable_r_1_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_predicate_op9_read_state2 == 1'b1)) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((tmp_nbreadreq_fu_28_p3 == 1'd1) & (closeTimer2stateTabl_1_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((tmp_nbreadreq_fu_28_p3 == 1'd1) & (closeTimer2stateTabl_1_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((rtTimer2stateTable_r_1_empty_n == 1'b0) & (ap_predicate_op9_read_state2 == 1'b1));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (((tmp_reg_63_pp0_iter1_reg == 1'd1) & (timer2stateTable_rel_1_full_n == 1'b0)) | ((timer2stateTable_rel_1_full_n == 1'b0) & (ap_predicate_op14_write_state3 == 1'b1)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

always @ (*) begin
    ap_predicate_op14_write_state3 = ((tmp_reg_63_pp0_iter1_reg == 1'd0) & (tmp_73_reg_72 == 1'd1));
end

always @ (*) begin
    ap_predicate_op9_read_state2 = ((tmp_reg_63 == 1'd0) & (tmp_73_nbreadreq_fu_42_p3 == 1'd1));
end

assign tmp_73_nbreadreq_fu_42_p3 = rtTimer2stateTable_r_1_empty_n;

assign tmp_nbreadreq_fu_28_p3 = closeTimer2stateTabl_1_empty_n;

endmodule //stream_merger_1
