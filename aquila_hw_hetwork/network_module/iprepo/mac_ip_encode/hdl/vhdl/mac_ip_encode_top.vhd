-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mac_ip_encode_top is
port (
    s_axis_ip_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    s_axis_ip_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
    s_axis_ip_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_arp_lookup_reply_V_TDATA : IN STD_LOGIC_VECTOR (55 downto 0);
    m_axis_ip_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axis_ip_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axis_ip_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_arp_lookup_request_V_V_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    myMacAddress_V : IN STD_LOGIC_VECTOR (47 downto 0);
    regSubNetMask_V : IN STD_LOGIC_VECTOR (31 downto 0);
    regDefaultGateway_V : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axis_ip_TVALID : IN STD_LOGIC;
    s_axis_ip_TREADY : OUT STD_LOGIC;
    m_axis_arp_lookup_request_V_V_TVALID : OUT STD_LOGIC;
    m_axis_arp_lookup_request_V_V_TREADY : IN STD_LOGIC;
    s_axis_arp_lookup_reply_V_TVALID : IN STD_LOGIC;
    s_axis_arp_lookup_reply_V_TREADY : OUT STD_LOGIC;
    m_axis_ip_TVALID : OUT STD_LOGIC;
    m_axis_ip_TREADY : IN STD_LOGIC );
end;


architecture behav of mac_ip_encode_top is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "mac_ip_encode_top,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k325t-ffg900-2,HLS_INPUT_CLOCK=6.400000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=5.440000,HLS_SYN_LAT=17,HLS_SYN_TPT=1,HLS_SYN_MEM=7,HLS_SYN_DSP=0,HLS_SYN_FF=3174,HLS_SYN_LUT=10848,HLS_VERSION=2019_1}";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal ap_rst_n_inv : STD_LOGIC;
    signal extract_ip_address_U0_ap_start : STD_LOGIC;
    signal extract_ip_address_U0_ap_done : STD_LOGIC;
    signal extract_ip_address_U0_ap_continue : STD_LOGIC;
    signal extract_ip_address_U0_ap_idle : STD_LOGIC;
    signal extract_ip_address_U0_ap_ready : STD_LOGIC;
    signal extract_ip_address_U0_dataStreamBuffer0_V_din : STD_LOGIC_VECTOR (72 downto 0);
    signal extract_ip_address_U0_dataStreamBuffer0_V_write : STD_LOGIC;
    signal extract_ip_address_U0_s_axis_ip_TREADY : STD_LOGIC;
    signal extract_ip_address_U0_arpTableOut_V_V_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal extract_ip_address_U0_arpTableOut_V_V_TVALID : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal compute_ipv4_checksu_U0_ap_start : STD_LOGIC;
    signal compute_ipv4_checksu_U0_ap_done : STD_LOGIC;
    signal compute_ipv4_checksu_U0_ap_continue : STD_LOGIC;
    signal compute_ipv4_checksu_U0_ap_idle : STD_LOGIC;
    signal compute_ipv4_checksu_U0_ap_ready : STD_LOGIC;
    signal compute_ipv4_checksu_U0_dataStreamBuffer0_V_read : STD_LOGIC;
    signal compute_ipv4_checksu_U0_dataStreamBuffer1_V_din : STD_LOGIC_VECTOR (72 downto 0);
    signal compute_ipv4_checksu_U0_dataStreamBuffer1_V_write : STD_LOGIC;
    signal compute_ipv4_checksu_U0_subSumFifo_V_sum_V_0_din : STD_LOGIC_VECTOR (16 downto 0);
    signal compute_ipv4_checksu_U0_subSumFifo_V_sum_V_0_write : STD_LOGIC;
    signal compute_ipv4_checksu_U0_subSumFifo_V_sum_V_1_din : STD_LOGIC_VECTOR (16 downto 0);
    signal compute_ipv4_checksu_U0_subSumFifo_V_sum_V_1_write : STD_LOGIC;
    signal compute_ipv4_checksu_U0_subSumFifo_V_sum_V_2_din : STD_LOGIC_VECTOR (16 downto 0);
    signal compute_ipv4_checksu_U0_subSumFifo_V_sum_V_2_write : STD_LOGIC;
    signal compute_ipv4_checksu_U0_subSumFifo_V_sum_V_3_din : STD_LOGIC_VECTOR (16 downto 0);
    signal compute_ipv4_checksu_U0_subSumFifo_V_sum_V_3_write : STD_LOGIC;
    signal finalize_ipv4_checks_U0_ap_start : STD_LOGIC;
    signal finalize_ipv4_checks_U0_ap_done : STD_LOGIC;
    signal finalize_ipv4_checks_U0_ap_continue : STD_LOGIC;
    signal finalize_ipv4_checks_U0_ap_idle : STD_LOGIC;
    signal finalize_ipv4_checks_U0_ap_ready : STD_LOGIC;
    signal finalize_ipv4_checks_U0_subSumFifo_V_sum_V_0_read : STD_LOGIC;
    signal finalize_ipv4_checks_U0_subSumFifo_V_sum_V_1_read : STD_LOGIC;
    signal finalize_ipv4_checks_U0_subSumFifo_V_sum_V_2_read : STD_LOGIC;
    signal finalize_ipv4_checks_U0_subSumFifo_V_sum_V_3_read : STD_LOGIC;
    signal finalize_ipv4_checks_U0_checksumFifo_V_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal finalize_ipv4_checks_U0_checksumFifo_V_V_write : STD_LOGIC;
    signal insert_ip_checksum_U0_ap_start : STD_LOGIC;
    signal insert_ip_checksum_U0_ap_done : STD_LOGIC;
    signal insert_ip_checksum_U0_ap_continue : STD_LOGIC;
    signal insert_ip_checksum_U0_ap_idle : STD_LOGIC;
    signal insert_ip_checksum_U0_ap_ready : STD_LOGIC;
    signal insert_ip_checksum_U0_dataStreamBuffer1_V_read : STD_LOGIC;
    signal insert_ip_checksum_U0_checksumFifo_V_V_read : STD_LOGIC;
    signal insert_ip_checksum_U0_dataStreamBuffer2_V_din : STD_LOGIC_VECTOR (72 downto 0);
    signal insert_ip_checksum_U0_dataStreamBuffer2_V_write : STD_LOGIC;
    signal handle_arp_reply_64_U0_ap_start : STD_LOGIC;
    signal handle_arp_reply_64_U0_ap_done : STD_LOGIC;
    signal handle_arp_reply_64_U0_ap_continue : STD_LOGIC;
    signal handle_arp_reply_64_U0_ap_idle : STD_LOGIC;
    signal handle_arp_reply_64_U0_ap_ready : STD_LOGIC;
    signal handle_arp_reply_64_U0_dataStreamBuffer2_V_read : STD_LOGIC;
    signal handle_arp_reply_64_U0_dataStreamBuffer3_V_din : STD_LOGIC_VECTOR (72 downto 0);
    signal handle_arp_reply_64_U0_dataStreamBuffer3_V_write : STD_LOGIC;
    signal handle_arp_reply_64_U0_headerFifo_V_din : STD_LOGIC_VECTOR (128 downto 0);
    signal handle_arp_reply_64_U0_headerFifo_V_write : STD_LOGIC;
    signal handle_arp_reply_64_U0_arpTableIn_V_TREADY : STD_LOGIC;
    signal lshiftWordByOctet_U0_ap_start : STD_LOGIC;
    signal lshiftWordByOctet_U0_ap_done : STD_LOGIC;
    signal lshiftWordByOctet_U0_ap_continue : STD_LOGIC;
    signal lshiftWordByOctet_U0_ap_idle : STD_LOGIC;
    signal lshiftWordByOctet_U0_ap_ready : STD_LOGIC;
    signal lshiftWordByOctet_U0_dataStreamBuffer3_V_read : STD_LOGIC;
    signal lshiftWordByOctet_U0_dataStreamBuffer4_V_din : STD_LOGIC_VECTOR (72 downto 0);
    signal lshiftWordByOctet_U0_dataStreamBuffer4_V_write : STD_LOGIC;
    signal insert_ethernet_head_U0_ap_start : STD_LOGIC;
    signal insert_ethernet_head_U0_ap_done : STD_LOGIC;
    signal insert_ethernet_head_U0_ap_continue : STD_LOGIC;
    signal insert_ethernet_head_U0_ap_idle : STD_LOGIC;
    signal insert_ethernet_head_U0_ap_ready : STD_LOGIC;
    signal insert_ethernet_head_U0_dataStreamBuffer4_V_read : STD_LOGIC;
    signal insert_ethernet_head_U0_headerFifo_V_read : STD_LOGIC;
    signal insert_ethernet_head_U0_m_axis_ip_TDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal insert_ethernet_head_U0_m_axis_ip_TVALID : STD_LOGIC;
    signal insert_ethernet_head_U0_m_axis_ip_TKEEP : STD_LOGIC_VECTOR (7 downto 0);
    signal insert_ethernet_head_U0_m_axis_ip_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal dataStreamBuffer0_V_full_n : STD_LOGIC;
    signal dataStreamBuffer0_V_dout : STD_LOGIC_VECTOR (72 downto 0);
    signal dataStreamBuffer0_V_empty_n : STD_LOGIC;
    signal dataStreamBuffer1_V_full_n : STD_LOGIC;
    signal dataStreamBuffer1_V_dout : STD_LOGIC_VECTOR (72 downto 0);
    signal dataStreamBuffer1_V_empty_n : STD_LOGIC;
    signal subSumFifo_V_sum_V_0_full_n : STD_LOGIC;
    signal subSumFifo_V_sum_V_0_dout : STD_LOGIC_VECTOR (16 downto 0);
    signal subSumFifo_V_sum_V_0_empty_n : STD_LOGIC;
    signal subSumFifo_V_sum_V_1_full_n : STD_LOGIC;
    signal subSumFifo_V_sum_V_1_dout : STD_LOGIC_VECTOR (16 downto 0);
    signal subSumFifo_V_sum_V_1_empty_n : STD_LOGIC;
    signal subSumFifo_V_sum_V_2_full_n : STD_LOGIC;
    signal subSumFifo_V_sum_V_2_dout : STD_LOGIC_VECTOR (16 downto 0);
    signal subSumFifo_V_sum_V_2_empty_n : STD_LOGIC;
    signal subSumFifo_V_sum_V_3_full_n : STD_LOGIC;
    signal subSumFifo_V_sum_V_3_dout : STD_LOGIC_VECTOR (16 downto 0);
    signal subSumFifo_V_sum_V_3_empty_n : STD_LOGIC;
    signal checksumFifo_V_V_full_n : STD_LOGIC;
    signal checksumFifo_V_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal checksumFifo_V_V_empty_n : STD_LOGIC;
    signal dataStreamBuffer2_V_full_n : STD_LOGIC;
    signal dataStreamBuffer2_V_dout : STD_LOGIC_VECTOR (72 downto 0);
    signal dataStreamBuffer2_V_empty_n : STD_LOGIC;
    signal headerFifo_V_full_n : STD_LOGIC;
    signal headerFifo_V_dout : STD_LOGIC_VECTOR (128 downto 0);
    signal headerFifo_V_empty_n : STD_LOGIC;
    signal dataStreamBuffer3_V_full_n : STD_LOGIC;
    signal dataStreamBuffer3_V_dout : STD_LOGIC_VECTOR (72 downto 0);
    signal dataStreamBuffer3_V_empty_n : STD_LOGIC;
    signal dataStreamBuffer4_V_full_n : STD_LOGIC;
    signal dataStreamBuffer4_V_dout : STD_LOGIC_VECTOR (72 downto 0);
    signal dataStreamBuffer4_V_empty_n : STD_LOGIC;

    component extract_ip_address IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        s_axis_ip_TVALID : IN STD_LOGIC;
        dataStreamBuffer0_V_din : OUT STD_LOGIC_VECTOR (72 downto 0);
        dataStreamBuffer0_V_full_n : IN STD_LOGIC;
        dataStreamBuffer0_V_write : OUT STD_LOGIC;
        arpTableOut_V_V_TREADY : IN STD_LOGIC;
        s_axis_ip_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        s_axis_ip_TREADY : OUT STD_LOGIC;
        s_axis_ip_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
        s_axis_ip_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        arpTableOut_V_V_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        arpTableOut_V_V_TVALID : OUT STD_LOGIC;
        regSubNetMask_V : IN STD_LOGIC_VECTOR (31 downto 0);
        regDefaultGateway_V : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component compute_ipv4_checksu IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        dataStreamBuffer0_V_dout : IN STD_LOGIC_VECTOR (72 downto 0);
        dataStreamBuffer0_V_empty_n : IN STD_LOGIC;
        dataStreamBuffer0_V_read : OUT STD_LOGIC;
        dataStreamBuffer1_V_din : OUT STD_LOGIC_VECTOR (72 downto 0);
        dataStreamBuffer1_V_full_n : IN STD_LOGIC;
        dataStreamBuffer1_V_write : OUT STD_LOGIC;
        subSumFifo_V_sum_V_0_din : OUT STD_LOGIC_VECTOR (16 downto 0);
        subSumFifo_V_sum_V_0_full_n : IN STD_LOGIC;
        subSumFifo_V_sum_V_0_write : OUT STD_LOGIC;
        subSumFifo_V_sum_V_1_din : OUT STD_LOGIC_VECTOR (16 downto 0);
        subSumFifo_V_sum_V_1_full_n : IN STD_LOGIC;
        subSumFifo_V_sum_V_1_write : OUT STD_LOGIC;
        subSumFifo_V_sum_V_2_din : OUT STD_LOGIC_VECTOR (16 downto 0);
        subSumFifo_V_sum_V_2_full_n : IN STD_LOGIC;
        subSumFifo_V_sum_V_2_write : OUT STD_LOGIC;
        subSumFifo_V_sum_V_3_din : OUT STD_LOGIC_VECTOR (16 downto 0);
        subSumFifo_V_sum_V_3_full_n : IN STD_LOGIC;
        subSumFifo_V_sum_V_3_write : OUT STD_LOGIC );
    end component;


    component finalize_ipv4_checks IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        subSumFifo_V_sum_V_0_dout : IN STD_LOGIC_VECTOR (16 downto 0);
        subSumFifo_V_sum_V_0_empty_n : IN STD_LOGIC;
        subSumFifo_V_sum_V_0_read : OUT STD_LOGIC;
        subSumFifo_V_sum_V_1_dout : IN STD_LOGIC_VECTOR (16 downto 0);
        subSumFifo_V_sum_V_1_empty_n : IN STD_LOGIC;
        subSumFifo_V_sum_V_1_read : OUT STD_LOGIC;
        subSumFifo_V_sum_V_2_dout : IN STD_LOGIC_VECTOR (16 downto 0);
        subSumFifo_V_sum_V_2_empty_n : IN STD_LOGIC;
        subSumFifo_V_sum_V_2_read : OUT STD_LOGIC;
        subSumFifo_V_sum_V_3_dout : IN STD_LOGIC_VECTOR (16 downto 0);
        subSumFifo_V_sum_V_3_empty_n : IN STD_LOGIC;
        subSumFifo_V_sum_V_3_read : OUT STD_LOGIC;
        checksumFifo_V_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        checksumFifo_V_V_full_n : IN STD_LOGIC;
        checksumFifo_V_V_write : OUT STD_LOGIC );
    end component;


    component insert_ip_checksum IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        dataStreamBuffer1_V_dout : IN STD_LOGIC_VECTOR (72 downto 0);
        dataStreamBuffer1_V_empty_n : IN STD_LOGIC;
        dataStreamBuffer1_V_read : OUT STD_LOGIC;
        checksumFifo_V_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        checksumFifo_V_V_empty_n : IN STD_LOGIC;
        checksumFifo_V_V_read : OUT STD_LOGIC;
        dataStreamBuffer2_V_din : OUT STD_LOGIC_VECTOR (72 downto 0);
        dataStreamBuffer2_V_full_n : IN STD_LOGIC;
        dataStreamBuffer2_V_write : OUT STD_LOGIC );
    end component;


    component handle_arp_reply_64_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        dataStreamBuffer2_V_dout : IN STD_LOGIC_VECTOR (72 downto 0);
        dataStreamBuffer2_V_empty_n : IN STD_LOGIC;
        dataStreamBuffer2_V_read : OUT STD_LOGIC;
        arpTableIn_V_TVALID : IN STD_LOGIC;
        dataStreamBuffer3_V_din : OUT STD_LOGIC_VECTOR (72 downto 0);
        dataStreamBuffer3_V_full_n : IN STD_LOGIC;
        dataStreamBuffer3_V_write : OUT STD_LOGIC;
        headerFifo_V_din : OUT STD_LOGIC_VECTOR (128 downto 0);
        headerFifo_V_full_n : IN STD_LOGIC;
        headerFifo_V_write : OUT STD_LOGIC;
        arpTableIn_V_TDATA : IN STD_LOGIC_VECTOR (55 downto 0);
        arpTableIn_V_TREADY : OUT STD_LOGIC;
        myMacAddress_V : IN STD_LOGIC_VECTOR (47 downto 0) );
    end component;


    component lshiftWordByOctet IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        dataStreamBuffer3_V_dout : IN STD_LOGIC_VECTOR (72 downto 0);
        dataStreamBuffer3_V_empty_n : IN STD_LOGIC;
        dataStreamBuffer3_V_read : OUT STD_LOGIC;
        dataStreamBuffer4_V_din : OUT STD_LOGIC_VECTOR (72 downto 0);
        dataStreamBuffer4_V_full_n : IN STD_LOGIC;
        dataStreamBuffer4_V_write : OUT STD_LOGIC );
    end component;


    component insert_ethernet_head IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        dataStreamBuffer4_V_dout : IN STD_LOGIC_VECTOR (72 downto 0);
        dataStreamBuffer4_V_empty_n : IN STD_LOGIC;
        dataStreamBuffer4_V_read : OUT STD_LOGIC;
        headerFifo_V_dout : IN STD_LOGIC_VECTOR (128 downto 0);
        headerFifo_V_empty_n : IN STD_LOGIC;
        headerFifo_V_read : OUT STD_LOGIC;
        m_axis_ip_TREADY : IN STD_LOGIC;
        m_axis_ip_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axis_ip_TVALID : OUT STD_LOGIC;
        m_axis_ip_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axis_ip_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component fifo_w73_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (72 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (72 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w73_d32_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (72 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (72 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w17_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (16 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (16 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w16_d16_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w129_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (128 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (128 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    extract_ip_address_U0 : component extract_ip_address
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => extract_ip_address_U0_ap_start,
        ap_done => extract_ip_address_U0_ap_done,
        ap_continue => extract_ip_address_U0_ap_continue,
        ap_idle => extract_ip_address_U0_ap_idle,
        ap_ready => extract_ip_address_U0_ap_ready,
        s_axis_ip_TVALID => s_axis_ip_TVALID,
        dataStreamBuffer0_V_din => extract_ip_address_U0_dataStreamBuffer0_V_din,
        dataStreamBuffer0_V_full_n => dataStreamBuffer0_V_full_n,
        dataStreamBuffer0_V_write => extract_ip_address_U0_dataStreamBuffer0_V_write,
        arpTableOut_V_V_TREADY => m_axis_arp_lookup_request_V_V_TREADY,
        s_axis_ip_TDATA => s_axis_ip_TDATA,
        s_axis_ip_TREADY => extract_ip_address_U0_s_axis_ip_TREADY,
        s_axis_ip_TKEEP => s_axis_ip_TKEEP,
        s_axis_ip_TLAST => s_axis_ip_TLAST,
        arpTableOut_V_V_TDATA => extract_ip_address_U0_arpTableOut_V_V_TDATA,
        arpTableOut_V_V_TVALID => extract_ip_address_U0_arpTableOut_V_V_TVALID,
        regSubNetMask_V => regSubNetMask_V,
        regDefaultGateway_V => regDefaultGateway_V);

    compute_ipv4_checksu_U0 : component compute_ipv4_checksu
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => compute_ipv4_checksu_U0_ap_start,
        ap_done => compute_ipv4_checksu_U0_ap_done,
        ap_continue => compute_ipv4_checksu_U0_ap_continue,
        ap_idle => compute_ipv4_checksu_U0_ap_idle,
        ap_ready => compute_ipv4_checksu_U0_ap_ready,
        dataStreamBuffer0_V_dout => dataStreamBuffer0_V_dout,
        dataStreamBuffer0_V_empty_n => dataStreamBuffer0_V_empty_n,
        dataStreamBuffer0_V_read => compute_ipv4_checksu_U0_dataStreamBuffer0_V_read,
        dataStreamBuffer1_V_din => compute_ipv4_checksu_U0_dataStreamBuffer1_V_din,
        dataStreamBuffer1_V_full_n => dataStreamBuffer1_V_full_n,
        dataStreamBuffer1_V_write => compute_ipv4_checksu_U0_dataStreamBuffer1_V_write,
        subSumFifo_V_sum_V_0_din => compute_ipv4_checksu_U0_subSumFifo_V_sum_V_0_din,
        subSumFifo_V_sum_V_0_full_n => subSumFifo_V_sum_V_0_full_n,
        subSumFifo_V_sum_V_0_write => compute_ipv4_checksu_U0_subSumFifo_V_sum_V_0_write,
        subSumFifo_V_sum_V_1_din => compute_ipv4_checksu_U0_subSumFifo_V_sum_V_1_din,
        subSumFifo_V_sum_V_1_full_n => subSumFifo_V_sum_V_1_full_n,
        subSumFifo_V_sum_V_1_write => compute_ipv4_checksu_U0_subSumFifo_V_sum_V_1_write,
        subSumFifo_V_sum_V_2_din => compute_ipv4_checksu_U0_subSumFifo_V_sum_V_2_din,
        subSumFifo_V_sum_V_2_full_n => subSumFifo_V_sum_V_2_full_n,
        subSumFifo_V_sum_V_2_write => compute_ipv4_checksu_U0_subSumFifo_V_sum_V_2_write,
        subSumFifo_V_sum_V_3_din => compute_ipv4_checksu_U0_subSumFifo_V_sum_V_3_din,
        subSumFifo_V_sum_V_3_full_n => subSumFifo_V_sum_V_3_full_n,
        subSumFifo_V_sum_V_3_write => compute_ipv4_checksu_U0_subSumFifo_V_sum_V_3_write);

    finalize_ipv4_checks_U0 : component finalize_ipv4_checks
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => finalize_ipv4_checks_U0_ap_start,
        ap_done => finalize_ipv4_checks_U0_ap_done,
        ap_continue => finalize_ipv4_checks_U0_ap_continue,
        ap_idle => finalize_ipv4_checks_U0_ap_idle,
        ap_ready => finalize_ipv4_checks_U0_ap_ready,
        subSumFifo_V_sum_V_0_dout => subSumFifo_V_sum_V_0_dout,
        subSumFifo_V_sum_V_0_empty_n => subSumFifo_V_sum_V_0_empty_n,
        subSumFifo_V_sum_V_0_read => finalize_ipv4_checks_U0_subSumFifo_V_sum_V_0_read,
        subSumFifo_V_sum_V_1_dout => subSumFifo_V_sum_V_1_dout,
        subSumFifo_V_sum_V_1_empty_n => subSumFifo_V_sum_V_1_empty_n,
        subSumFifo_V_sum_V_1_read => finalize_ipv4_checks_U0_subSumFifo_V_sum_V_1_read,
        subSumFifo_V_sum_V_2_dout => subSumFifo_V_sum_V_2_dout,
        subSumFifo_V_sum_V_2_empty_n => subSumFifo_V_sum_V_2_empty_n,
        subSumFifo_V_sum_V_2_read => finalize_ipv4_checks_U0_subSumFifo_V_sum_V_2_read,
        subSumFifo_V_sum_V_3_dout => subSumFifo_V_sum_V_3_dout,
        subSumFifo_V_sum_V_3_empty_n => subSumFifo_V_sum_V_3_empty_n,
        subSumFifo_V_sum_V_3_read => finalize_ipv4_checks_U0_subSumFifo_V_sum_V_3_read,
        checksumFifo_V_V_din => finalize_ipv4_checks_U0_checksumFifo_V_V_din,
        checksumFifo_V_V_full_n => checksumFifo_V_V_full_n,
        checksumFifo_V_V_write => finalize_ipv4_checks_U0_checksumFifo_V_V_write);

    insert_ip_checksum_U0 : component insert_ip_checksum
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => insert_ip_checksum_U0_ap_start,
        ap_done => insert_ip_checksum_U0_ap_done,
        ap_continue => insert_ip_checksum_U0_ap_continue,
        ap_idle => insert_ip_checksum_U0_ap_idle,
        ap_ready => insert_ip_checksum_U0_ap_ready,
        dataStreamBuffer1_V_dout => dataStreamBuffer1_V_dout,
        dataStreamBuffer1_V_empty_n => dataStreamBuffer1_V_empty_n,
        dataStreamBuffer1_V_read => insert_ip_checksum_U0_dataStreamBuffer1_V_read,
        checksumFifo_V_V_dout => checksumFifo_V_V_dout,
        checksumFifo_V_V_empty_n => checksumFifo_V_V_empty_n,
        checksumFifo_V_V_read => insert_ip_checksum_U0_checksumFifo_V_V_read,
        dataStreamBuffer2_V_din => insert_ip_checksum_U0_dataStreamBuffer2_V_din,
        dataStreamBuffer2_V_full_n => dataStreamBuffer2_V_full_n,
        dataStreamBuffer2_V_write => insert_ip_checksum_U0_dataStreamBuffer2_V_write);

    handle_arp_reply_64_U0 : component handle_arp_reply_64_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => handle_arp_reply_64_U0_ap_start,
        ap_done => handle_arp_reply_64_U0_ap_done,
        ap_continue => handle_arp_reply_64_U0_ap_continue,
        ap_idle => handle_arp_reply_64_U0_ap_idle,
        ap_ready => handle_arp_reply_64_U0_ap_ready,
        dataStreamBuffer2_V_dout => dataStreamBuffer2_V_dout,
        dataStreamBuffer2_V_empty_n => dataStreamBuffer2_V_empty_n,
        dataStreamBuffer2_V_read => handle_arp_reply_64_U0_dataStreamBuffer2_V_read,
        arpTableIn_V_TVALID => s_axis_arp_lookup_reply_V_TVALID,
        dataStreamBuffer3_V_din => handle_arp_reply_64_U0_dataStreamBuffer3_V_din,
        dataStreamBuffer3_V_full_n => dataStreamBuffer3_V_full_n,
        dataStreamBuffer3_V_write => handle_arp_reply_64_U0_dataStreamBuffer3_V_write,
        headerFifo_V_din => handle_arp_reply_64_U0_headerFifo_V_din,
        headerFifo_V_full_n => headerFifo_V_full_n,
        headerFifo_V_write => handle_arp_reply_64_U0_headerFifo_V_write,
        arpTableIn_V_TDATA => s_axis_arp_lookup_reply_V_TDATA,
        arpTableIn_V_TREADY => handle_arp_reply_64_U0_arpTableIn_V_TREADY,
        myMacAddress_V => myMacAddress_V);

    lshiftWordByOctet_U0 : component lshiftWordByOctet
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => lshiftWordByOctet_U0_ap_start,
        ap_done => lshiftWordByOctet_U0_ap_done,
        ap_continue => lshiftWordByOctet_U0_ap_continue,
        ap_idle => lshiftWordByOctet_U0_ap_idle,
        ap_ready => lshiftWordByOctet_U0_ap_ready,
        dataStreamBuffer3_V_dout => dataStreamBuffer3_V_dout,
        dataStreamBuffer3_V_empty_n => dataStreamBuffer3_V_empty_n,
        dataStreamBuffer3_V_read => lshiftWordByOctet_U0_dataStreamBuffer3_V_read,
        dataStreamBuffer4_V_din => lshiftWordByOctet_U0_dataStreamBuffer4_V_din,
        dataStreamBuffer4_V_full_n => dataStreamBuffer4_V_full_n,
        dataStreamBuffer4_V_write => lshiftWordByOctet_U0_dataStreamBuffer4_V_write);

    insert_ethernet_head_U0 : component insert_ethernet_head
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => insert_ethernet_head_U0_ap_start,
        ap_done => insert_ethernet_head_U0_ap_done,
        ap_continue => insert_ethernet_head_U0_ap_continue,
        ap_idle => insert_ethernet_head_U0_ap_idle,
        ap_ready => insert_ethernet_head_U0_ap_ready,
        dataStreamBuffer4_V_dout => dataStreamBuffer4_V_dout,
        dataStreamBuffer4_V_empty_n => dataStreamBuffer4_V_empty_n,
        dataStreamBuffer4_V_read => insert_ethernet_head_U0_dataStreamBuffer4_V_read,
        headerFifo_V_dout => headerFifo_V_dout,
        headerFifo_V_empty_n => headerFifo_V_empty_n,
        headerFifo_V_read => insert_ethernet_head_U0_headerFifo_V_read,
        m_axis_ip_TREADY => m_axis_ip_TREADY,
        m_axis_ip_TDATA => insert_ethernet_head_U0_m_axis_ip_TDATA,
        m_axis_ip_TVALID => insert_ethernet_head_U0_m_axis_ip_TVALID,
        m_axis_ip_TKEEP => insert_ethernet_head_U0_m_axis_ip_TKEEP,
        m_axis_ip_TLAST => insert_ethernet_head_U0_m_axis_ip_TLAST);

    dataStreamBuffer0_V_U : component fifo_w73_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => extract_ip_address_U0_dataStreamBuffer0_V_din,
        if_full_n => dataStreamBuffer0_V_full_n,
        if_write => extract_ip_address_U0_dataStreamBuffer0_V_write,
        if_dout => dataStreamBuffer0_V_dout,
        if_empty_n => dataStreamBuffer0_V_empty_n,
        if_read => compute_ipv4_checksu_U0_dataStreamBuffer0_V_read);

    dataStreamBuffer1_V_U : component fifo_w73_d32_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => compute_ipv4_checksu_U0_dataStreamBuffer1_V_din,
        if_full_n => dataStreamBuffer1_V_full_n,
        if_write => compute_ipv4_checksu_U0_dataStreamBuffer1_V_write,
        if_dout => dataStreamBuffer1_V_dout,
        if_empty_n => dataStreamBuffer1_V_empty_n,
        if_read => insert_ip_checksum_U0_dataStreamBuffer1_V_read);

    subSumFifo_V_sum_V_0_U : component fifo_w17_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => compute_ipv4_checksu_U0_subSumFifo_V_sum_V_0_din,
        if_full_n => subSumFifo_V_sum_V_0_full_n,
        if_write => compute_ipv4_checksu_U0_subSumFifo_V_sum_V_0_write,
        if_dout => subSumFifo_V_sum_V_0_dout,
        if_empty_n => subSumFifo_V_sum_V_0_empty_n,
        if_read => finalize_ipv4_checks_U0_subSumFifo_V_sum_V_0_read);

    subSumFifo_V_sum_V_1_U : component fifo_w17_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => compute_ipv4_checksu_U0_subSumFifo_V_sum_V_1_din,
        if_full_n => subSumFifo_V_sum_V_1_full_n,
        if_write => compute_ipv4_checksu_U0_subSumFifo_V_sum_V_1_write,
        if_dout => subSumFifo_V_sum_V_1_dout,
        if_empty_n => subSumFifo_V_sum_V_1_empty_n,
        if_read => finalize_ipv4_checks_U0_subSumFifo_V_sum_V_1_read);

    subSumFifo_V_sum_V_2_U : component fifo_w17_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => compute_ipv4_checksu_U0_subSumFifo_V_sum_V_2_din,
        if_full_n => subSumFifo_V_sum_V_2_full_n,
        if_write => compute_ipv4_checksu_U0_subSumFifo_V_sum_V_2_write,
        if_dout => subSumFifo_V_sum_V_2_dout,
        if_empty_n => subSumFifo_V_sum_V_2_empty_n,
        if_read => finalize_ipv4_checks_U0_subSumFifo_V_sum_V_2_read);

    subSumFifo_V_sum_V_3_U : component fifo_w17_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => compute_ipv4_checksu_U0_subSumFifo_V_sum_V_3_din,
        if_full_n => subSumFifo_V_sum_V_3_full_n,
        if_write => compute_ipv4_checksu_U0_subSumFifo_V_sum_V_3_write,
        if_dout => subSumFifo_V_sum_V_3_dout,
        if_empty_n => subSumFifo_V_sum_V_3_empty_n,
        if_read => finalize_ipv4_checks_U0_subSumFifo_V_sum_V_3_read);

    checksumFifo_V_V_U : component fifo_w16_d16_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => finalize_ipv4_checks_U0_checksumFifo_V_V_din,
        if_full_n => checksumFifo_V_V_full_n,
        if_write => finalize_ipv4_checks_U0_checksumFifo_V_V_write,
        if_dout => checksumFifo_V_V_dout,
        if_empty_n => checksumFifo_V_V_empty_n,
        if_read => insert_ip_checksum_U0_checksumFifo_V_V_read);

    dataStreamBuffer2_V_U : component fifo_w73_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => insert_ip_checksum_U0_dataStreamBuffer2_V_din,
        if_full_n => dataStreamBuffer2_V_full_n,
        if_write => insert_ip_checksum_U0_dataStreamBuffer2_V_write,
        if_dout => dataStreamBuffer2_V_dout,
        if_empty_n => dataStreamBuffer2_V_empty_n,
        if_read => handle_arp_reply_64_U0_dataStreamBuffer2_V_read);

    headerFifo_V_U : component fifo_w129_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => handle_arp_reply_64_U0_headerFifo_V_din,
        if_full_n => headerFifo_V_full_n,
        if_write => handle_arp_reply_64_U0_headerFifo_V_write,
        if_dout => headerFifo_V_dout,
        if_empty_n => headerFifo_V_empty_n,
        if_read => insert_ethernet_head_U0_headerFifo_V_read);

    dataStreamBuffer3_V_U : component fifo_w73_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => handle_arp_reply_64_U0_dataStreamBuffer3_V_din,
        if_full_n => dataStreamBuffer3_V_full_n,
        if_write => handle_arp_reply_64_U0_dataStreamBuffer3_V_write,
        if_dout => dataStreamBuffer3_V_dout,
        if_empty_n => dataStreamBuffer3_V_empty_n,
        if_read => lshiftWordByOctet_U0_dataStreamBuffer3_V_read);

    dataStreamBuffer4_V_U : component fifo_w73_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => lshiftWordByOctet_U0_dataStreamBuffer4_V_din,
        if_full_n => dataStreamBuffer4_V_full_n,
        if_write => lshiftWordByOctet_U0_dataStreamBuffer4_V_write,
        if_dout => dataStreamBuffer4_V_dout,
        if_empty_n => dataStreamBuffer4_V_empty_n,
        if_read => insert_ethernet_head_U0_dataStreamBuffer4_V_read);





    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_continue <= ap_const_logic_0;
    compute_ipv4_checksu_U0_ap_continue <= ap_const_logic_1;
    compute_ipv4_checksu_U0_ap_start <= ap_const_logic_1;
    extract_ip_address_U0_ap_continue <= ap_const_logic_1;
    extract_ip_address_U0_ap_start <= ap_const_logic_1;
    finalize_ipv4_checks_U0_ap_continue <= ap_const_logic_1;
    finalize_ipv4_checks_U0_ap_start <= ap_const_logic_1;
    handle_arp_reply_64_U0_ap_continue <= ap_const_logic_1;
    handle_arp_reply_64_U0_ap_start <= ap_const_logic_1;
    insert_ethernet_head_U0_ap_continue <= ap_const_logic_1;
    insert_ethernet_head_U0_ap_start <= ap_const_logic_1;
    insert_ip_checksum_U0_ap_continue <= ap_const_logic_1;
    insert_ip_checksum_U0_ap_start <= ap_const_logic_1;
    lshiftWordByOctet_U0_ap_continue <= ap_const_logic_1;
    lshiftWordByOctet_U0_ap_start <= ap_const_logic_1;
    m_axis_arp_lookup_request_V_V_TDATA <= extract_ip_address_U0_arpTableOut_V_V_TDATA;
    m_axis_arp_lookup_request_V_V_TVALID <= extract_ip_address_U0_arpTableOut_V_V_TVALID;
    m_axis_ip_TDATA <= insert_ethernet_head_U0_m_axis_ip_TDATA;
    m_axis_ip_TKEEP <= insert_ethernet_head_U0_m_axis_ip_TKEEP;
    m_axis_ip_TLAST <= insert_ethernet_head_U0_m_axis_ip_TLAST;
    m_axis_ip_TVALID <= insert_ethernet_head_U0_m_axis_ip_TVALID;
    s_axis_arp_lookup_reply_V_TREADY <= handle_arp_reply_64_U0_arpTableIn_V_TREADY;
    s_axis_ip_TREADY <= extract_ip_address_U0_s_axis_ip_TREADY;
end behav;
