// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module generate_ipv4_64_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        tx_shift2ipv4Fifo_V_1_dout,
        tx_shift2ipv4Fifo_V_1_empty_n,
        tx_shift2ipv4Fifo_V_1_read,
        tx_shift2ipv4Fifo_V_2_dout,
        tx_shift2ipv4Fifo_V_2_empty_n,
        tx_shift2ipv4Fifo_V_2_read,
        tx_shift2ipv4Fifo_V_s_dout,
        tx_shift2ipv4Fifo_V_s_empty_n,
        tx_shift2ipv4Fifo_V_s_read,
        txEng_ipMetaDataFifoIn_V_TVALID,
        m_axis_tx_data_TREADY,
        txEng_ipMetaDataFifoIn_V_TDATA,
        txEng_ipMetaDataFifoIn_V_TREADY,
        m_axis_tx_data_TDATA,
        m_axis_tx_data_TVALID,
        m_axis_tx_data_TKEEP,
        m_axis_tx_data_TLAST,
        local_ipv4_address_V,
        protocol_V
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;
parameter    ap_const_lv64_0 = 64'd0;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [63:0] tx_shift2ipv4Fifo_V_1_dout;
input   tx_shift2ipv4Fifo_V_1_empty_n;
output   tx_shift2ipv4Fifo_V_1_read;
input  [7:0] tx_shift2ipv4Fifo_V_2_dout;
input   tx_shift2ipv4Fifo_V_2_empty_n;
output   tx_shift2ipv4Fifo_V_2_read;
input  [0:0] tx_shift2ipv4Fifo_V_s_dout;
input   tx_shift2ipv4Fifo_V_s_empty_n;
output   tx_shift2ipv4Fifo_V_s_read;
input   txEng_ipMetaDataFifoIn_V_TVALID;
input   m_axis_tx_data_TREADY;
input  [47:0] txEng_ipMetaDataFifoIn_V_TDATA;
output   txEng_ipMetaDataFifoIn_V_TREADY;
output  [63:0] m_axis_tx_data_TDATA;
output   m_axis_tx_data_TVALID;
output  [7:0] m_axis_tx_data_TKEEP;
output  [0:0] m_axis_tx_data_TLAST;
input  [31:0] local_ipv4_address_V;
input  [7:0] protocol_V;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg tx_shift2ipv4Fifo_V_1_read;
reg tx_shift2ipv4Fifo_V_2_read;
reg tx_shift2ipv4Fifo_V_s_read;
reg txEng_ipMetaDataFifoIn_V_TREADY;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    io_acc_block_signal_op10;
wire   [1:0] gi_state_load_load_fu_260_p1;
wire   [0:0] grp_nbreadreq_fu_178_p5;
reg    ap_predicate_op10_read_state1;
wire    io_acc_block_signal_op16;
reg    ap_predicate_op16_read_state1;
wire   [0:0] tmp_nbreadreq_fu_200_p3;
reg    ap_predicate_op119_read_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    m_axis_tx_data_V_data_V_1_ack_in;
reg   [1:0] gi_state_load_reg_1108;
reg   [0:0] tmp_4_reg_1112;
reg    ap_predicate_op135_write_state2;
reg   [0:0] tmp_3_reg_1121;
reg    ap_predicate_op149_write_state2;
reg    ap_block_state2_io;
wire    m_axis_tx_data_V_data_V_1_ack_out;
reg   [1:0] m_axis_tx_data_V_data_V_1_state;
wire    m_axis_tx_data_V_keep_V_1_ack_out;
reg   [1:0] m_axis_tx_data_V_keep_V_1_state;
wire    m_axis_tx_data_V_last_V_1_ack_out;
reg   [1:0] m_axis_tx_data_V_last_V_1_state;
reg    ap_block_state3_pp0_stage0_iter2;
reg   [1:0] gi_state_load_reg_1108_pp0_iter1_reg;
reg   [0:0] tmp_4_reg_1112_pp0_iter1_reg;
reg    ap_predicate_op167_write_state3;
reg   [0:0] tmp_3_reg_1121_pp0_iter1_reg;
reg    ap_predicate_op171_write_state3;
reg    ap_block_state3_io;
reg    ap_block_pp0_stage0_11001;
reg   [63:0] m_axis_tx_data_V_data_V_1_data_in;
reg   [63:0] m_axis_tx_data_V_data_V_1_data_out;
reg    m_axis_tx_data_V_data_V_1_vld_in;
wire    m_axis_tx_data_V_data_V_1_vld_out;
reg   [63:0] m_axis_tx_data_V_data_V_1_payload_A;
reg   [63:0] m_axis_tx_data_V_data_V_1_payload_B;
reg    m_axis_tx_data_V_data_V_1_sel_rd;
reg    m_axis_tx_data_V_data_V_1_sel_wr;
wire    m_axis_tx_data_V_data_V_1_sel;
wire    m_axis_tx_data_V_data_V_1_load_A;
wire    m_axis_tx_data_V_data_V_1_load_B;
wire    m_axis_tx_data_V_data_V_1_state_cmp_full;
reg   [7:0] m_axis_tx_data_V_keep_V_1_data_in;
reg   [7:0] m_axis_tx_data_V_keep_V_1_data_out;
reg    m_axis_tx_data_V_keep_V_1_vld_in;
wire    m_axis_tx_data_V_keep_V_1_vld_out;
wire    m_axis_tx_data_V_keep_V_1_ack_in;
reg   [7:0] m_axis_tx_data_V_keep_V_1_payload_A;
reg   [7:0] m_axis_tx_data_V_keep_V_1_payload_B;
reg    m_axis_tx_data_V_keep_V_1_sel_rd;
reg    m_axis_tx_data_V_keep_V_1_sel_wr;
wire    m_axis_tx_data_V_keep_V_1_sel;
wire    m_axis_tx_data_V_keep_V_1_load_A;
wire    m_axis_tx_data_V_keep_V_1_load_B;
wire    m_axis_tx_data_V_keep_V_1_state_cmp_full;
reg   [0:0] m_axis_tx_data_V_last_V_1_data_in;
reg   [0:0] m_axis_tx_data_V_last_V_1_data_out;
reg    m_axis_tx_data_V_last_V_1_vld_in;
wire    m_axis_tx_data_V_last_V_1_vld_out;
wire    m_axis_tx_data_V_last_V_1_ack_in;
reg   [0:0] m_axis_tx_data_V_last_V_1_payload_A;
reg   [0:0] m_axis_tx_data_V_last_V_1_payload_B;
reg    m_axis_tx_data_V_last_V_1_sel_rd;
reg    m_axis_tx_data_V_last_V_1_sel_wr;
wire    m_axis_tx_data_V_last_V_1_sel;
wire    m_axis_tx_data_V_last_V_1_load_A;
wire    m_axis_tx_data_V_last_V_1_load_B;
wire    m_axis_tx_data_V_last_V_1_state_cmp_full;
reg   [1:0] gi_state;
reg   [15:0] header_idx_1;
reg   [159:0] header_header_V_1;
reg    txEng_ipMetaDataFifoIn_V_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    m_axis_tx_data_TDATA_blk_n;
reg    tx_shift2ipv4Fifo_V_1_blk_n;
reg    tx_shift2ipv4Fifo_V_2_blk_n;
reg    tx_shift2ipv4Fifo_V_s_blk_n;
reg   [63:0] reg_250;
reg   [7:0] reg_255;
wire   [0:0] grp_fu_237_p1;
reg   [0:0] tmp_last_V_3_reg_1116;
reg   [0:0] tmp_last_V_reg_1125;
wire   [0:0] icmp_ln76_1_fu_301_p2;
reg   [0:0] icmp_ln76_1_reg_1130;
wire   [7:0] sub_ln647_10_fu_383_p2;
reg   [7:0] sub_ln647_10_reg_1135;
wire   [159:0] lshr_ln647_4_fu_393_p2;
reg   [159:0] lshr_ln647_4_reg_1140;
wire   [7:0] sub_ln647_13_fu_471_p2;
reg   [7:0] sub_ln647_13_reg_1145;
wire   [159:0] lshr_ln647_6_fu_481_p2;
reg   [159:0] lshr_ln647_6_reg_1150;
wire   [0:0] and_ln82_1_fu_493_p2;
reg   [0:0] and_ln82_1_reg_1155;
wire   [7:0] sub_ln647_3_fu_649_p2;
reg   [7:0] sub_ln647_3_reg_1160;
wire   [159:0] lshr_ln647_fu_659_p2;
reg   [159:0] lshr_ln647_reg_1165;
wire   [7:0] sub_ln647_6_fu_785_p2;
reg   [7:0] sub_ln647_6_reg_1170;
wire   [159:0] lshr_ln647_2_fu_795_p2;
reg   [159:0] lshr_ln647_2_reg_1175;
wire   [0:0] and_ln82_fu_807_p2;
reg   [0:0] and_ln82_reg_1180;
wire   [0:0] or_ln887_fu_869_p2;
wire   [63:0] currWord_data_V_1_fu_1044_p3;
wire   [63:0] currWord_data_V_fu_1100_p3;
reg    ap_block_pp0_stage0_subdone;
wire   [1:0] select_ln137_fu_527_p3;
wire   [15:0] select_ln82_2_fu_507_p3;
wire   [15:0] select_ln82_fu_821_p3;
wire   [159:0] p_Result_s_fu_965_p5;
reg    ap_block_pp0_stage0_01001;
wire   [21:0] Lo_assign_1_fu_283_p3;
wire   [22:0] zext_ln76_1_fu_291_p1;
wire   [22:0] add_ln76_1_fu_295_p2;
wire   [21:0] or_ln78_1_fu_307_p2;
wire   [1:0] trunc_ln76_3_fu_279_p1;
wire   [7:0] tmp_12_fu_319_p3;
wire   [7:0] trunc_ln647_3_fu_327_p1;
wire   [0:0] icmp_ln647_2_fu_313_p2;
wire   [7:0] sub_ln647_7_fu_341_p2;
wire   [7:0] sub_ln647_9_fu_353_p2;
reg   [159:0] tmp_13_fu_331_p4;
wire   [7:0] sub_ln647_8_fu_347_p2;
wire   [7:0] select_ln647_6_fu_359_p3;
wire   [7:0] select_ln647_8_fu_375_p3;
wire   [159:0] select_ln647_7_fu_367_p3;
wire   [159:0] zext_ln647_4_fu_389_p1;
wire   [1:0] trunc_ln76_2_fu_275_p1;
wire   [7:0] tmp_14_fu_411_p3;
wire   [0:0] icmp_ln647_3_fu_405_p2;
wire   [7:0] add_ln647_1_fu_429_p2;
wire   [7:0] sub_ln647_12_fu_441_p2;
reg   [159:0] tmp_15_fu_419_p4;
wire   [7:0] sub_ln647_11_fu_435_p2;
wire   [7:0] select_ln647_9_fu_447_p3;
wire   [7:0] select_ln647_11_fu_463_p3;
wire   [159:0] select_ln647_10_fu_455_p3;
wire   [159:0] zext_ln647_6_fu_477_p1;
wire   [0:0] icmp_ln82_1_fu_399_p2;
wire   [0:0] xor_ln76_1_fu_487_p2;
wire   [15:0] grp_fu_245_p2;
wire   [15:0] select_ln76_1_fu_499_p3;
wire   [0:0] xor_ln137_fu_521_p2;
wire   [21:0] Lo_assign_fu_549_p3;
wire   [22:0] zext_ln76_fu_557_p1;
wire   [22:0] add_ln76_fu_561_p2;
wire   [21:0] or_ln78_fu_573_p2;
wire   [1:0] trunc_ln76_1_fu_545_p1;
wire   [7:0] tmp_5_fu_585_p3;
wire   [7:0] trunc_ln647_fu_593_p1;
wire   [0:0] icmp_ln647_fu_579_p2;
wire   [7:0] sub_ln647_fu_607_p2;
wire   [7:0] sub_ln647_2_fu_619_p2;
reg   [159:0] tmp_6_fu_597_p4;
wire   [7:0] sub_ln647_1_fu_613_p2;
wire   [7:0] select_ln647_fu_625_p3;
wire   [7:0] select_ln647_2_fu_641_p3;
wire   [159:0] select_ln647_1_fu_633_p3;
wire   [159:0] zext_ln647_fu_655_p1;
wire   [21:0] shl_ln_fu_665_p3;
wire   [22:0] zext_ln80_fu_673_p1;
wire   [22:0] sub_ln80_fu_677_p2;
wire   [22:0] sub_ln80_1_fu_691_p2;
wire   [7:0] trunc_ln80_1_fu_697_p4;
wire   [1:0] trunc_ln76_fu_541_p1;
wire   [7:0] tmp_8_fu_725_p3;
wire   [0:0] icmp_ln647_1_fu_719_p2;
wire   [7:0] add_ln647_fu_743_p2;
wire   [7:0] sub_ln647_5_fu_755_p2;
reg   [159:0] tmp_9_fu_733_p4;
wire   [7:0] sub_ln647_4_fu_749_p2;
wire   [7:0] select_ln647_3_fu_761_p3;
wire   [7:0] select_ln647_5_fu_777_p3;
wire   [159:0] select_ln647_4_fu_769_p3;
wire   [159:0] zext_ln647_2_fu_791_p1;
wire   [0:0] icmp_ln76_fu_567_p2;
wire   [0:0] icmp_ln82_fu_713_p2;
wire   [0:0] xor_ln76_fu_801_p2;
wire   [15:0] select_ln76_fu_813_p3;
wire   [7:0] sub_ln80_2_fu_707_p2;
wire   [0:0] tmp_7_fu_683_p3;
wire   [4:0] tmp_10_fu_835_p4;
wire   [4:0] tmp_11_fu_845_p4;
wire   [4:0] select_ln80_fu_855_p3;
wire   [0:0] icmp_ln887_fu_863_p2;
wire   [15:0] meta_length_V_fu_885_p4;
wire   [15:0] length_V_1_fu_901_p2;
wire   [7:0] trunc_ln647_2_fu_917_p1;
wire   [7:0] p_Result_2_i_i_i_fu_907_p4;
wire   [15:0] agg_result_V_0_1_i_i_fu_921_p3;
wire   [159:0] p_Result_15_fu_929_p5;
wire   [31:0] meta_their_address_V_fu_881_p1;
wire   [159:0] p_Result_16_fu_941_p5;
wire   [159:0] p_Result_17_fu_953_p5;
wire   [159:0] zext_ln647_5_fu_989_p1;
wire   [159:0] lshr_ln647_5_fu_992_p2;
wire   [159:0] p_Result_20_fu_998_p2;
wire   [159:0] zext_ln647_7_fu_1007_p1;
wire   [159:0] lshr_ln647_7_fu_1010_p2;
wire   [159:0] p_Result_21_fu_1016_p2;
wire   [31:0] trunc_ln215_1_fu_1021_p1;
wire   [63:0] trunc_ln364_1_fu_1003_p1;
wire   [63:0] p_Result_14_fu_1025_p5;
wire   [63:0] select_ln76_2_fu_1037_p3;
wire   [159:0] zext_ln647_1_fu_1052_p1;
wire   [159:0] lshr_ln647_1_fu_1055_p2;
wire   [159:0] p_Result_18_fu_1061_p2;
wire   [159:0] zext_ln647_3_fu_1070_p1;
wire   [159:0] lshr_ln647_3_fu_1073_p2;
wire   [159:0] p_Result_19_fu_1079_p2;
wire   [31:0] trunc_ln215_fu_1084_p1;
wire   [63:0] p_Result_8_fu_1088_p5;
wire   [63:0] trunc_ln364_fu_1066_p1;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_436;
reg    ap_condition_175;
reg    ap_condition_477;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 m_axis_tx_data_V_data_V_1_state = 2'd0;
#0 m_axis_tx_data_V_keep_V_1_state = 2'd0;
#0 m_axis_tx_data_V_last_V_1_state = 2'd0;
#0 m_axis_tx_data_V_data_V_1_sel_rd = 1'b0;
#0 m_axis_tx_data_V_data_V_1_sel_wr = 1'b0;
#0 m_axis_tx_data_V_keep_V_1_sel_rd = 1'b0;
#0 m_axis_tx_data_V_keep_V_1_sel_wr = 1'b0;
#0 m_axis_tx_data_V_last_V_1_sel_rd = 1'b0;
#0 m_axis_tx_data_V_last_V_1_sel_wr = 1'b0;
#0 gi_state = 2'd0;
#0 header_idx_1 = 16'd0;
#0 header_header_V_1 = 160'd1180591620717411303493;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        m_axis_tx_data_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((m_axis_tx_data_V_data_V_1_vld_out == 1'b1) & (m_axis_tx_data_V_data_V_1_ack_out == 1'b1))) begin
            m_axis_tx_data_V_data_V_1_sel_rd <= ~m_axis_tx_data_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        m_axis_tx_data_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((m_axis_tx_data_V_data_V_1_ack_in == 1'b1) & (m_axis_tx_data_V_data_V_1_vld_in == 1'b1))) begin
            m_axis_tx_data_V_data_V_1_sel_wr <= ~m_axis_tx_data_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        m_axis_tx_data_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((m_axis_tx_data_V_data_V_1_state == 2'd3) & (m_axis_tx_data_V_data_V_1_vld_in == 1'b0) & (m_axis_tx_data_V_data_V_1_ack_out == 1'b1)) | ((m_axis_tx_data_V_data_V_1_state == 2'd2) & (m_axis_tx_data_V_data_V_1_vld_in == 1'b0)))) begin
            m_axis_tx_data_V_data_V_1_state <= 2'd2;
        end else if ((((m_axis_tx_data_TREADY == 1'b0) & (m_axis_tx_data_V_data_V_1_state == 2'd1)) | ((m_axis_tx_data_V_data_V_1_state == 2'd3) & (m_axis_tx_data_TREADY == 1'b0) & (m_axis_tx_data_V_data_V_1_vld_in == 1'b1)))) begin
            m_axis_tx_data_V_data_V_1_state <= 2'd1;
        end else if ((((m_axis_tx_data_V_data_V_1_ack_out == 1'b1) & (m_axis_tx_data_V_data_V_1_state == 2'd1)) | (~((m_axis_tx_data_V_data_V_1_vld_in == 1'b0) & (m_axis_tx_data_V_data_V_1_ack_out == 1'b1)) & ~((m_axis_tx_data_TREADY == 1'b0) & (m_axis_tx_data_V_data_V_1_vld_in == 1'b1)) & (m_axis_tx_data_V_data_V_1_state == 2'd3)) | ((m_axis_tx_data_V_data_V_1_state == 2'd2) & (m_axis_tx_data_V_data_V_1_vld_in == 1'b1)))) begin
            m_axis_tx_data_V_data_V_1_state <= 2'd3;
        end else begin
            m_axis_tx_data_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        m_axis_tx_data_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((m_axis_tx_data_V_keep_V_1_vld_out == 1'b1) & (m_axis_tx_data_V_keep_V_1_ack_out == 1'b1))) begin
            m_axis_tx_data_V_keep_V_1_sel_rd <= ~m_axis_tx_data_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        m_axis_tx_data_V_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((m_axis_tx_data_V_keep_V_1_ack_in == 1'b1) & (m_axis_tx_data_V_keep_V_1_vld_in == 1'b1))) begin
            m_axis_tx_data_V_keep_V_1_sel_wr <= ~m_axis_tx_data_V_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        m_axis_tx_data_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((m_axis_tx_data_V_keep_V_1_state == 2'd3) & (m_axis_tx_data_V_keep_V_1_vld_in == 1'b0) & (m_axis_tx_data_V_keep_V_1_ack_out == 1'b1)) | ((m_axis_tx_data_V_keep_V_1_state == 2'd2) & (m_axis_tx_data_V_keep_V_1_vld_in == 1'b0)))) begin
            m_axis_tx_data_V_keep_V_1_state <= 2'd2;
        end else if ((((m_axis_tx_data_TREADY == 1'b0) & (m_axis_tx_data_V_keep_V_1_state == 2'd1)) | ((m_axis_tx_data_V_keep_V_1_state == 2'd3) & (m_axis_tx_data_TREADY == 1'b0) & (m_axis_tx_data_V_keep_V_1_vld_in == 1'b1)))) begin
            m_axis_tx_data_V_keep_V_1_state <= 2'd1;
        end else if ((((m_axis_tx_data_V_keep_V_1_ack_out == 1'b1) & (m_axis_tx_data_V_keep_V_1_state == 2'd1)) | (~((m_axis_tx_data_V_keep_V_1_vld_in == 1'b0) & (m_axis_tx_data_V_keep_V_1_ack_out == 1'b1)) & ~((m_axis_tx_data_TREADY == 1'b0) & (m_axis_tx_data_V_keep_V_1_vld_in == 1'b1)) & (m_axis_tx_data_V_keep_V_1_state == 2'd3)) | ((m_axis_tx_data_V_keep_V_1_state == 2'd2) & (m_axis_tx_data_V_keep_V_1_vld_in == 1'b1)))) begin
            m_axis_tx_data_V_keep_V_1_state <= 2'd3;
        end else begin
            m_axis_tx_data_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        m_axis_tx_data_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((m_axis_tx_data_V_last_V_1_vld_out == 1'b1) & (m_axis_tx_data_V_last_V_1_ack_out == 1'b1))) begin
            m_axis_tx_data_V_last_V_1_sel_rd <= ~m_axis_tx_data_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        m_axis_tx_data_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((m_axis_tx_data_V_last_V_1_ack_in == 1'b1) & (m_axis_tx_data_V_last_V_1_vld_in == 1'b1))) begin
            m_axis_tx_data_V_last_V_1_sel_wr <= ~m_axis_tx_data_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        m_axis_tx_data_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((m_axis_tx_data_V_last_V_1_state == 2'd3) & (m_axis_tx_data_V_last_V_1_vld_in == 1'b0) & (m_axis_tx_data_V_last_V_1_ack_out == 1'b1)) | ((m_axis_tx_data_V_last_V_1_state == 2'd2) & (m_axis_tx_data_V_last_V_1_vld_in == 1'b0)))) begin
            m_axis_tx_data_V_last_V_1_state <= 2'd2;
        end else if ((((m_axis_tx_data_TREADY == 1'b0) & (m_axis_tx_data_V_last_V_1_state == 2'd1)) | ((m_axis_tx_data_V_last_V_1_state == 2'd3) & (m_axis_tx_data_TREADY == 1'b0) & (m_axis_tx_data_V_last_V_1_vld_in == 1'b1)))) begin
            m_axis_tx_data_V_last_V_1_state <= 2'd1;
        end else if ((((m_axis_tx_data_V_last_V_1_ack_out == 1'b1) & (m_axis_tx_data_V_last_V_1_state == 2'd1)) | (~((m_axis_tx_data_V_last_V_1_vld_in == 1'b0) & (m_axis_tx_data_V_last_V_1_ack_out == 1'b1)) & ~((m_axis_tx_data_TREADY == 1'b0) & (m_axis_tx_data_V_last_V_1_vld_in == 1'b1)) & (m_axis_tx_data_V_last_V_1_state == 2'd3)) | ((m_axis_tx_data_V_last_V_1_state == 2'd2) & (m_axis_tx_data_V_last_V_1_vld_in == 1'b1)))) begin
            m_axis_tx_data_V_last_V_1_state <= 2'd3;
        end else begin
            m_axis_tx_data_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_175)) begin
        if (((tmp_nbreadreq_fu_200_p3 == 1'd1) & (gi_state == 2'd0))) begin
            gi_state <= 2'd1;
        end else if (((or_ln887_fu_869_p2 == 1'd1) & (gi_state_load_load_fu_260_p1 == 2'd1))) begin
            gi_state <= 2'd2;
        end else if (((grp_nbreadreq_fu_178_p5 == 1'd1) & (gi_state == 2'd2))) begin
            gi_state <= select_ln137_fu_527_p3;
        end else if ((1'b1 == ap_condition_436)) begin
            gi_state <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_175)) begin
        if (((tmp_nbreadreq_fu_200_p3 == 1'd1) & (gi_state == 2'd0))) begin
            header_idx_1 <= 16'd0;
        end else if ((gi_state_load_load_fu_260_p1 == 2'd1)) begin
            header_idx_1 <= select_ln82_fu_821_p3;
        end else if (((grp_nbreadreq_fu_178_p5 == 1'd1) & (gi_state == 2'd2))) begin
            header_idx_1 <= select_ln82_2_fu_507_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((grp_nbreadreq_fu_178_p5 == 1'd1) & (gi_state == 2'd2) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        and_ln82_1_reg_1155 <= and_ln82_1_fu_493_p2;
        icmp_ln76_1_reg_1130 <= icmp_ln76_1_fu_301_p2;
        lshr_ln647_4_reg_1140 <= lshr_ln647_4_fu_393_p2;
        lshr_ln647_6_reg_1150 <= lshr_ln647_6_fu_481_p2;
        sub_ln647_10_reg_1135[7 : 1] <= sub_ln647_10_fu_383_p2[7 : 1];
        sub_ln647_13_reg_1145[7 : 1] <= sub_ln647_13_fu_471_p2[7 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((gi_state_load_load_fu_260_p1 == 2'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        and_ln82_reg_1180 <= and_ln82_fu_807_p2;
        lshr_ln647_2_reg_1175 <= lshr_ln647_2_fu_795_p2;
        lshr_ln647_reg_1165 <= lshr_ln647_fu_659_p2;
        sub_ln647_3_reg_1160[7 : 1] <= sub_ln647_3_fu_649_p2[7 : 1];
        sub_ln647_6_reg_1170[7 : 1] <= sub_ln647_6_fu_785_p2[7 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gi_state_load_reg_1108 <= gi_state;
        gi_state_load_reg_1108_pp0_iter1_reg <= gi_state_load_reg_1108;
        tmp_3_reg_1121_pp0_iter1_reg <= tmp_3_reg_1121;
        tmp_4_reg_1112_pp0_iter1_reg <= tmp_4_reg_1112;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_nbreadreq_fu_200_p3 == 1'd1) & (gi_state == 2'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        header_header_V_1 <= p_Result_s_fu_965_p5;
    end
end

always @ (posedge ap_clk) begin
    if ((m_axis_tx_data_V_data_V_1_load_A == 1'b1)) begin
        m_axis_tx_data_V_data_V_1_payload_A <= m_axis_tx_data_V_data_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((m_axis_tx_data_V_data_V_1_load_B == 1'b1)) begin
        m_axis_tx_data_V_data_V_1_payload_B <= m_axis_tx_data_V_data_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((m_axis_tx_data_V_keep_V_1_load_A == 1'b1)) begin
        m_axis_tx_data_V_keep_V_1_payload_A <= m_axis_tx_data_V_keep_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((m_axis_tx_data_V_keep_V_1_load_B == 1'b1)) begin
        m_axis_tx_data_V_keep_V_1_payload_B <= m_axis_tx_data_V_keep_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((m_axis_tx_data_V_last_V_1_load_A == 1'b1)) begin
        m_axis_tx_data_V_last_V_1_payload_A <= m_axis_tx_data_V_last_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((m_axis_tx_data_V_last_V_1_load_B == 1'b1)) begin
        m_axis_tx_data_V_last_V_1_payload_B <= m_axis_tx_data_V_last_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((((grp_nbreadreq_fu_178_p5 == 1'd1) & (gi_state == 2'd2) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((grp_nbreadreq_fu_178_p5 == 1'd1) & (gi_state == 2'd3) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        reg_250 <= tx_shift2ipv4Fifo_V_1_dout;
        reg_255 <= tx_shift2ipv4Fifo_V_2_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((gi_state == 2'd2) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_3_reg_1121 <= grp_nbreadreq_fu_178_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((gi_state == 2'd3) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_4_reg_1112 <= grp_nbreadreq_fu_178_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_nbreadreq_fu_178_p5 == 1'd1) & (gi_state == 2'd3) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_last_V_3_reg_1116 <= tx_shift2ipv4Fifo_V_s_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_nbreadreq_fu_178_p5 == 1'd1) & (gi_state == 2'd2) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_last_V_reg_1125 <= tx_shift2ipv4Fifo_V_s_dout;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op135_write_state2 == 1'b1)) | ((gi_state_load_reg_1108 == 2'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op149_write_state2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (gi_state_load_reg_1108_pp0_iter1_reg == 2'd1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op171_write_state3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op167_write_state3 == 1'b1)))) begin
        m_axis_tx_data_TDATA_blk_n = m_axis_tx_data_V_data_V_1_state[1'd1];
    end else begin
        m_axis_tx_data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_477)) begin
        if ((gi_state_load_reg_1108 == 2'd1)) begin
            m_axis_tx_data_V_data_V_1_data_in = currWord_data_V_fu_1100_p3;
        end else if ((ap_predicate_op149_write_state2 == 1'b1)) begin
            m_axis_tx_data_V_data_V_1_data_in = currWord_data_V_1_fu_1044_p3;
        end else if ((ap_predicate_op135_write_state2 == 1'b1)) begin
            m_axis_tx_data_V_data_V_1_data_in = reg_250;
        end else begin
            m_axis_tx_data_V_data_V_1_data_in = 'bx;
        end
    end else begin
        m_axis_tx_data_V_data_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((m_axis_tx_data_V_data_V_1_sel == 1'b1)) begin
        m_axis_tx_data_V_data_V_1_data_out = m_axis_tx_data_V_data_V_1_payload_B;
    end else begin
        m_axis_tx_data_V_data_V_1_data_out = m_axis_tx_data_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op135_write_state2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((gi_state_load_reg_1108 == 2'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op149_write_state2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        m_axis_tx_data_V_data_V_1_vld_in = 1'b1;
    end else begin
        m_axis_tx_data_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((gi_state_load_reg_1108 == 2'd1) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axis_tx_data_V_keep_V_1_data_in = 8'd255;
    end else if ((((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op135_write_state2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op149_write_state2 == 1'b1)))) begin
        m_axis_tx_data_V_keep_V_1_data_in = reg_255;
    end else begin
        m_axis_tx_data_V_keep_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((m_axis_tx_data_V_keep_V_1_sel == 1'b1)) begin
        m_axis_tx_data_V_keep_V_1_data_out = m_axis_tx_data_V_keep_V_1_payload_B;
    end else begin
        m_axis_tx_data_V_keep_V_1_data_out = m_axis_tx_data_V_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op135_write_state2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((gi_state_load_reg_1108 == 2'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op149_write_state2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        m_axis_tx_data_V_keep_V_1_vld_in = 1'b1;
    end else begin
        m_axis_tx_data_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_477)) begin
        if ((gi_state_load_reg_1108 == 2'd1)) begin
            m_axis_tx_data_V_last_V_1_data_in = 1'd0;
        end else if ((ap_predicate_op149_write_state2 == 1'b1)) begin
            m_axis_tx_data_V_last_V_1_data_in = tmp_last_V_reg_1125;
        end else if ((ap_predicate_op135_write_state2 == 1'b1)) begin
            m_axis_tx_data_V_last_V_1_data_in = tmp_last_V_3_reg_1116;
        end else begin
            m_axis_tx_data_V_last_V_1_data_in = 'bx;
        end
    end else begin
        m_axis_tx_data_V_last_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((m_axis_tx_data_V_last_V_1_sel == 1'b1)) begin
        m_axis_tx_data_V_last_V_1_data_out = m_axis_tx_data_V_last_V_1_payload_B;
    end else begin
        m_axis_tx_data_V_last_V_1_data_out = m_axis_tx_data_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op135_write_state2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((gi_state_load_reg_1108 == 2'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op149_write_state2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        m_axis_tx_data_V_last_V_1_vld_in = 1'b1;
    end else begin
        m_axis_tx_data_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op119_read_state1 == 1'b1))) begin
        txEng_ipMetaDataFifoIn_V_TDATA_blk_n = txEng_ipMetaDataFifoIn_V_TVALID;
    end else begin
        txEng_ipMetaDataFifoIn_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op119_read_state1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        txEng_ipMetaDataFifoIn_V_TREADY = 1'b1;
    end else begin
        txEng_ipMetaDataFifoIn_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op16_read_state1 == 1'b1)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op10_read_state1 == 1'b1)))) begin
        tx_shift2ipv4Fifo_V_1_blk_n = tx_shift2ipv4Fifo_V_1_empty_n;
    end else begin
        tx_shift2ipv4Fifo_V_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op16_read_state1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op10_read_state1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        tx_shift2ipv4Fifo_V_1_read = 1'b1;
    end else begin
        tx_shift2ipv4Fifo_V_1_read = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op16_read_state1 == 1'b1)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op10_read_state1 == 1'b1)))) begin
        tx_shift2ipv4Fifo_V_2_blk_n = tx_shift2ipv4Fifo_V_2_empty_n;
    end else begin
        tx_shift2ipv4Fifo_V_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op16_read_state1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op10_read_state1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        tx_shift2ipv4Fifo_V_2_read = 1'b1;
    end else begin
        tx_shift2ipv4Fifo_V_2_read = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op16_read_state1 == 1'b1)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op10_read_state1 == 1'b1)))) begin
        tx_shift2ipv4Fifo_V_s_blk_n = tx_shift2ipv4Fifo_V_s_empty_n;
    end else begin
        tx_shift2ipv4Fifo_V_s_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op16_read_state1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op10_read_state1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        tx_shift2ipv4Fifo_V_s_read = 1'b1;
    end else begin
        tx_shift2ipv4Fifo_V_s_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Lo_assign_1_fu_283_p3 = {{header_idx_1}, {6'd0}};

assign Lo_assign_fu_549_p3 = {{header_idx_1}, {6'd0}};

assign add_ln647_1_fu_429_p2 = (tmp_14_fu_411_p3 + 8'd97);

assign add_ln647_fu_743_p2 = (tmp_8_fu_725_p3 + 8'd97);

assign add_ln76_1_fu_295_p2 = (zext_ln76_1_fu_291_p1 + 23'd64);

assign add_ln76_fu_561_p2 = (zext_ln76_fu_557_p1 + 23'd64);

assign agg_result_V_0_1_i_i_fu_921_p3 = {{trunc_ln647_2_fu_917_p1}, {p_Result_2_i_i_i_fu_907_p4}};

assign and_ln82_1_fu_493_p2 = (xor_ln76_1_fu_487_p2 & icmp_ln82_1_fu_399_p2);

assign and_ln82_fu_807_p2 = (xor_ln76_fu_801_p2 & icmp_ln82_fu_713_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((txEng_ipMetaDataFifoIn_V_TVALID == 1'b0) & (ap_predicate_op119_read_state1 == 1'b1)) | ((io_acc_block_signal_op16 == 1'b0) & (ap_predicate_op16_read_state1 == 1'b1)) | ((io_acc_block_signal_op10 == 1'b0) & (ap_predicate_op10_read_state1 == 1'b1)))) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((m_axis_tx_data_V_last_V_1_state == 2'd1) | (m_axis_tx_data_V_keep_V_1_state == 2'd1) | (m_axis_tx_data_V_data_V_1_state == 2'd1) | ((m_axis_tx_data_V_last_V_1_state == 2'd3) & (m_axis_tx_data_TREADY == 1'b0)) | ((m_axis_tx_data_V_keep_V_1_state == 2'd3) & (m_axis_tx_data_TREADY == 1'b0)) | ((m_axis_tx_data_V_data_V_1_state == 2'd3) & (m_axis_tx_data_TREADY == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((txEng_ipMetaDataFifoIn_V_TVALID == 1'b0) & (ap_predicate_op119_read_state1 == 1'b1)) | ((io_acc_block_signal_op16 == 1'b0) & (ap_predicate_op16_read_state1 == 1'b1)) | ((io_acc_block_signal_op10 == 1'b0) & (ap_predicate_op10_read_state1 == 1'b1)))) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((1'b1 == ap_block_state3_io) | (m_axis_tx_data_V_last_V_1_state == 2'd1) | (m_axis_tx_data_V_keep_V_1_state == 2'd1) | (m_axis_tx_data_V_data_V_1_state == 2'd1) | ((m_axis_tx_data_V_last_V_1_state == 2'd3) & (m_axis_tx_data_TREADY == 1'b0)) | ((m_axis_tx_data_V_keep_V_1_state == 2'd3) & (m_axis_tx_data_TREADY == 1'b0)) | ((m_axis_tx_data_V_data_V_1_state == 2'd3) & (m_axis_tx_data_TREADY == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((txEng_ipMetaDataFifoIn_V_TVALID == 1'b0) & (ap_predicate_op119_read_state1 == 1'b1)) | ((io_acc_block_signal_op16 == 1'b0) & (ap_predicate_op16_read_state1 == 1'b1)) | ((io_acc_block_signal_op10 == 1'b0) & (ap_predicate_op10_read_state1 == 1'b1)))) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((1'b1 == ap_block_state3_io) | (m_axis_tx_data_V_last_V_1_state == 2'd1) | (m_axis_tx_data_V_keep_V_1_state == 2'd1) | (m_axis_tx_data_V_data_V_1_state == 2'd1) | ((m_axis_tx_data_V_last_V_1_state == 2'd3) & (m_axis_tx_data_TREADY == 1'b0)) | ((m_axis_tx_data_V_keep_V_1_state == 2'd3) & (m_axis_tx_data_TREADY == 1'b0)) | ((m_axis_tx_data_V_data_V_1_state == 2'd3) & (m_axis_tx_data_TREADY == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_io)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((txEng_ipMetaDataFifoIn_V_TVALID == 1'b0) & (ap_predicate_op119_read_state1 == 1'b1)) | ((io_acc_block_signal_op16 == 1'b0) & (ap_predicate_op16_read_state1 == 1'b1)) | ((io_acc_block_signal_op10 == 1'b0) & (ap_predicate_op10_read_state1 == 1'b1)));
end

always @ (*) begin
    ap_block_state2_io = (((m_axis_tx_data_V_data_V_1_ack_in == 1'b0) & (ap_predicate_op135_write_state2 == 1'b1)) | ((gi_state_load_reg_1108 == 2'd1) & (m_axis_tx_data_V_data_V_1_ack_in == 1'b0)) | ((m_axis_tx_data_V_data_V_1_ack_in == 1'b0) & (ap_predicate_op149_write_state2 == 1'b1)));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = (((m_axis_tx_data_V_data_V_1_ack_in == 1'b0) & (gi_state_load_reg_1108_pp0_iter1_reg == 2'd1)) | ((m_axis_tx_data_V_data_V_1_ack_in == 1'b0) & (ap_predicate_op171_write_state3 == 1'b1)) | ((m_axis_tx_data_V_data_V_1_ack_in == 1'b0) & (ap_predicate_op167_write_state3 == 1'b1)));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((m_axis_tx_data_V_last_V_1_state == 2'd1) | (m_axis_tx_data_V_keep_V_1_state == 2'd1) | (m_axis_tx_data_V_data_V_1_state == 2'd1) | ((m_axis_tx_data_V_last_V_1_state == 2'd3) & (m_axis_tx_data_TREADY == 1'b0)) | ((m_axis_tx_data_V_keep_V_1_state == 2'd3) & (m_axis_tx_data_TREADY == 1'b0)) | ((m_axis_tx_data_V_data_V_1_state == 2'd3) & (m_axis_tx_data_TREADY == 1'b0)));
end

always @ (*) begin
    ap_condition_175 = ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001));
end

always @ (*) begin
    ap_condition_436 = ((grp_fu_237_p1 == 1'd1) & (grp_nbreadreq_fu_178_p5 == 1'd1) & (gi_state == 2'd3));
end

always @ (*) begin
    ap_condition_477 = ((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

always @ (*) begin
    ap_predicate_op10_read_state1 = ((grp_nbreadreq_fu_178_p5 == 1'd1) & (gi_state == 2'd3));
end

always @ (*) begin
    ap_predicate_op119_read_state1 = ((tmp_nbreadreq_fu_200_p3 == 1'd1) & (gi_state == 2'd0));
end

always @ (*) begin
    ap_predicate_op135_write_state2 = ((tmp_4_reg_1112 == 1'd1) & (gi_state_load_reg_1108 == 2'd3));
end

always @ (*) begin
    ap_predicate_op149_write_state2 = ((gi_state_load_reg_1108 == 2'd2) & (tmp_3_reg_1121 == 1'd1));
end

always @ (*) begin
    ap_predicate_op167_write_state3 = ((tmp_4_reg_1112_pp0_iter1_reg == 1'd1) & (gi_state_load_reg_1108_pp0_iter1_reg == 2'd3));
end

always @ (*) begin
    ap_predicate_op16_read_state1 = ((grp_nbreadreq_fu_178_p5 == 1'd1) & (gi_state == 2'd2));
end

always @ (*) begin
    ap_predicate_op171_write_state3 = ((gi_state_load_reg_1108_pp0_iter1_reg == 2'd2) & (tmp_3_reg_1121_pp0_iter1_reg == 1'd1));
end

assign currWord_data_V_1_fu_1044_p3 = ((and_ln82_1_reg_1155[0:0] === 1'b1) ? p_Result_14_fu_1025_p5 : select_ln76_2_fu_1037_p3);

assign currWord_data_V_fu_1100_p3 = ((and_ln82_reg_1180[0:0] === 1'b1) ? p_Result_8_fu_1088_p5 : trunc_ln364_fu_1066_p1);

assign gi_state_load_load_fu_260_p1 = gi_state;

assign grp_fu_237_p1 = tx_shift2ipv4Fifo_V_s_dout;

assign grp_fu_245_p2 = (header_idx_1 + 16'd1);

assign grp_nbreadreq_fu_178_p5 = (tx_shift2ipv4Fifo_V_s_empty_n & tx_shift2ipv4Fifo_V_2_empty_n & tx_shift2ipv4Fifo_V_1_empty_n);

assign icmp_ln647_1_fu_719_p2 = ((Lo_assign_fu_549_p3 > 22'd159) ? 1'b1 : 1'b0);

assign icmp_ln647_2_fu_313_p2 = ((Lo_assign_1_fu_283_p3 > or_ln78_1_fu_307_p2) ? 1'b1 : 1'b0);

assign icmp_ln647_3_fu_405_p2 = ((Lo_assign_1_fu_283_p3 > 22'd159) ? 1'b1 : 1'b0);

assign icmp_ln647_fu_579_p2 = ((Lo_assign_fu_549_p3 > or_ln78_fu_573_p2) ? 1'b1 : 1'b0);

assign icmp_ln76_1_fu_301_p2 = ((add_ln76_1_fu_295_p2 < 23'd161) ? 1'b1 : 1'b0);

assign icmp_ln76_fu_567_p2 = ((add_ln76_fu_561_p2 < 23'd161) ? 1'b1 : 1'b0);

assign icmp_ln82_1_fu_399_p2 = ((Lo_assign_1_fu_283_p3 < 22'd160) ? 1'b1 : 1'b0);

assign icmp_ln82_fu_713_p2 = ((Lo_assign_fu_549_p3 < 22'd160) ? 1'b1 : 1'b0);

assign icmp_ln887_fu_863_p2 = ((select_ln80_fu_855_p3 == 5'd0) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op10 = (tx_shift2ipv4Fifo_V_s_empty_n & tx_shift2ipv4Fifo_V_2_empty_n & tx_shift2ipv4Fifo_V_1_empty_n);

assign io_acc_block_signal_op16 = (tx_shift2ipv4Fifo_V_s_empty_n & tx_shift2ipv4Fifo_V_2_empty_n & tx_shift2ipv4Fifo_V_1_empty_n);

assign length_V_1_fu_901_p2 = (16'd20 + meta_length_V_fu_885_p4);

assign lshr_ln647_1_fu_1055_p2 = 160'd1461501637330902918203684832716283019655932542975 >> zext_ln647_1_fu_1052_p1;

assign lshr_ln647_2_fu_795_p2 = select_ln647_4_fu_769_p3 >> zext_ln647_2_fu_791_p1;

assign lshr_ln647_3_fu_1073_p2 = 160'd1461501637330902918203684832716283019655932542975 >> zext_ln647_3_fu_1070_p1;

assign lshr_ln647_4_fu_393_p2 = select_ln647_7_fu_367_p3 >> zext_ln647_4_fu_389_p1;

assign lshr_ln647_5_fu_992_p2 = 160'd1461501637330902918203684832716283019655932542975 >> zext_ln647_5_fu_989_p1;

assign lshr_ln647_6_fu_481_p2 = select_ln647_10_fu_455_p3 >> zext_ln647_6_fu_477_p1;

assign lshr_ln647_7_fu_1010_p2 = 160'd1461501637330902918203684832716283019655932542975 >> zext_ln647_7_fu_1007_p1;

assign lshr_ln647_fu_659_p2 = select_ln647_1_fu_633_p3 >> zext_ln647_fu_655_p1;

assign m_axis_tx_data_TDATA = m_axis_tx_data_V_data_V_1_data_out;

assign m_axis_tx_data_TKEEP = m_axis_tx_data_V_keep_V_1_data_out;

assign m_axis_tx_data_TLAST = m_axis_tx_data_V_last_V_1_data_out;

assign m_axis_tx_data_TVALID = m_axis_tx_data_V_last_V_1_state[1'd0];

assign m_axis_tx_data_V_data_V_1_ack_in = m_axis_tx_data_V_data_V_1_state[1'd1];

assign m_axis_tx_data_V_data_V_1_ack_out = m_axis_tx_data_TREADY;

assign m_axis_tx_data_V_data_V_1_load_A = (m_axis_tx_data_V_data_V_1_state_cmp_full & ~m_axis_tx_data_V_data_V_1_sel_wr);

assign m_axis_tx_data_V_data_V_1_load_B = (m_axis_tx_data_V_data_V_1_state_cmp_full & m_axis_tx_data_V_data_V_1_sel_wr);

assign m_axis_tx_data_V_data_V_1_sel = m_axis_tx_data_V_data_V_1_sel_rd;

assign m_axis_tx_data_V_data_V_1_state_cmp_full = ((m_axis_tx_data_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign m_axis_tx_data_V_data_V_1_vld_out = m_axis_tx_data_V_data_V_1_state[1'd0];

assign m_axis_tx_data_V_keep_V_1_ack_in = m_axis_tx_data_V_keep_V_1_state[1'd1];

assign m_axis_tx_data_V_keep_V_1_ack_out = m_axis_tx_data_TREADY;

assign m_axis_tx_data_V_keep_V_1_load_A = (m_axis_tx_data_V_keep_V_1_state_cmp_full & ~m_axis_tx_data_V_keep_V_1_sel_wr);

assign m_axis_tx_data_V_keep_V_1_load_B = (m_axis_tx_data_V_keep_V_1_state_cmp_full & m_axis_tx_data_V_keep_V_1_sel_wr);

assign m_axis_tx_data_V_keep_V_1_sel = m_axis_tx_data_V_keep_V_1_sel_rd;

assign m_axis_tx_data_V_keep_V_1_state_cmp_full = ((m_axis_tx_data_V_keep_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign m_axis_tx_data_V_keep_V_1_vld_out = m_axis_tx_data_V_keep_V_1_state[1'd0];

assign m_axis_tx_data_V_last_V_1_ack_in = m_axis_tx_data_V_last_V_1_state[1'd1];

assign m_axis_tx_data_V_last_V_1_ack_out = m_axis_tx_data_TREADY;

assign m_axis_tx_data_V_last_V_1_load_A = (m_axis_tx_data_V_last_V_1_state_cmp_full & ~m_axis_tx_data_V_last_V_1_sel_wr);

assign m_axis_tx_data_V_last_V_1_load_B = (m_axis_tx_data_V_last_V_1_state_cmp_full & m_axis_tx_data_V_last_V_1_sel_wr);

assign m_axis_tx_data_V_last_V_1_sel = m_axis_tx_data_V_last_V_1_sel_rd;

assign m_axis_tx_data_V_last_V_1_state_cmp_full = ((m_axis_tx_data_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign m_axis_tx_data_V_last_V_1_vld_out = m_axis_tx_data_V_last_V_1_state[1'd0];

assign meta_length_V_fu_885_p4 = {{txEng_ipMetaDataFifoIn_V_TDATA[47:32]}};

assign meta_their_address_V_fu_881_p1 = txEng_ipMetaDataFifoIn_V_TDATA[31:0];

assign or_ln78_1_fu_307_p2 = (22'd63 | Lo_assign_1_fu_283_p3);

assign or_ln78_fu_573_p2 = (22'd63 | Lo_assign_fu_549_p3);

assign or_ln887_fu_869_p2 = (xor_ln76_fu_801_p2 | icmp_ln887_fu_863_p2);

assign p_Result_14_fu_1025_p5 = {{reg_250[63:32]}, {trunc_ln215_1_fu_1021_p1}};

assign p_Result_15_fu_929_p5 = {{header_header_V_1[159:32]}, {agg_result_V_0_1_i_i_fu_921_p3}, {header_header_V_1[15:0]}};

assign p_Result_16_fu_941_p5 = {{meta_their_address_V_fu_881_p1}, {p_Result_15_fu_929_p5[127:0]}};

assign p_Result_17_fu_953_p5 = {{p_Result_16_fu_941_p5[159:128]}, {local_ipv4_address_V}, {p_Result_16_fu_941_p5[95:0]}};

assign p_Result_18_fu_1061_p2 = (lshr_ln647_reg_1165 & lshr_ln647_1_fu_1055_p2);

assign p_Result_19_fu_1079_p2 = (lshr_ln647_3_fu_1073_p2 & lshr_ln647_2_reg_1175);

assign p_Result_20_fu_998_p2 = (lshr_ln647_5_fu_992_p2 & lshr_ln647_4_reg_1140);

assign p_Result_21_fu_1016_p2 = (lshr_ln647_7_fu_1010_p2 & lshr_ln647_6_reg_1150);

assign p_Result_2_i_i_i_fu_907_p4 = {{length_V_1_fu_901_p2[15:8]}};

assign p_Result_8_fu_1088_p5 = {{ap_const_lv64_0[63:32]}, {trunc_ln215_fu_1084_p1}};

assign p_Result_s_fu_965_p5 = {{p_Result_17_fu_953_p5[159:80]}, {protocol_V}, {p_Result_17_fu_953_p5[71:0]}};

assign select_ln137_fu_527_p3 = ((xor_ln137_fu_521_p2[0:0] === 1'b1) ? 2'd3 : 2'd0);

assign select_ln647_10_fu_455_p3 = ((icmp_ln647_3_fu_405_p2[0:0] === 1'b1) ? tmp_15_fu_419_p4 : header_header_V_1);

assign select_ln647_11_fu_463_p3 = ((icmp_ln647_3_fu_405_p2[0:0] === 1'b1) ? sub_ln647_11_fu_435_p2 : tmp_14_fu_411_p3);

assign select_ln647_1_fu_633_p3 = ((icmp_ln647_fu_579_p2[0:0] === 1'b1) ? tmp_6_fu_597_p4 : header_header_V_1);

assign select_ln647_2_fu_641_p3 = ((icmp_ln647_fu_579_p2[0:0] === 1'b1) ? sub_ln647_1_fu_613_p2 : tmp_5_fu_585_p3);

assign select_ln647_3_fu_761_p3 = ((icmp_ln647_1_fu_719_p2[0:0] === 1'b1) ? add_ln647_fu_743_p2 : sub_ln647_5_fu_755_p2);

assign select_ln647_4_fu_769_p3 = ((icmp_ln647_1_fu_719_p2[0:0] === 1'b1) ? tmp_9_fu_733_p4 : header_header_V_1);

assign select_ln647_5_fu_777_p3 = ((icmp_ln647_1_fu_719_p2[0:0] === 1'b1) ? sub_ln647_4_fu_749_p2 : tmp_8_fu_725_p3);

assign select_ln647_6_fu_359_p3 = ((icmp_ln647_2_fu_313_p2[0:0] === 1'b1) ? sub_ln647_7_fu_341_p2 : sub_ln647_9_fu_353_p2);

assign select_ln647_7_fu_367_p3 = ((icmp_ln647_2_fu_313_p2[0:0] === 1'b1) ? tmp_13_fu_331_p4 : header_header_V_1);

assign select_ln647_8_fu_375_p3 = ((icmp_ln647_2_fu_313_p2[0:0] === 1'b1) ? sub_ln647_8_fu_347_p2 : tmp_12_fu_319_p3);

assign select_ln647_9_fu_447_p3 = ((icmp_ln647_3_fu_405_p2[0:0] === 1'b1) ? add_ln647_1_fu_429_p2 : sub_ln647_12_fu_441_p2);

assign select_ln647_fu_625_p3 = ((icmp_ln647_fu_579_p2[0:0] === 1'b1) ? sub_ln647_fu_607_p2 : sub_ln647_2_fu_619_p2);

assign select_ln76_1_fu_499_p3 = ((icmp_ln76_1_fu_301_p2[0:0] === 1'b1) ? grp_fu_245_p2 : header_idx_1);

assign select_ln76_2_fu_1037_p3 = ((icmp_ln76_1_reg_1130[0:0] === 1'b1) ? trunc_ln364_1_fu_1003_p1 : reg_250);

assign select_ln76_fu_813_p3 = ((icmp_ln76_fu_567_p2[0:0] === 1'b1) ? grp_fu_245_p2 : header_idx_1);

assign select_ln80_fu_855_p3 = ((tmp_7_fu_683_p3[0:0] === 1'b1) ? tmp_10_fu_835_p4 : tmp_11_fu_845_p4);

assign select_ln82_2_fu_507_p3 = ((and_ln82_1_fu_493_p2[0:0] === 1'b1) ? grp_fu_245_p2 : select_ln76_1_fu_499_p3);

assign select_ln82_fu_821_p3 = ((and_ln82_fu_807_p2[0:0] === 1'b1) ? grp_fu_245_p2 : select_ln76_fu_813_p3);

assign shl_ln_fu_665_p3 = {{grp_fu_245_p2}, {6'd0}};

assign sub_ln647_10_fu_383_p2 = ($signed(8'd159) - $signed(select_ln647_6_fu_359_p3));

assign sub_ln647_11_fu_435_p2 = ($signed(8'd159) - $signed(tmp_14_fu_411_p3));

assign sub_ln647_12_fu_441_p2 = ($signed(8'd159) - $signed(tmp_14_fu_411_p3));

assign sub_ln647_13_fu_471_p2 = ($signed(8'd159) - $signed(select_ln647_9_fu_447_p3));

assign sub_ln647_1_fu_613_p2 = ($signed(8'd159) - $signed(tmp_5_fu_585_p3));

assign sub_ln647_2_fu_619_p2 = (trunc_ln647_fu_593_p1 - tmp_5_fu_585_p3);

assign sub_ln647_3_fu_649_p2 = ($signed(8'd159) - $signed(select_ln647_fu_625_p3));

assign sub_ln647_4_fu_749_p2 = ($signed(8'd159) - $signed(tmp_8_fu_725_p3));

assign sub_ln647_5_fu_755_p2 = ($signed(8'd159) - $signed(tmp_8_fu_725_p3));

assign sub_ln647_6_fu_785_p2 = ($signed(8'd159) - $signed(select_ln647_3_fu_761_p3));

assign sub_ln647_7_fu_341_p2 = (tmp_12_fu_319_p3 - trunc_ln647_3_fu_327_p1);

assign sub_ln647_8_fu_347_p2 = ($signed(8'd159) - $signed(tmp_12_fu_319_p3));

assign sub_ln647_9_fu_353_p2 = (trunc_ln647_3_fu_327_p1 - tmp_12_fu_319_p3);

assign sub_ln647_fu_607_p2 = (tmp_5_fu_585_p3 - trunc_ln647_fu_593_p1);

assign sub_ln80_1_fu_691_p2 = (23'd0 - sub_ln80_fu_677_p2);

assign sub_ln80_2_fu_707_p2 = (8'd0 - trunc_ln80_1_fu_697_p4);

assign sub_ln80_fu_677_p2 = (23'd160 - zext_ln80_fu_673_p1);

assign tmp_10_fu_835_p4 = {{sub_ln80_2_fu_707_p2[7:3]}};

assign tmp_11_fu_845_p4 = {{sub_ln80_fu_677_p2[10:6]}};

assign tmp_12_fu_319_p3 = {{trunc_ln76_3_fu_279_p1}, {6'd0}};

integer ap_tvar_int_0;

always @ (header_header_V_1) begin
    for (ap_tvar_int_0 = 160 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 159 - 0) begin
            tmp_13_fu_331_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_13_fu_331_p4[ap_tvar_int_0] = header_header_V_1[159 - ap_tvar_int_0];
        end
    end
end

assign tmp_14_fu_411_p3 = {{trunc_ln76_2_fu_275_p1}, {6'd0}};

integer ap_tvar_int_1;

always @ (header_header_V_1) begin
    for (ap_tvar_int_1 = 160 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 159 - 0) begin
            tmp_15_fu_419_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_15_fu_419_p4[ap_tvar_int_1] = header_header_V_1[159 - ap_tvar_int_1];
        end
    end
end

assign tmp_5_fu_585_p3 = {{trunc_ln76_1_fu_545_p1}, {6'd0}};

integer ap_tvar_int_2;

always @ (header_header_V_1) begin
    for (ap_tvar_int_2 = 160 - 1; ap_tvar_int_2 >= 0; ap_tvar_int_2 = ap_tvar_int_2 - 1) begin
        if (ap_tvar_int_2 > 159 - 0) begin
            tmp_6_fu_597_p4[ap_tvar_int_2] = 1'b0;
        end else begin
            tmp_6_fu_597_p4[ap_tvar_int_2] = header_header_V_1[159 - ap_tvar_int_2];
        end
    end
end

assign tmp_7_fu_683_p3 = sub_ln80_fu_677_p2[32'd22];

assign tmp_8_fu_725_p3 = {{trunc_ln76_fu_541_p1}, {6'd0}};

integer ap_tvar_int_3;

always @ (header_header_V_1) begin
    for (ap_tvar_int_3 = 160 - 1; ap_tvar_int_3 >= 0; ap_tvar_int_3 = ap_tvar_int_3 - 1) begin
        if (ap_tvar_int_3 > 159 - 0) begin
            tmp_9_fu_733_p4[ap_tvar_int_3] = 1'b0;
        end else begin
            tmp_9_fu_733_p4[ap_tvar_int_3] = header_header_V_1[159 - ap_tvar_int_3];
        end
    end
end

assign tmp_nbreadreq_fu_200_p3 = txEng_ipMetaDataFifoIn_V_TVALID;

assign trunc_ln215_1_fu_1021_p1 = p_Result_21_fu_1016_p2[31:0];

assign trunc_ln215_fu_1084_p1 = p_Result_19_fu_1079_p2[31:0];

assign trunc_ln364_1_fu_1003_p1 = p_Result_20_fu_998_p2[63:0];

assign trunc_ln364_fu_1066_p1 = p_Result_18_fu_1061_p2[63:0];

assign trunc_ln647_2_fu_917_p1 = length_V_1_fu_901_p2[7:0];

assign trunc_ln647_3_fu_327_p1 = or_ln78_1_fu_307_p2[7:0];

assign trunc_ln647_fu_593_p1 = or_ln78_fu_573_p2[7:0];

assign trunc_ln76_1_fu_545_p1 = header_idx_1[1:0];

assign trunc_ln76_2_fu_275_p1 = header_idx_1[1:0];

assign trunc_ln76_3_fu_279_p1 = header_idx_1[1:0];

assign trunc_ln76_fu_541_p1 = header_idx_1[1:0];

assign trunc_ln80_1_fu_697_p4 = {{sub_ln80_1_fu_691_p2[10:3]}};

assign xor_ln137_fu_521_p2 = (tx_shift2ipv4Fifo_V_s_dout ^ 1'd1);

assign xor_ln76_1_fu_487_p2 = (icmp_ln76_1_fu_301_p2 ^ 1'd1);

assign xor_ln76_fu_801_p2 = (icmp_ln76_fu_567_p2 ^ 1'd1);

assign zext_ln647_1_fu_1052_p1 = sub_ln647_3_reg_1160;

assign zext_ln647_2_fu_791_p1 = select_ln647_5_fu_777_p3;

assign zext_ln647_3_fu_1070_p1 = sub_ln647_6_reg_1170;

assign zext_ln647_4_fu_389_p1 = select_ln647_8_fu_375_p3;

assign zext_ln647_5_fu_989_p1 = sub_ln647_10_reg_1135;

assign zext_ln647_6_fu_477_p1 = select_ln647_11_fu_463_p3;

assign zext_ln647_7_fu_1007_p1 = sub_ln647_13_reg_1145;

assign zext_ln647_fu_655_p1 = select_ln647_2_fu_641_p3;

assign zext_ln76_1_fu_291_p1 = Lo_assign_1_fu_283_p3;

assign zext_ln76_fu_557_p1 = Lo_assign_fu_549_p3;

assign zext_ln80_fu_673_p1 = shl_ln_fu_665_p3;

always @ (posedge ap_clk) begin
    sub_ln647_10_reg_1135[0] <= 1'b0;
    sub_ln647_13_reg_1145[0] <= 1'b0;
    sub_ln647_3_reg_1160[0] <= 1'b0;
    sub_ln647_6_reg_1170[0] <= 1'b0;
end

endmodule //generate_ipv4_64_s
