-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity generate_ipv4_64_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    tx_shift2ipv4Fifo_V_1_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    tx_shift2ipv4Fifo_V_1_empty_n : IN STD_LOGIC;
    tx_shift2ipv4Fifo_V_1_read : OUT STD_LOGIC;
    tx_shift2ipv4Fifo_V_2_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    tx_shift2ipv4Fifo_V_2_empty_n : IN STD_LOGIC;
    tx_shift2ipv4Fifo_V_2_read : OUT STD_LOGIC;
    tx_shift2ipv4Fifo_V_s_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    tx_shift2ipv4Fifo_V_s_empty_n : IN STD_LOGIC;
    tx_shift2ipv4Fifo_V_s_read : OUT STD_LOGIC;
    txEng_ipMetaDataFifoIn_V_TVALID : IN STD_LOGIC;
    m_axis_tx_data_TREADY : IN STD_LOGIC;
    txEng_ipMetaDataFifoIn_V_TDATA : IN STD_LOGIC_VECTOR (47 downto 0);
    txEng_ipMetaDataFifoIn_V_TREADY : OUT STD_LOGIC;
    m_axis_tx_data_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axis_tx_data_TVALID : OUT STD_LOGIC;
    m_axis_tx_data_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axis_tx_data_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    local_ipv4_address_V : IN STD_LOGIC_VECTOR (31 downto 0);
    protocol_V : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of generate_ipv4_64_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv23_40 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001000000";
    constant ap_const_lv23_A1 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000010100001";
    constant ap_const_lv22_3F : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000111111";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv8_9F : STD_LOGIC_VECTOR (7 downto 0) := "10011111";
    constant ap_const_lv22_A0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000010100000";
    constant ap_const_lv22_9F : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000010011111";
    constant ap_const_lv8_61 : STD_LOGIC_VECTOR (7 downto 0) := "01100001";
    constant ap_const_lv23_A0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000010100000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv16_14 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv160_lc_2 : STD_LOGIC_VECTOR (159 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal io_acc_block_signal_op10 : STD_LOGIC;
    signal gi_state_load_load_fu_260_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_nbreadreq_fu_178_p5 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op10_read_state1 : BOOLEAN;
    signal io_acc_block_signal_op16 : STD_LOGIC;
    signal ap_predicate_op16_read_state1 : BOOLEAN;
    signal tmp_nbreadreq_fu_200_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op119_read_state1 : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal m_axis_tx_data_V_data_V_1_ack_in : STD_LOGIC;
    signal gi_state_load_reg_1108 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_4_reg_1112 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op135_write_state2 : BOOLEAN;
    signal tmp_3_reg_1121 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op149_write_state2 : BOOLEAN;
    signal ap_block_state2_io : BOOLEAN;
    signal m_axis_tx_data_V_data_V_1_ack_out : STD_LOGIC;
    signal m_axis_tx_data_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal m_axis_tx_data_V_keep_V_1_ack_out : STD_LOGIC;
    signal m_axis_tx_data_V_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal m_axis_tx_data_V_last_V_1_ack_out : STD_LOGIC;
    signal m_axis_tx_data_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal gi_state_load_reg_1108_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_4_reg_1112_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op167_write_state3 : BOOLEAN;
    signal tmp_3_reg_1121_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op171_write_state3 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal m_axis_tx_data_V_data_V_1_data_in : STD_LOGIC_VECTOR (63 downto 0);
    signal m_axis_tx_data_V_data_V_1_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal m_axis_tx_data_V_data_V_1_vld_in : STD_LOGIC;
    signal m_axis_tx_data_V_data_V_1_vld_out : STD_LOGIC;
    signal m_axis_tx_data_V_data_V_1_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal m_axis_tx_data_V_data_V_1_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal m_axis_tx_data_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal m_axis_tx_data_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal m_axis_tx_data_V_data_V_1_sel : STD_LOGIC;
    signal m_axis_tx_data_V_data_V_1_load_A : STD_LOGIC;
    signal m_axis_tx_data_V_data_V_1_load_B : STD_LOGIC;
    signal m_axis_tx_data_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal m_axis_tx_data_V_keep_V_1_data_in : STD_LOGIC_VECTOR (7 downto 0);
    signal m_axis_tx_data_V_keep_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal m_axis_tx_data_V_keep_V_1_vld_in : STD_LOGIC;
    signal m_axis_tx_data_V_keep_V_1_vld_out : STD_LOGIC;
    signal m_axis_tx_data_V_keep_V_1_ack_in : STD_LOGIC;
    signal m_axis_tx_data_V_keep_V_1_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal m_axis_tx_data_V_keep_V_1_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal m_axis_tx_data_V_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal m_axis_tx_data_V_keep_V_1_sel_wr : STD_LOGIC := '0';
    signal m_axis_tx_data_V_keep_V_1_sel : STD_LOGIC;
    signal m_axis_tx_data_V_keep_V_1_load_A : STD_LOGIC;
    signal m_axis_tx_data_V_keep_V_1_load_B : STD_LOGIC;
    signal m_axis_tx_data_V_keep_V_1_state_cmp_full : STD_LOGIC;
    signal m_axis_tx_data_V_last_V_1_data_in : STD_LOGIC_VECTOR (0 downto 0);
    signal m_axis_tx_data_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal m_axis_tx_data_V_last_V_1_vld_in : STD_LOGIC;
    signal m_axis_tx_data_V_last_V_1_vld_out : STD_LOGIC;
    signal m_axis_tx_data_V_last_V_1_ack_in : STD_LOGIC;
    signal m_axis_tx_data_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal m_axis_tx_data_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal m_axis_tx_data_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal m_axis_tx_data_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal m_axis_tx_data_V_last_V_1_sel : STD_LOGIC;
    signal m_axis_tx_data_V_last_V_1_load_A : STD_LOGIC;
    signal m_axis_tx_data_V_last_V_1_load_B : STD_LOGIC;
    signal m_axis_tx_data_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal gi_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal header_idx_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal header_header_V_1 : STD_LOGIC_VECTOR (159 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000101";
    signal txEng_ipMetaDataFifoIn_V_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal m_axis_tx_data_TDATA_blk_n : STD_LOGIC;
    signal tx_shift2ipv4Fifo_V_1_blk_n : STD_LOGIC;
    signal tx_shift2ipv4Fifo_V_2_blk_n : STD_LOGIC;
    signal tx_shift2ipv4Fifo_V_s_blk_n : STD_LOGIC;
    signal reg_250 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_255 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_237_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_3_reg_1116 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_1125 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_1_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_1_reg_1130 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln647_10_fu_383_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln647_10_reg_1135 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln647_4_fu_393_p2 : STD_LOGIC_VECTOR (159 downto 0);
    signal lshr_ln647_4_reg_1140 : STD_LOGIC_VECTOR (159 downto 0);
    signal sub_ln647_13_fu_471_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln647_13_reg_1145 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln647_6_fu_481_p2 : STD_LOGIC_VECTOR (159 downto 0);
    signal lshr_ln647_6_reg_1150 : STD_LOGIC_VECTOR (159 downto 0);
    signal and_ln82_1_fu_493_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln82_1_reg_1155 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln647_3_fu_649_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln647_3_reg_1160 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln647_fu_659_p2 : STD_LOGIC_VECTOR (159 downto 0);
    signal lshr_ln647_reg_1165 : STD_LOGIC_VECTOR (159 downto 0);
    signal sub_ln647_6_fu_785_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln647_6_reg_1170 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln647_2_fu_795_p2 : STD_LOGIC_VECTOR (159 downto 0);
    signal lshr_ln647_2_reg_1175 : STD_LOGIC_VECTOR (159 downto 0);
    signal and_ln82_fu_807_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln82_reg_1180 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln887_fu_869_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal currWord_data_V_1_fu_1044_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal currWord_data_V_fu_1100_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal select_ln137_fu_527_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln82_2_fu_507_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln82_fu_821_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_s_fu_965_p5 : STD_LOGIC_VECTOR (159 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal Lo_assign_1_fu_283_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln76_1_fu_291_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln76_1_fu_295_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln78_1_fu_307_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal trunc_ln76_3_fu_279_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_12_fu_319_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln647_3_fu_327_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln647_2_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln647_7_fu_341_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln647_9_fu_353_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_fu_331_p4 : STD_LOGIC_VECTOR (159 downto 0);
    signal sub_ln647_8_fu_347_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln647_6_fu_359_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln647_8_fu_375_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln647_7_fu_367_p3 : STD_LOGIC_VECTOR (159 downto 0);
    signal zext_ln647_4_fu_389_p1 : STD_LOGIC_VECTOR (159 downto 0);
    signal trunc_ln76_2_fu_275_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_14_fu_411_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln647_3_fu_405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln647_1_fu_429_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln647_12_fu_441_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_15_fu_419_p4 : STD_LOGIC_VECTOR (159 downto 0);
    signal sub_ln647_11_fu_435_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln647_9_fu_447_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln647_11_fu_463_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln647_10_fu_455_p3 : STD_LOGIC_VECTOR (159 downto 0);
    signal zext_ln647_6_fu_477_p1 : STD_LOGIC_VECTOR (159 downto 0);
    signal icmp_ln82_1_fu_399_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln76_1_fu_487_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_245_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln76_1_fu_499_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln137_fu_521_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Lo_assign_fu_549_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln76_fu_557_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln76_fu_561_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln78_fu_573_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal trunc_ln76_1_fu_545_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_5_fu_585_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln647_fu_593_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln647_fu_579_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln647_fu_607_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln647_2_fu_619_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_597_p4 : STD_LOGIC_VECTOR (159 downto 0);
    signal sub_ln647_1_fu_613_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln647_fu_625_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln647_2_fu_641_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln647_1_fu_633_p3 : STD_LOGIC_VECTOR (159 downto 0);
    signal zext_ln647_fu_655_p1 : STD_LOGIC_VECTOR (159 downto 0);
    signal shl_ln_fu_665_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln80_fu_673_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal sub_ln80_fu_677_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal sub_ln80_1_fu_691_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln80_1_fu_697_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln76_fu_541_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_8_fu_725_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln647_1_fu_719_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln647_fu_743_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln647_5_fu_755_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_733_p4 : STD_LOGIC_VECTOR (159 downto 0);
    signal sub_ln647_4_fu_749_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln647_3_fu_761_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln647_5_fu_777_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln647_4_fu_769_p3 : STD_LOGIC_VECTOR (159 downto 0);
    signal zext_ln647_2_fu_791_p1 : STD_LOGIC_VECTOR (159 downto 0);
    signal icmp_ln76_fu_567_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln82_fu_713_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln76_fu_801_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln76_fu_813_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln80_2_fu_707_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_683_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_835_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_11_fu_845_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln80_fu_855_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln887_fu_863_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal meta_length_V_fu_885_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal length_V_1_fu_901_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln647_2_fu_917_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_2_i_i_i_fu_907_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal agg_result_V_0_1_i_i_fu_921_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_15_fu_929_p5 : STD_LOGIC_VECTOR (159 downto 0);
    signal meta_their_address_V_fu_881_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_16_fu_941_p5 : STD_LOGIC_VECTOR (159 downto 0);
    signal p_Result_17_fu_953_p5 : STD_LOGIC_VECTOR (159 downto 0);
    signal zext_ln647_5_fu_989_p1 : STD_LOGIC_VECTOR (159 downto 0);
    signal lshr_ln647_5_fu_992_p2 : STD_LOGIC_VECTOR (159 downto 0);
    signal p_Result_20_fu_998_p2 : STD_LOGIC_VECTOR (159 downto 0);
    signal zext_ln647_7_fu_1007_p1 : STD_LOGIC_VECTOR (159 downto 0);
    signal lshr_ln647_7_fu_1010_p2 : STD_LOGIC_VECTOR (159 downto 0);
    signal p_Result_21_fu_1016_p2 : STD_LOGIC_VECTOR (159 downto 0);
    signal trunc_ln215_1_fu_1021_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln364_1_fu_1003_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_14_fu_1025_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln76_2_fu_1037_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln647_1_fu_1052_p1 : STD_LOGIC_VECTOR (159 downto 0);
    signal lshr_ln647_1_fu_1055_p2 : STD_LOGIC_VECTOR (159 downto 0);
    signal p_Result_18_fu_1061_p2 : STD_LOGIC_VECTOR (159 downto 0);
    signal zext_ln647_3_fu_1070_p1 : STD_LOGIC_VECTOR (159 downto 0);
    signal lshr_ln647_3_fu_1073_p2 : STD_LOGIC_VECTOR (159 downto 0);
    signal p_Result_19_fu_1079_p2 : STD_LOGIC_VECTOR (159 downto 0);
    signal trunc_ln215_fu_1084_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_8_fu_1088_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln364_fu_1066_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_436 : BOOLEAN;
    signal ap_condition_175 : BOOLEAN;
    signal ap_condition_477 : BOOLEAN;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    m_axis_tx_data_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                m_axis_tx_data_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((m_axis_tx_data_V_data_V_1_vld_out = ap_const_logic_1) and (m_axis_tx_data_V_data_V_1_ack_out = ap_const_logic_1))) then 
                                        m_axis_tx_data_V_data_V_1_sel_rd <= not(m_axis_tx_data_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    m_axis_tx_data_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                m_axis_tx_data_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((m_axis_tx_data_V_data_V_1_ack_in = ap_const_logic_1) and (m_axis_tx_data_V_data_V_1_vld_in = ap_const_logic_1))) then 
                                        m_axis_tx_data_V_data_V_1_sel_wr <= not(m_axis_tx_data_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    m_axis_tx_data_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                m_axis_tx_data_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((m_axis_tx_data_V_data_V_1_state = ap_const_lv2_3) and (m_axis_tx_data_V_data_V_1_vld_in = ap_const_logic_0) and (m_axis_tx_data_V_data_V_1_ack_out = ap_const_logic_1)) or ((m_axis_tx_data_V_data_V_1_state = ap_const_lv2_2) and (m_axis_tx_data_V_data_V_1_vld_in = ap_const_logic_0)))) then 
                    m_axis_tx_data_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((m_axis_tx_data_TREADY = ap_const_logic_0) and (m_axis_tx_data_V_data_V_1_state = ap_const_lv2_1)) or ((m_axis_tx_data_V_data_V_1_state = ap_const_lv2_3) and (m_axis_tx_data_TREADY = ap_const_logic_0) and (m_axis_tx_data_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    m_axis_tx_data_V_data_V_1_state <= ap_const_lv2_1;
                elsif ((((m_axis_tx_data_V_data_V_1_ack_out = ap_const_logic_1) and (m_axis_tx_data_V_data_V_1_state = ap_const_lv2_1)) or (not(((m_axis_tx_data_V_data_V_1_vld_in = ap_const_logic_0) and (m_axis_tx_data_V_data_V_1_ack_out = ap_const_logic_1))) and not(((m_axis_tx_data_TREADY = ap_const_logic_0) and (m_axis_tx_data_V_data_V_1_vld_in = ap_const_logic_1))) and (m_axis_tx_data_V_data_V_1_state = ap_const_lv2_3)) or ((m_axis_tx_data_V_data_V_1_state = ap_const_lv2_2) and (m_axis_tx_data_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    m_axis_tx_data_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    m_axis_tx_data_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    m_axis_tx_data_V_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                m_axis_tx_data_V_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((m_axis_tx_data_V_keep_V_1_vld_out = ap_const_logic_1) and (m_axis_tx_data_V_keep_V_1_ack_out = ap_const_logic_1))) then 
                                        m_axis_tx_data_V_keep_V_1_sel_rd <= not(m_axis_tx_data_V_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    m_axis_tx_data_V_keep_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                m_axis_tx_data_V_keep_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((m_axis_tx_data_V_keep_V_1_ack_in = ap_const_logic_1) and (m_axis_tx_data_V_keep_V_1_vld_in = ap_const_logic_1))) then 
                                        m_axis_tx_data_V_keep_V_1_sel_wr <= not(m_axis_tx_data_V_keep_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    m_axis_tx_data_V_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                m_axis_tx_data_V_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((m_axis_tx_data_V_keep_V_1_state = ap_const_lv2_3) and (m_axis_tx_data_V_keep_V_1_vld_in = ap_const_logic_0) and (m_axis_tx_data_V_keep_V_1_ack_out = ap_const_logic_1)) or ((m_axis_tx_data_V_keep_V_1_state = ap_const_lv2_2) and (m_axis_tx_data_V_keep_V_1_vld_in = ap_const_logic_0)))) then 
                    m_axis_tx_data_V_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((m_axis_tx_data_TREADY = ap_const_logic_0) and (m_axis_tx_data_V_keep_V_1_state = ap_const_lv2_1)) or ((m_axis_tx_data_V_keep_V_1_state = ap_const_lv2_3) and (m_axis_tx_data_TREADY = ap_const_logic_0) and (m_axis_tx_data_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    m_axis_tx_data_V_keep_V_1_state <= ap_const_lv2_1;
                elsif ((((m_axis_tx_data_V_keep_V_1_ack_out = ap_const_logic_1) and (m_axis_tx_data_V_keep_V_1_state = ap_const_lv2_1)) or (not(((m_axis_tx_data_V_keep_V_1_vld_in = ap_const_logic_0) and (m_axis_tx_data_V_keep_V_1_ack_out = ap_const_logic_1))) and not(((m_axis_tx_data_TREADY = ap_const_logic_0) and (m_axis_tx_data_V_keep_V_1_vld_in = ap_const_logic_1))) and (m_axis_tx_data_V_keep_V_1_state = ap_const_lv2_3)) or ((m_axis_tx_data_V_keep_V_1_state = ap_const_lv2_2) and (m_axis_tx_data_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    m_axis_tx_data_V_keep_V_1_state <= ap_const_lv2_3;
                else 
                    m_axis_tx_data_V_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    m_axis_tx_data_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                m_axis_tx_data_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((m_axis_tx_data_V_last_V_1_vld_out = ap_const_logic_1) and (m_axis_tx_data_V_last_V_1_ack_out = ap_const_logic_1))) then 
                                        m_axis_tx_data_V_last_V_1_sel_rd <= not(m_axis_tx_data_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    m_axis_tx_data_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                m_axis_tx_data_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((m_axis_tx_data_V_last_V_1_ack_in = ap_const_logic_1) and (m_axis_tx_data_V_last_V_1_vld_in = ap_const_logic_1))) then 
                                        m_axis_tx_data_V_last_V_1_sel_wr <= not(m_axis_tx_data_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    m_axis_tx_data_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                m_axis_tx_data_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((m_axis_tx_data_V_last_V_1_state = ap_const_lv2_3) and (m_axis_tx_data_V_last_V_1_vld_in = ap_const_logic_0) and (m_axis_tx_data_V_last_V_1_ack_out = ap_const_logic_1)) or ((m_axis_tx_data_V_last_V_1_state = ap_const_lv2_2) and (m_axis_tx_data_V_last_V_1_vld_in = ap_const_logic_0)))) then 
                    m_axis_tx_data_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((m_axis_tx_data_TREADY = ap_const_logic_0) and (m_axis_tx_data_V_last_V_1_state = ap_const_lv2_1)) or ((m_axis_tx_data_V_last_V_1_state = ap_const_lv2_3) and (m_axis_tx_data_TREADY = ap_const_logic_0) and (m_axis_tx_data_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    m_axis_tx_data_V_last_V_1_state <= ap_const_lv2_1;
                elsif ((((m_axis_tx_data_V_last_V_1_ack_out = ap_const_logic_1) and (m_axis_tx_data_V_last_V_1_state = ap_const_lv2_1)) or (not(((m_axis_tx_data_V_last_V_1_vld_in = ap_const_logic_0) and (m_axis_tx_data_V_last_V_1_ack_out = ap_const_logic_1))) and not(((m_axis_tx_data_TREADY = ap_const_logic_0) and (m_axis_tx_data_V_last_V_1_vld_in = ap_const_logic_1))) and (m_axis_tx_data_V_last_V_1_state = ap_const_lv2_3)) or ((m_axis_tx_data_V_last_V_1_state = ap_const_lv2_2) and (m_axis_tx_data_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    m_axis_tx_data_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    m_axis_tx_data_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    gi_state_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_175)) then
                if (((tmp_nbreadreq_fu_200_p3 = ap_const_lv1_1) and (gi_state = ap_const_lv2_0))) then 
                    gi_state <= ap_const_lv2_1;
                elsif (((or_ln887_fu_869_p2 = ap_const_lv1_1) and (gi_state_load_load_fu_260_p1 = ap_const_lv2_1))) then 
                    gi_state <= ap_const_lv2_2;
                elsif (((grp_nbreadreq_fu_178_p5 = ap_const_lv1_1) and (gi_state = ap_const_lv2_2))) then 
                    gi_state <= select_ln137_fu_527_p3;
                elsif ((ap_const_boolean_1 = ap_condition_436)) then 
                    gi_state <= ap_const_lv2_0;
                end if;
            end if; 
        end if;
    end process;

    header_idx_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_175)) then
                if (((tmp_nbreadreq_fu_200_p3 = ap_const_lv1_1) and (gi_state = ap_const_lv2_0))) then 
                    header_idx_1 <= ap_const_lv16_0;
                elsif ((gi_state_load_load_fu_260_p1 = ap_const_lv2_1)) then 
                    header_idx_1 <= select_ln82_fu_821_p3;
                elsif (((grp_nbreadreq_fu_178_p5 = ap_const_lv1_1) and (gi_state = ap_const_lv2_2))) then 
                    header_idx_1 <= select_ln82_2_fu_507_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_nbreadreq_fu_178_p5 = ap_const_lv1_1) and (gi_state = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln82_1_reg_1155 <= and_ln82_1_fu_493_p2;
                icmp_ln76_1_reg_1130 <= icmp_ln76_1_fu_301_p2;
                lshr_ln647_4_reg_1140 <= lshr_ln647_4_fu_393_p2;
                lshr_ln647_6_reg_1150 <= lshr_ln647_6_fu_481_p2;
                    sub_ln647_10_reg_1135(7 downto 1) <= sub_ln647_10_fu_383_p2(7 downto 1);
                    sub_ln647_13_reg_1145(7 downto 1) <= sub_ln647_13_fu_471_p2(7 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((gi_state_load_load_fu_260_p1 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln82_reg_1180 <= and_ln82_fu_807_p2;
                lshr_ln647_2_reg_1175 <= lshr_ln647_2_fu_795_p2;
                lshr_ln647_reg_1165 <= lshr_ln647_fu_659_p2;
                    sub_ln647_3_reg_1160(7 downto 1) <= sub_ln647_3_fu_649_p2(7 downto 1);
                    sub_ln647_6_reg_1170(7 downto 1) <= sub_ln647_6_fu_785_p2(7 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                gi_state_load_reg_1108 <= gi_state;
                gi_state_load_reg_1108_pp0_iter1_reg <= gi_state_load_reg_1108;
                tmp_3_reg_1121_pp0_iter1_reg <= tmp_3_reg_1121;
                tmp_4_reg_1112_pp0_iter1_reg <= tmp_4_reg_1112;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_nbreadreq_fu_200_p3 = ap_const_lv1_1) and (gi_state = ap_const_lv2_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                header_header_V_1 <= p_Result_s_fu_965_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((m_axis_tx_data_V_data_V_1_load_A = ap_const_logic_1)) then
                m_axis_tx_data_V_data_V_1_payload_A <= m_axis_tx_data_V_data_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((m_axis_tx_data_V_data_V_1_load_B = ap_const_logic_1)) then
                m_axis_tx_data_V_data_V_1_payload_B <= m_axis_tx_data_V_data_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((m_axis_tx_data_V_keep_V_1_load_A = ap_const_logic_1)) then
                m_axis_tx_data_V_keep_V_1_payload_A <= m_axis_tx_data_V_keep_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((m_axis_tx_data_V_keep_V_1_load_B = ap_const_logic_1)) then
                m_axis_tx_data_V_keep_V_1_payload_B <= m_axis_tx_data_V_keep_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((m_axis_tx_data_V_last_V_1_load_A = ap_const_logic_1)) then
                m_axis_tx_data_V_last_V_1_payload_A <= m_axis_tx_data_V_last_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((m_axis_tx_data_V_last_V_1_load_B = ap_const_logic_1)) then
                m_axis_tx_data_V_last_V_1_payload_B <= m_axis_tx_data_V_last_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((grp_nbreadreq_fu_178_p5 = ap_const_lv1_1) and (gi_state = ap_const_lv2_2) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((grp_nbreadreq_fu_178_p5 = ap_const_lv1_1) and (gi_state = ap_const_lv2_3) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then
                reg_250 <= tx_shift2ipv4Fifo_V_1_dout;
                reg_255 <= tx_shift2ipv4Fifo_V_2_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((gi_state = ap_const_lv2_2) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_3_reg_1121 <= grp_nbreadreq_fu_178_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((gi_state = ap_const_lv2_3) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_4_reg_1112 <= grp_nbreadreq_fu_178_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_nbreadreq_fu_178_p5 = ap_const_lv1_1) and (gi_state = ap_const_lv2_3) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_last_V_3_reg_1116 <= tx_shift2ipv4Fifo_V_s_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_nbreadreq_fu_178_p5 = ap_const_lv1_1) and (gi_state = ap_const_lv2_2) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_last_V_reg_1125 <= tx_shift2ipv4Fifo_V_s_dout;
            end if;
        end if;
    end process;
    sub_ln647_10_reg_1135(0) <= '0';
    sub_ln647_13_reg_1145(0) <= '0';
    sub_ln647_3_reg_1160(0) <= '0';
    sub_ln647_6_reg_1170(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    Lo_assign_1_fu_283_p3 <= (header_idx_1 & ap_const_lv6_0);
    Lo_assign_fu_549_p3 <= (header_idx_1 & ap_const_lv6_0);
    add_ln647_1_fu_429_p2 <= std_logic_vector(unsigned(tmp_14_fu_411_p3) + unsigned(ap_const_lv8_61));
    add_ln647_fu_743_p2 <= std_logic_vector(unsigned(tmp_8_fu_725_p3) + unsigned(ap_const_lv8_61));
    add_ln76_1_fu_295_p2 <= std_logic_vector(unsigned(zext_ln76_1_fu_291_p1) + unsigned(ap_const_lv23_40));
    add_ln76_fu_561_p2 <= std_logic_vector(unsigned(zext_ln76_fu_557_p1) + unsigned(ap_const_lv23_40));
    agg_result_V_0_1_i_i_fu_921_p3 <= (trunc_ln647_2_fu_917_p1 & p_Result_2_i_i_i_fu_907_p4);
    and_ln82_1_fu_493_p2 <= (xor_ln76_1_fu_487_p2 and icmp_ln82_1_fu_399_p2);
    and_ln82_fu_807_p2 <= (xor_ln76_fu_801_p2 and icmp_ln82_fu_713_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, ap_done_reg, ap_enable_reg_pp0_iter2, io_acc_block_signal_op10, ap_predicate_op10_read_state1, io_acc_block_signal_op16, ap_predicate_op16_read_state1, txEng_ipMetaDataFifoIn_V_TVALID, ap_predicate_op119_read_state1, m_axis_tx_data_TREADY, m_axis_tx_data_V_data_V_1_state, m_axis_tx_data_V_keep_V_1_state, m_axis_tx_data_V_last_V_1_state)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((txEng_ipMetaDataFifoIn_V_TVALID = ap_const_logic_0) and (ap_predicate_op119_read_state1 = ap_const_boolean_1)) or ((io_acc_block_signal_op16 = ap_const_logic_0) and (ap_predicate_op16_read_state1 = ap_const_boolean_1)) or ((io_acc_block_signal_op10 = ap_const_logic_0) and (ap_predicate_op10_read_state1 = ap_const_boolean_1)))) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((m_axis_tx_data_V_last_V_1_state = ap_const_lv2_1) or (m_axis_tx_data_V_keep_V_1_state = ap_const_lv2_1) or (m_axis_tx_data_V_data_V_1_state = ap_const_lv2_1) or ((m_axis_tx_data_V_last_V_1_state = ap_const_lv2_3) and (m_axis_tx_data_TREADY = ap_const_logic_0)) or ((m_axis_tx_data_V_keep_V_1_state = ap_const_lv2_3) and (m_axis_tx_data_TREADY = ap_const_logic_0)) or ((m_axis_tx_data_V_data_V_1_state = ap_const_lv2_3) and (m_axis_tx_data_TREADY = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_done_reg, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, io_acc_block_signal_op10, ap_predicate_op10_read_state1, io_acc_block_signal_op16, ap_predicate_op16_read_state1, txEng_ipMetaDataFifoIn_V_TVALID, ap_predicate_op119_read_state1, m_axis_tx_data_TREADY, ap_block_state2_io, m_axis_tx_data_V_data_V_1_state, m_axis_tx_data_V_keep_V_1_state, m_axis_tx_data_V_last_V_1_state, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((txEng_ipMetaDataFifoIn_V_TVALID = ap_const_logic_0) and (ap_predicate_op119_read_state1 = ap_const_boolean_1)) or ((io_acc_block_signal_op16 = ap_const_logic_0) and (ap_predicate_op16_read_state1 = ap_const_boolean_1)) or ((io_acc_block_signal_op10 = ap_const_logic_0) and (ap_predicate_op10_read_state1 = ap_const_boolean_1)))) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state3_io) or (m_axis_tx_data_V_last_V_1_state = ap_const_lv2_1) or (m_axis_tx_data_V_keep_V_1_state = ap_const_lv2_1) or (m_axis_tx_data_V_data_V_1_state = ap_const_lv2_1) or ((m_axis_tx_data_V_last_V_1_state = ap_const_lv2_3) and (m_axis_tx_data_TREADY = ap_const_logic_0)) or ((m_axis_tx_data_V_keep_V_1_state = ap_const_lv2_3) and (m_axis_tx_data_TREADY = ap_const_logic_0)) or ((m_axis_tx_data_V_data_V_1_state = ap_const_lv2_3) and (m_axis_tx_data_TREADY = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_io)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_done_reg, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, io_acc_block_signal_op10, ap_predicate_op10_read_state1, io_acc_block_signal_op16, ap_predicate_op16_read_state1, txEng_ipMetaDataFifoIn_V_TVALID, ap_predicate_op119_read_state1, m_axis_tx_data_TREADY, ap_block_state2_io, m_axis_tx_data_V_data_V_1_state, m_axis_tx_data_V_keep_V_1_state, m_axis_tx_data_V_last_V_1_state, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((txEng_ipMetaDataFifoIn_V_TVALID = ap_const_logic_0) and (ap_predicate_op119_read_state1 = ap_const_boolean_1)) or ((io_acc_block_signal_op16 = ap_const_logic_0) and (ap_predicate_op16_read_state1 = ap_const_boolean_1)) or ((io_acc_block_signal_op10 = ap_const_logic_0) and (ap_predicate_op10_read_state1 = ap_const_boolean_1)))) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state3_io) or (m_axis_tx_data_V_last_V_1_state = ap_const_lv2_1) or (m_axis_tx_data_V_keep_V_1_state = ap_const_lv2_1) or (m_axis_tx_data_V_data_V_1_state = ap_const_lv2_1) or ((m_axis_tx_data_V_last_V_1_state = ap_const_lv2_3) and (m_axis_tx_data_TREADY = ap_const_logic_0)) or ((m_axis_tx_data_V_keep_V_1_state = ap_const_lv2_3) and (m_axis_tx_data_TREADY = ap_const_logic_0)) or ((m_axis_tx_data_V_data_V_1_state = ap_const_lv2_3) and (m_axis_tx_data_TREADY = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_io)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start, ap_done_reg, io_acc_block_signal_op10, ap_predicate_op10_read_state1, io_acc_block_signal_op16, ap_predicate_op16_read_state1, txEng_ipMetaDataFifoIn_V_TVALID, ap_predicate_op119_read_state1)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((txEng_ipMetaDataFifoIn_V_TVALID = ap_const_logic_0) and (ap_predicate_op119_read_state1 = ap_const_boolean_1)) or ((io_acc_block_signal_op16 = ap_const_logic_0) and (ap_predicate_op16_read_state1 = ap_const_boolean_1)) or ((io_acc_block_signal_op10 = ap_const_logic_0) and (ap_predicate_op10_read_state1 = ap_const_boolean_1)));
    end process;


    ap_block_state2_io_assign_proc : process(m_axis_tx_data_V_data_V_1_ack_in, gi_state_load_reg_1108, ap_predicate_op135_write_state2, ap_predicate_op149_write_state2)
    begin
                ap_block_state2_io <= (((m_axis_tx_data_V_data_V_1_ack_in = ap_const_logic_0) and (ap_predicate_op135_write_state2 = ap_const_boolean_1)) or ((gi_state_load_reg_1108 = ap_const_lv2_1) and (m_axis_tx_data_V_data_V_1_ack_in = ap_const_logic_0)) or ((m_axis_tx_data_V_data_V_1_ack_in = ap_const_logic_0) and (ap_predicate_op149_write_state2 = ap_const_boolean_1)));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_io_assign_proc : process(m_axis_tx_data_V_data_V_1_ack_in, gi_state_load_reg_1108_pp0_iter1_reg, ap_predicate_op167_write_state3, ap_predicate_op171_write_state3)
    begin
                ap_block_state3_io <= (((m_axis_tx_data_V_data_V_1_ack_in = ap_const_logic_0) and (gi_state_load_reg_1108_pp0_iter1_reg = ap_const_lv2_1)) or ((m_axis_tx_data_V_data_V_1_ack_in = ap_const_logic_0) and (ap_predicate_op171_write_state3 = ap_const_boolean_1)) or ((m_axis_tx_data_V_data_V_1_ack_in = ap_const_logic_0) and (ap_predicate_op167_write_state3 = ap_const_boolean_1)));
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(m_axis_tx_data_TREADY, m_axis_tx_data_V_data_V_1_state, m_axis_tx_data_V_keep_V_1_state, m_axis_tx_data_V_last_V_1_state)
    begin
                ap_block_state3_pp0_stage0_iter2 <= ((m_axis_tx_data_V_last_V_1_state = ap_const_lv2_1) or (m_axis_tx_data_V_keep_V_1_state = ap_const_lv2_1) or (m_axis_tx_data_V_data_V_1_state = ap_const_lv2_1) or ((m_axis_tx_data_V_last_V_1_state = ap_const_lv2_3) and (m_axis_tx_data_TREADY = ap_const_logic_0)) or ((m_axis_tx_data_V_keep_V_1_state = ap_const_lv2_3) and (m_axis_tx_data_TREADY = ap_const_logic_0)) or ((m_axis_tx_data_V_data_V_1_state = ap_const_lv2_3) and (m_axis_tx_data_TREADY = ap_const_logic_0)));
    end process;


    ap_condition_175_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
                ap_condition_175 <= ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_436_assign_proc : process(grp_nbreadreq_fu_178_p5, gi_state, grp_fu_237_p1)
    begin
                ap_condition_436 <= ((grp_fu_237_p1 = ap_const_lv1_1) and (grp_nbreadreq_fu_178_p5 = ap_const_lv1_1) and (gi_state = ap_const_lv2_3));
    end process;


    ap_condition_477_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_01001)
    begin
                ap_condition_477 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op10_read_state1_assign_proc : process(grp_nbreadreq_fu_178_p5, gi_state)
    begin
                ap_predicate_op10_read_state1 <= ((grp_nbreadreq_fu_178_p5 = ap_const_lv1_1) and (gi_state = ap_const_lv2_3));
    end process;


    ap_predicate_op119_read_state1_assign_proc : process(tmp_nbreadreq_fu_200_p3, gi_state)
    begin
                ap_predicate_op119_read_state1 <= ((tmp_nbreadreq_fu_200_p3 = ap_const_lv1_1) and (gi_state = ap_const_lv2_0));
    end process;


    ap_predicate_op135_write_state2_assign_proc : process(gi_state_load_reg_1108, tmp_4_reg_1112)
    begin
                ap_predicate_op135_write_state2 <= ((tmp_4_reg_1112 = ap_const_lv1_1) and (gi_state_load_reg_1108 = ap_const_lv2_3));
    end process;


    ap_predicate_op149_write_state2_assign_proc : process(gi_state_load_reg_1108, tmp_3_reg_1121)
    begin
                ap_predicate_op149_write_state2 <= ((gi_state_load_reg_1108 = ap_const_lv2_2) and (tmp_3_reg_1121 = ap_const_lv1_1));
    end process;


    ap_predicate_op167_write_state3_assign_proc : process(gi_state_load_reg_1108_pp0_iter1_reg, tmp_4_reg_1112_pp0_iter1_reg)
    begin
                ap_predicate_op167_write_state3 <= ((tmp_4_reg_1112_pp0_iter1_reg = ap_const_lv1_1) and (gi_state_load_reg_1108_pp0_iter1_reg = ap_const_lv2_3));
    end process;


    ap_predicate_op16_read_state1_assign_proc : process(grp_nbreadreq_fu_178_p5, gi_state)
    begin
                ap_predicate_op16_read_state1 <= ((grp_nbreadreq_fu_178_p5 = ap_const_lv1_1) and (gi_state = ap_const_lv2_2));
    end process;


    ap_predicate_op171_write_state3_assign_proc : process(gi_state_load_reg_1108_pp0_iter1_reg, tmp_3_reg_1121_pp0_iter1_reg)
    begin
                ap_predicate_op171_write_state3 <= ((gi_state_load_reg_1108_pp0_iter1_reg = ap_const_lv2_2) and (tmp_3_reg_1121_pp0_iter1_reg = ap_const_lv1_1));
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to1 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    currWord_data_V_1_fu_1044_p3 <= 
        p_Result_14_fu_1025_p5 when (and_ln82_1_reg_1155(0) = '1') else 
        select_ln76_2_fu_1037_p3;
    currWord_data_V_fu_1100_p3 <= 
        p_Result_8_fu_1088_p5 when (and_ln82_reg_1180(0) = '1') else 
        trunc_ln364_fu_1066_p1;
    gi_state_load_load_fu_260_p1 <= gi_state;
    grp_fu_237_p1 <= tx_shift2ipv4Fifo_V_s_dout;
    grp_fu_245_p2 <= std_logic_vector(unsigned(header_idx_1) + unsigned(ap_const_lv16_1));
    grp_nbreadreq_fu_178_p5 <= (0=>(tx_shift2ipv4Fifo_V_s_empty_n and tx_shift2ipv4Fifo_V_2_empty_n and tx_shift2ipv4Fifo_V_1_empty_n), others=>'-');
    icmp_ln647_1_fu_719_p2 <= "1" when (unsigned(Lo_assign_fu_549_p3) > unsigned(ap_const_lv22_9F)) else "0";
    icmp_ln647_2_fu_313_p2 <= "1" when (unsigned(Lo_assign_1_fu_283_p3) > unsigned(or_ln78_1_fu_307_p2)) else "0";
    icmp_ln647_3_fu_405_p2 <= "1" when (unsigned(Lo_assign_1_fu_283_p3) > unsigned(ap_const_lv22_9F)) else "0";
    icmp_ln647_fu_579_p2 <= "1" when (unsigned(Lo_assign_fu_549_p3) > unsigned(or_ln78_fu_573_p2)) else "0";
    icmp_ln76_1_fu_301_p2 <= "1" when (unsigned(add_ln76_1_fu_295_p2) < unsigned(ap_const_lv23_A1)) else "0";
    icmp_ln76_fu_567_p2 <= "1" when (unsigned(add_ln76_fu_561_p2) < unsigned(ap_const_lv23_A1)) else "0";
    icmp_ln82_1_fu_399_p2 <= "1" when (unsigned(Lo_assign_1_fu_283_p3) < unsigned(ap_const_lv22_A0)) else "0";
    icmp_ln82_fu_713_p2 <= "1" when (unsigned(Lo_assign_fu_549_p3) < unsigned(ap_const_lv22_A0)) else "0";
    icmp_ln887_fu_863_p2 <= "1" when (select_ln80_fu_855_p3 = ap_const_lv5_0) else "0";
    io_acc_block_signal_op10 <= (tx_shift2ipv4Fifo_V_s_empty_n and tx_shift2ipv4Fifo_V_2_empty_n and tx_shift2ipv4Fifo_V_1_empty_n);
    io_acc_block_signal_op16 <= (tx_shift2ipv4Fifo_V_s_empty_n and tx_shift2ipv4Fifo_V_2_empty_n and tx_shift2ipv4Fifo_V_1_empty_n);
    length_V_1_fu_901_p2 <= std_logic_vector(unsigned(ap_const_lv16_14) + unsigned(meta_length_V_fu_885_p4));
    lshr_ln647_1_fu_1055_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv160_lc_2),to_integer(unsigned('0' & zext_ln647_1_fu_1052_p1(31-1 downto 0)))));
    lshr_ln647_2_fu_795_p2 <= std_logic_vector(shift_right(unsigned(select_ln647_4_fu_769_p3),to_integer(unsigned('0' & zext_ln647_2_fu_791_p1(31-1 downto 0)))));
    lshr_ln647_3_fu_1073_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv160_lc_2),to_integer(unsigned('0' & zext_ln647_3_fu_1070_p1(31-1 downto 0)))));
    lshr_ln647_4_fu_393_p2 <= std_logic_vector(shift_right(unsigned(select_ln647_7_fu_367_p3),to_integer(unsigned('0' & zext_ln647_4_fu_389_p1(31-1 downto 0)))));
    lshr_ln647_5_fu_992_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv160_lc_2),to_integer(unsigned('0' & zext_ln647_5_fu_989_p1(31-1 downto 0)))));
    lshr_ln647_6_fu_481_p2 <= std_logic_vector(shift_right(unsigned(select_ln647_10_fu_455_p3),to_integer(unsigned('0' & zext_ln647_6_fu_477_p1(31-1 downto 0)))));
    lshr_ln647_7_fu_1010_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv160_lc_2),to_integer(unsigned('0' & zext_ln647_7_fu_1007_p1(31-1 downto 0)))));
    lshr_ln647_fu_659_p2 <= std_logic_vector(shift_right(unsigned(select_ln647_1_fu_633_p3),to_integer(unsigned('0' & zext_ln647_fu_655_p1(31-1 downto 0)))));
    m_axis_tx_data_TDATA <= m_axis_tx_data_V_data_V_1_data_out;

    m_axis_tx_data_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, gi_state_load_reg_1108, ap_predicate_op135_write_state2, ap_predicate_op149_write_state2, m_axis_tx_data_V_data_V_1_state, gi_state_load_reg_1108_pp0_iter1_reg, ap_predicate_op167_write_state3, ap_predicate_op171_write_state3, ap_block_pp0_stage0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op135_write_state2 = ap_const_boolean_1)) or ((gi_state_load_reg_1108 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op149_write_state2 = ap_const_boolean_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (gi_state_load_reg_1108_pp0_iter1_reg = ap_const_lv2_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_predicate_op171_write_state3 = ap_const_boolean_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_predicate_op167_write_state3 = ap_const_boolean_1)))) then 
            m_axis_tx_data_TDATA_blk_n <= m_axis_tx_data_V_data_V_1_state(1);
        else 
            m_axis_tx_data_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    m_axis_tx_data_TKEEP <= m_axis_tx_data_V_keep_V_1_data_out;
    m_axis_tx_data_TLAST <= m_axis_tx_data_V_last_V_1_data_out;
    m_axis_tx_data_TVALID <= m_axis_tx_data_V_last_V_1_state(0);
    m_axis_tx_data_V_data_V_1_ack_in <= m_axis_tx_data_V_data_V_1_state(1);
    m_axis_tx_data_V_data_V_1_ack_out <= m_axis_tx_data_TREADY;

    m_axis_tx_data_V_data_V_1_data_in_assign_proc : process(gi_state_load_reg_1108, ap_predicate_op135_write_state2, ap_predicate_op149_write_state2, reg_250, currWord_data_V_1_fu_1044_p3, currWord_data_V_fu_1100_p3, ap_condition_477)
    begin
        if ((ap_const_boolean_1 = ap_condition_477)) then
            if ((gi_state_load_reg_1108 = ap_const_lv2_1)) then 
                m_axis_tx_data_V_data_V_1_data_in <= currWord_data_V_fu_1100_p3;
            elsif ((ap_predicate_op149_write_state2 = ap_const_boolean_1)) then 
                m_axis_tx_data_V_data_V_1_data_in <= currWord_data_V_1_fu_1044_p3;
            elsif ((ap_predicate_op135_write_state2 = ap_const_boolean_1)) then 
                m_axis_tx_data_V_data_V_1_data_in <= reg_250;
            else 
                m_axis_tx_data_V_data_V_1_data_in <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axis_tx_data_V_data_V_1_data_in <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    m_axis_tx_data_V_data_V_1_data_out_assign_proc : process(m_axis_tx_data_V_data_V_1_payload_A, m_axis_tx_data_V_data_V_1_payload_B, m_axis_tx_data_V_data_V_1_sel)
    begin
        if ((m_axis_tx_data_V_data_V_1_sel = ap_const_logic_1)) then 
            m_axis_tx_data_V_data_V_1_data_out <= m_axis_tx_data_V_data_V_1_payload_B;
        else 
            m_axis_tx_data_V_data_V_1_data_out <= m_axis_tx_data_V_data_V_1_payload_A;
        end if; 
    end process;

    m_axis_tx_data_V_data_V_1_load_A <= (m_axis_tx_data_V_data_V_1_state_cmp_full and not(m_axis_tx_data_V_data_V_1_sel_wr));
    m_axis_tx_data_V_data_V_1_load_B <= (m_axis_tx_data_V_data_V_1_state_cmp_full and m_axis_tx_data_V_data_V_1_sel_wr);
    m_axis_tx_data_V_data_V_1_sel <= m_axis_tx_data_V_data_V_1_sel_rd;
    m_axis_tx_data_V_data_V_1_state_cmp_full <= '0' when (m_axis_tx_data_V_data_V_1_state = ap_const_lv2_1) else '1';

    m_axis_tx_data_V_data_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, gi_state_load_reg_1108, ap_predicate_op135_write_state2, ap_predicate_op149_write_state2, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op135_write_state2 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((gi_state_load_reg_1108 = ap_const_lv2_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op149_write_state2 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            m_axis_tx_data_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            m_axis_tx_data_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    m_axis_tx_data_V_data_V_1_vld_out <= m_axis_tx_data_V_data_V_1_state(0);
    m_axis_tx_data_V_keep_V_1_ack_in <= m_axis_tx_data_V_keep_V_1_state(1);
    m_axis_tx_data_V_keep_V_1_ack_out <= m_axis_tx_data_TREADY;

    m_axis_tx_data_V_keep_V_1_data_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, gi_state_load_reg_1108, ap_predicate_op135_write_state2, ap_predicate_op149_write_state2, reg_255, ap_block_pp0_stage0_01001)
    begin
        if (((gi_state_load_reg_1108 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            m_axis_tx_data_V_keep_V_1_data_in <= ap_const_lv8_FF;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op135_write_state2 = ap_const_boolean_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op149_write_state2 = ap_const_boolean_1)))) then 
            m_axis_tx_data_V_keep_V_1_data_in <= reg_255;
        else 
            m_axis_tx_data_V_keep_V_1_data_in <= "XXXXXXXX";
        end if; 
    end process;


    m_axis_tx_data_V_keep_V_1_data_out_assign_proc : process(m_axis_tx_data_V_keep_V_1_payload_A, m_axis_tx_data_V_keep_V_1_payload_B, m_axis_tx_data_V_keep_V_1_sel)
    begin
        if ((m_axis_tx_data_V_keep_V_1_sel = ap_const_logic_1)) then 
            m_axis_tx_data_V_keep_V_1_data_out <= m_axis_tx_data_V_keep_V_1_payload_B;
        else 
            m_axis_tx_data_V_keep_V_1_data_out <= m_axis_tx_data_V_keep_V_1_payload_A;
        end if; 
    end process;

    m_axis_tx_data_V_keep_V_1_load_A <= (m_axis_tx_data_V_keep_V_1_state_cmp_full and not(m_axis_tx_data_V_keep_V_1_sel_wr));
    m_axis_tx_data_V_keep_V_1_load_B <= (m_axis_tx_data_V_keep_V_1_state_cmp_full and m_axis_tx_data_V_keep_V_1_sel_wr);
    m_axis_tx_data_V_keep_V_1_sel <= m_axis_tx_data_V_keep_V_1_sel_rd;
    m_axis_tx_data_V_keep_V_1_state_cmp_full <= '0' when (m_axis_tx_data_V_keep_V_1_state = ap_const_lv2_1) else '1';

    m_axis_tx_data_V_keep_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, gi_state_load_reg_1108, ap_predicate_op135_write_state2, ap_predicate_op149_write_state2, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op135_write_state2 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((gi_state_load_reg_1108 = ap_const_lv2_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op149_write_state2 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            m_axis_tx_data_V_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            m_axis_tx_data_V_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    m_axis_tx_data_V_keep_V_1_vld_out <= m_axis_tx_data_V_keep_V_1_state(0);
    m_axis_tx_data_V_last_V_1_ack_in <= m_axis_tx_data_V_last_V_1_state(1);
    m_axis_tx_data_V_last_V_1_ack_out <= m_axis_tx_data_TREADY;

    m_axis_tx_data_V_last_V_1_data_in_assign_proc : process(gi_state_load_reg_1108, ap_predicate_op135_write_state2, ap_predicate_op149_write_state2, tmp_last_V_3_reg_1116, tmp_last_V_reg_1125, ap_condition_477)
    begin
        if ((ap_const_boolean_1 = ap_condition_477)) then
            if ((gi_state_load_reg_1108 = ap_const_lv2_1)) then 
                m_axis_tx_data_V_last_V_1_data_in <= ap_const_lv1_0;
            elsif ((ap_predicate_op149_write_state2 = ap_const_boolean_1)) then 
                m_axis_tx_data_V_last_V_1_data_in <= tmp_last_V_reg_1125;
            elsif ((ap_predicate_op135_write_state2 = ap_const_boolean_1)) then 
                m_axis_tx_data_V_last_V_1_data_in <= tmp_last_V_3_reg_1116;
            else 
                m_axis_tx_data_V_last_V_1_data_in <= "X";
            end if;
        else 
            m_axis_tx_data_V_last_V_1_data_in <= "X";
        end if; 
    end process;


    m_axis_tx_data_V_last_V_1_data_out_assign_proc : process(m_axis_tx_data_V_last_V_1_payload_A, m_axis_tx_data_V_last_V_1_payload_B, m_axis_tx_data_V_last_V_1_sel)
    begin
        if ((m_axis_tx_data_V_last_V_1_sel = ap_const_logic_1)) then 
            m_axis_tx_data_V_last_V_1_data_out <= m_axis_tx_data_V_last_V_1_payload_B;
        else 
            m_axis_tx_data_V_last_V_1_data_out <= m_axis_tx_data_V_last_V_1_payload_A;
        end if; 
    end process;

    m_axis_tx_data_V_last_V_1_load_A <= (m_axis_tx_data_V_last_V_1_state_cmp_full and not(m_axis_tx_data_V_last_V_1_sel_wr));
    m_axis_tx_data_V_last_V_1_load_B <= (m_axis_tx_data_V_last_V_1_state_cmp_full and m_axis_tx_data_V_last_V_1_sel_wr);
    m_axis_tx_data_V_last_V_1_sel <= m_axis_tx_data_V_last_V_1_sel_rd;
    m_axis_tx_data_V_last_V_1_state_cmp_full <= '0' when (m_axis_tx_data_V_last_V_1_state = ap_const_lv2_1) else '1';

    m_axis_tx_data_V_last_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, gi_state_load_reg_1108, ap_predicate_op135_write_state2, ap_predicate_op149_write_state2, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op135_write_state2 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((gi_state_load_reg_1108 = ap_const_lv2_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op149_write_state2 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            m_axis_tx_data_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            m_axis_tx_data_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    m_axis_tx_data_V_last_V_1_vld_out <= m_axis_tx_data_V_last_V_1_state(0);
    meta_length_V_fu_885_p4 <= txEng_ipMetaDataFifoIn_V_TDATA(47 downto 32);
    meta_their_address_V_fu_881_p1 <= txEng_ipMetaDataFifoIn_V_TDATA(32 - 1 downto 0);
    or_ln78_1_fu_307_p2 <= (ap_const_lv22_3F or Lo_assign_1_fu_283_p3);
    or_ln78_fu_573_p2 <= (ap_const_lv22_3F or Lo_assign_fu_549_p3);
    or_ln887_fu_869_p2 <= (xor_ln76_fu_801_p2 or icmp_ln887_fu_863_p2);
    p_Result_14_fu_1025_p5 <= (reg_250(63 downto 32) & trunc_ln215_1_fu_1021_p1);
    p_Result_15_fu_929_p5 <= (header_header_V_1(159 downto 32) & agg_result_V_0_1_i_i_fu_921_p3 & header_header_V_1(15 downto 0));
    p_Result_16_fu_941_p5 <= (meta_their_address_V_fu_881_p1 & p_Result_15_fu_929_p5(127 downto 0));
    p_Result_17_fu_953_p5 <= (p_Result_16_fu_941_p5(159 downto 128) & local_ipv4_address_V & p_Result_16_fu_941_p5(95 downto 0));
    p_Result_18_fu_1061_p2 <= (lshr_ln647_reg_1165 and lshr_ln647_1_fu_1055_p2);
    p_Result_19_fu_1079_p2 <= (lshr_ln647_3_fu_1073_p2 and lshr_ln647_2_reg_1175);
    p_Result_20_fu_998_p2 <= (lshr_ln647_5_fu_992_p2 and lshr_ln647_4_reg_1140);
    p_Result_21_fu_1016_p2 <= (lshr_ln647_7_fu_1010_p2 and lshr_ln647_6_reg_1150);
    p_Result_2_i_i_i_fu_907_p4 <= length_V_1_fu_901_p2(15 downto 8);
    p_Result_8_fu_1088_p5 <= (ap_const_lv64_0(63 downto 32) & trunc_ln215_fu_1084_p1);
    p_Result_s_fu_965_p5 <= (p_Result_17_fu_953_p5(159 downto 80) & protocol_V & p_Result_17_fu_953_p5(71 downto 0));
    select_ln137_fu_527_p3 <= 
        ap_const_lv2_3 when (xor_ln137_fu_521_p2(0) = '1') else 
        ap_const_lv2_0;
    select_ln647_10_fu_455_p3 <= 
        tmp_15_fu_419_p4 when (icmp_ln647_3_fu_405_p2(0) = '1') else 
        header_header_V_1;
    select_ln647_11_fu_463_p3 <= 
        sub_ln647_11_fu_435_p2 when (icmp_ln647_3_fu_405_p2(0) = '1') else 
        tmp_14_fu_411_p3;
    select_ln647_1_fu_633_p3 <= 
        tmp_6_fu_597_p4 when (icmp_ln647_fu_579_p2(0) = '1') else 
        header_header_V_1;
    select_ln647_2_fu_641_p3 <= 
        sub_ln647_1_fu_613_p2 when (icmp_ln647_fu_579_p2(0) = '1') else 
        tmp_5_fu_585_p3;
    select_ln647_3_fu_761_p3 <= 
        add_ln647_fu_743_p2 when (icmp_ln647_1_fu_719_p2(0) = '1') else 
        sub_ln647_5_fu_755_p2;
    select_ln647_4_fu_769_p3 <= 
        tmp_9_fu_733_p4 when (icmp_ln647_1_fu_719_p2(0) = '1') else 
        header_header_V_1;
    select_ln647_5_fu_777_p3 <= 
        sub_ln647_4_fu_749_p2 when (icmp_ln647_1_fu_719_p2(0) = '1') else 
        tmp_8_fu_725_p3;
    select_ln647_6_fu_359_p3 <= 
        sub_ln647_7_fu_341_p2 when (icmp_ln647_2_fu_313_p2(0) = '1') else 
        sub_ln647_9_fu_353_p2;
    select_ln647_7_fu_367_p3 <= 
        tmp_13_fu_331_p4 when (icmp_ln647_2_fu_313_p2(0) = '1') else 
        header_header_V_1;
    select_ln647_8_fu_375_p3 <= 
        sub_ln647_8_fu_347_p2 when (icmp_ln647_2_fu_313_p2(0) = '1') else 
        tmp_12_fu_319_p3;
    select_ln647_9_fu_447_p3 <= 
        add_ln647_1_fu_429_p2 when (icmp_ln647_3_fu_405_p2(0) = '1') else 
        sub_ln647_12_fu_441_p2;
    select_ln647_fu_625_p3 <= 
        sub_ln647_fu_607_p2 when (icmp_ln647_fu_579_p2(0) = '1') else 
        sub_ln647_2_fu_619_p2;
    select_ln76_1_fu_499_p3 <= 
        grp_fu_245_p2 when (icmp_ln76_1_fu_301_p2(0) = '1') else 
        header_idx_1;
    select_ln76_2_fu_1037_p3 <= 
        trunc_ln364_1_fu_1003_p1 when (icmp_ln76_1_reg_1130(0) = '1') else 
        reg_250;
    select_ln76_fu_813_p3 <= 
        grp_fu_245_p2 when (icmp_ln76_fu_567_p2(0) = '1') else 
        header_idx_1;
    select_ln80_fu_855_p3 <= 
        tmp_10_fu_835_p4 when (tmp_7_fu_683_p3(0) = '1') else 
        tmp_11_fu_845_p4;
    select_ln82_2_fu_507_p3 <= 
        grp_fu_245_p2 when (and_ln82_1_fu_493_p2(0) = '1') else 
        select_ln76_1_fu_499_p3;
    select_ln82_fu_821_p3 <= 
        grp_fu_245_p2 when (and_ln82_fu_807_p2(0) = '1') else 
        select_ln76_fu_813_p3;
    shl_ln_fu_665_p3 <= (grp_fu_245_p2 & ap_const_lv6_0);
    sub_ln647_10_fu_383_p2 <= std_logic_vector(signed(ap_const_lv8_9F) - signed(select_ln647_6_fu_359_p3));
    sub_ln647_11_fu_435_p2 <= std_logic_vector(signed(ap_const_lv8_9F) - signed(tmp_14_fu_411_p3));
    sub_ln647_12_fu_441_p2 <= std_logic_vector(signed(ap_const_lv8_9F) - signed(tmp_14_fu_411_p3));
    sub_ln647_13_fu_471_p2 <= std_logic_vector(signed(ap_const_lv8_9F) - signed(select_ln647_9_fu_447_p3));
    sub_ln647_1_fu_613_p2 <= std_logic_vector(signed(ap_const_lv8_9F) - signed(tmp_5_fu_585_p3));
    sub_ln647_2_fu_619_p2 <= std_logic_vector(unsigned(trunc_ln647_fu_593_p1) - unsigned(tmp_5_fu_585_p3));
    sub_ln647_3_fu_649_p2 <= std_logic_vector(signed(ap_const_lv8_9F) - signed(select_ln647_fu_625_p3));
    sub_ln647_4_fu_749_p2 <= std_logic_vector(signed(ap_const_lv8_9F) - signed(tmp_8_fu_725_p3));
    sub_ln647_5_fu_755_p2 <= std_logic_vector(signed(ap_const_lv8_9F) - signed(tmp_8_fu_725_p3));
    sub_ln647_6_fu_785_p2 <= std_logic_vector(signed(ap_const_lv8_9F) - signed(select_ln647_3_fu_761_p3));
    sub_ln647_7_fu_341_p2 <= std_logic_vector(unsigned(tmp_12_fu_319_p3) - unsigned(trunc_ln647_3_fu_327_p1));
    sub_ln647_8_fu_347_p2 <= std_logic_vector(signed(ap_const_lv8_9F) - signed(tmp_12_fu_319_p3));
    sub_ln647_9_fu_353_p2 <= std_logic_vector(unsigned(trunc_ln647_3_fu_327_p1) - unsigned(tmp_12_fu_319_p3));
    sub_ln647_fu_607_p2 <= std_logic_vector(unsigned(tmp_5_fu_585_p3) - unsigned(trunc_ln647_fu_593_p1));
    sub_ln80_1_fu_691_p2 <= std_logic_vector(unsigned(ap_const_lv23_0) - unsigned(sub_ln80_fu_677_p2));
    sub_ln80_2_fu_707_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(trunc_ln80_1_fu_697_p4));
    sub_ln80_fu_677_p2 <= std_logic_vector(unsigned(ap_const_lv23_A0) - unsigned(zext_ln80_fu_673_p1));
    tmp_10_fu_835_p4 <= sub_ln80_2_fu_707_p2(7 downto 3);
    tmp_11_fu_845_p4 <= sub_ln80_fu_677_p2(10 downto 6);
    tmp_12_fu_319_p3 <= (trunc_ln76_3_fu_279_p1 & ap_const_lv6_0);
    
    tmp_13_fu_331_p4_proc : process(header_header_V_1)
    variable vlo_cpy : STD_LOGIC_VECTOR(160+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(160+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(160 - 1 downto 0);
    variable tmp_13_fu_331_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(160 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(160 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(160 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(8 - 1 downto 0) := ap_const_lv32_9F(8 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(8 - 1 downto 0) := ap_const_lv32_0(8 - 1 downto 0);
        v0_cpy := header_header_V_1;
        if (vlo_cpy(8 - 1 downto 0) > vhi_cpy(8 - 1 downto 0)) then
            vhi_cpy(8-1 downto 0) := std_logic_vector(160-1-unsigned(ap_const_lv32_0(8-1 downto 0)));
            vlo_cpy(8-1 downto 0) := std_logic_vector(160-1-unsigned(ap_const_lv32_9F(8-1 downto 0)));
            for tmp_13_fu_331_p4_i in 0 to 160-1 loop
                v0_cpy(tmp_13_fu_331_p4_i) := header_header_V_1(160-1-tmp_13_fu_331_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(8-1 downto 0)))));

        section := (others=>'0');
        section(8-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(8-1 downto 0)) - unsigned(vlo_cpy(8-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(160-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_13_fu_331_p4 <= resvalue(160-1 downto 0);
    end process;

    tmp_14_fu_411_p3 <= (trunc_ln76_2_fu_275_p1 & ap_const_lv6_0);
    
    tmp_15_fu_419_p4_proc : process(header_header_V_1)
    variable vlo_cpy : STD_LOGIC_VECTOR(160+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(160+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(160 - 1 downto 0);
    variable tmp_15_fu_419_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(160 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(160 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(160 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(8 - 1 downto 0) := ap_const_lv32_9F(8 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(8 - 1 downto 0) := ap_const_lv32_0(8 - 1 downto 0);
        v0_cpy := header_header_V_1;
        if (vlo_cpy(8 - 1 downto 0) > vhi_cpy(8 - 1 downto 0)) then
            vhi_cpy(8-1 downto 0) := std_logic_vector(160-1-unsigned(ap_const_lv32_0(8-1 downto 0)));
            vlo_cpy(8-1 downto 0) := std_logic_vector(160-1-unsigned(ap_const_lv32_9F(8-1 downto 0)));
            for tmp_15_fu_419_p4_i in 0 to 160-1 loop
                v0_cpy(tmp_15_fu_419_p4_i) := header_header_V_1(160-1-tmp_15_fu_419_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(8-1 downto 0)))));

        section := (others=>'0');
        section(8-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(8-1 downto 0)) - unsigned(vlo_cpy(8-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(160-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_15_fu_419_p4 <= resvalue(160-1 downto 0);
    end process;

    tmp_5_fu_585_p3 <= (trunc_ln76_1_fu_545_p1 & ap_const_lv6_0);
    
    tmp_6_fu_597_p4_proc : process(header_header_V_1)
    variable vlo_cpy : STD_LOGIC_VECTOR(160+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(160+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(160 - 1 downto 0);
    variable tmp_6_fu_597_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(160 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(160 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(160 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(8 - 1 downto 0) := ap_const_lv32_9F(8 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(8 - 1 downto 0) := ap_const_lv32_0(8 - 1 downto 0);
        v0_cpy := header_header_V_1;
        if (vlo_cpy(8 - 1 downto 0) > vhi_cpy(8 - 1 downto 0)) then
            vhi_cpy(8-1 downto 0) := std_logic_vector(160-1-unsigned(ap_const_lv32_0(8-1 downto 0)));
            vlo_cpy(8-1 downto 0) := std_logic_vector(160-1-unsigned(ap_const_lv32_9F(8-1 downto 0)));
            for tmp_6_fu_597_p4_i in 0 to 160-1 loop
                v0_cpy(tmp_6_fu_597_p4_i) := header_header_V_1(160-1-tmp_6_fu_597_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(8-1 downto 0)))));

        section := (others=>'0');
        section(8-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(8-1 downto 0)) - unsigned(vlo_cpy(8-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(160-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_6_fu_597_p4 <= resvalue(160-1 downto 0);
    end process;

    tmp_7_fu_683_p3 <= sub_ln80_fu_677_p2(22 downto 22);
    tmp_8_fu_725_p3 <= (trunc_ln76_fu_541_p1 & ap_const_lv6_0);
    
    tmp_9_fu_733_p4_proc : process(header_header_V_1)
    variable vlo_cpy : STD_LOGIC_VECTOR(160+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(160+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(160 - 1 downto 0);
    variable tmp_9_fu_733_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(160 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(160 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(160 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(8 - 1 downto 0) := ap_const_lv32_9F(8 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(8 - 1 downto 0) := ap_const_lv32_0(8 - 1 downto 0);
        v0_cpy := header_header_V_1;
        if (vlo_cpy(8 - 1 downto 0) > vhi_cpy(8 - 1 downto 0)) then
            vhi_cpy(8-1 downto 0) := std_logic_vector(160-1-unsigned(ap_const_lv32_0(8-1 downto 0)));
            vlo_cpy(8-1 downto 0) := std_logic_vector(160-1-unsigned(ap_const_lv32_9F(8-1 downto 0)));
            for tmp_9_fu_733_p4_i in 0 to 160-1 loop
                v0_cpy(tmp_9_fu_733_p4_i) := header_header_V_1(160-1-tmp_9_fu_733_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(8-1 downto 0)))));

        section := (others=>'0');
        section(8-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(8-1 downto 0)) - unsigned(vlo_cpy(8-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(160-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_9_fu_733_p4 <= resvalue(160-1 downto 0);
    end process;

    tmp_nbreadreq_fu_200_p3 <= (0=>(txEng_ipMetaDataFifoIn_V_TVALID), others=>'-');
    trunc_ln215_1_fu_1021_p1 <= p_Result_21_fu_1016_p2(32 - 1 downto 0);
    trunc_ln215_fu_1084_p1 <= p_Result_19_fu_1079_p2(32 - 1 downto 0);
    trunc_ln364_1_fu_1003_p1 <= p_Result_20_fu_998_p2(64 - 1 downto 0);
    trunc_ln364_fu_1066_p1 <= p_Result_18_fu_1061_p2(64 - 1 downto 0);
    trunc_ln647_2_fu_917_p1 <= length_V_1_fu_901_p2(8 - 1 downto 0);
    trunc_ln647_3_fu_327_p1 <= or_ln78_1_fu_307_p2(8 - 1 downto 0);
    trunc_ln647_fu_593_p1 <= or_ln78_fu_573_p2(8 - 1 downto 0);
    trunc_ln76_1_fu_545_p1 <= header_idx_1(2 - 1 downto 0);
    trunc_ln76_2_fu_275_p1 <= header_idx_1(2 - 1 downto 0);
    trunc_ln76_3_fu_279_p1 <= header_idx_1(2 - 1 downto 0);
    trunc_ln76_fu_541_p1 <= header_idx_1(2 - 1 downto 0);
    trunc_ln80_1_fu_697_p4 <= sub_ln80_1_fu_691_p2(10 downto 3);

    txEng_ipMetaDataFifoIn_V_TDATA_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_pp0_stage0, txEng_ipMetaDataFifoIn_V_TVALID, ap_predicate_op119_read_state1, ap_block_pp0_stage0)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op119_read_state1 = ap_const_boolean_1))) then 
            txEng_ipMetaDataFifoIn_V_TDATA_blk_n <= txEng_ipMetaDataFifoIn_V_TVALID;
        else 
            txEng_ipMetaDataFifoIn_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    txEng_ipMetaDataFifoIn_V_TREADY_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_predicate_op119_read_state1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op119_read_state1 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            txEng_ipMetaDataFifoIn_V_TREADY <= ap_const_logic_1;
        else 
            txEng_ipMetaDataFifoIn_V_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    tx_shift2ipv4Fifo_V_1_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_pp0_stage0, tx_shift2ipv4Fifo_V_1_empty_n, ap_predicate_op10_read_state1, ap_predicate_op16_read_state1, ap_block_pp0_stage0)
    begin
        if (((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op16_read_state1 = ap_const_boolean_1)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op10_read_state1 = ap_const_boolean_1)))) then 
            tx_shift2ipv4Fifo_V_1_blk_n <= tx_shift2ipv4Fifo_V_1_empty_n;
        else 
            tx_shift2ipv4Fifo_V_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    tx_shift2ipv4Fifo_V_1_read_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_predicate_op10_read_state1, ap_predicate_op16_read_state1, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op16_read_state1 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op10_read_state1 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            tx_shift2ipv4Fifo_V_1_read <= ap_const_logic_1;
        else 
            tx_shift2ipv4Fifo_V_1_read <= ap_const_logic_0;
        end if; 
    end process;


    tx_shift2ipv4Fifo_V_2_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_pp0_stage0, tx_shift2ipv4Fifo_V_2_empty_n, ap_predicate_op10_read_state1, ap_predicate_op16_read_state1, ap_block_pp0_stage0)
    begin
        if (((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op16_read_state1 = ap_const_boolean_1)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op10_read_state1 = ap_const_boolean_1)))) then 
            tx_shift2ipv4Fifo_V_2_blk_n <= tx_shift2ipv4Fifo_V_2_empty_n;
        else 
            tx_shift2ipv4Fifo_V_2_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    tx_shift2ipv4Fifo_V_2_read_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_predicate_op10_read_state1, ap_predicate_op16_read_state1, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op16_read_state1 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op10_read_state1 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            tx_shift2ipv4Fifo_V_2_read <= ap_const_logic_1;
        else 
            tx_shift2ipv4Fifo_V_2_read <= ap_const_logic_0;
        end if; 
    end process;


    tx_shift2ipv4Fifo_V_s_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_pp0_stage0, tx_shift2ipv4Fifo_V_s_empty_n, ap_predicate_op10_read_state1, ap_predicate_op16_read_state1, ap_block_pp0_stage0)
    begin
        if (((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op16_read_state1 = ap_const_boolean_1)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op10_read_state1 = ap_const_boolean_1)))) then 
            tx_shift2ipv4Fifo_V_s_blk_n <= tx_shift2ipv4Fifo_V_s_empty_n;
        else 
            tx_shift2ipv4Fifo_V_s_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    tx_shift2ipv4Fifo_V_s_read_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_predicate_op10_read_state1, ap_predicate_op16_read_state1, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op16_read_state1 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op10_read_state1 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            tx_shift2ipv4Fifo_V_s_read <= ap_const_logic_1;
        else 
            tx_shift2ipv4Fifo_V_s_read <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln137_fu_521_p2 <= (tx_shift2ipv4Fifo_V_s_dout xor ap_const_lv1_1);
    xor_ln76_1_fu_487_p2 <= (icmp_ln76_1_fu_301_p2 xor ap_const_lv1_1);
    xor_ln76_fu_801_p2 <= (icmp_ln76_fu_567_p2 xor ap_const_lv1_1);
    zext_ln647_1_fu_1052_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln647_3_reg_1160),160));
    zext_ln647_2_fu_791_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln647_5_fu_777_p3),160));
    zext_ln647_3_fu_1070_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln647_6_reg_1170),160));
    zext_ln647_4_fu_389_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln647_8_fu_375_p3),160));
    zext_ln647_5_fu_989_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln647_10_reg_1135),160));
    zext_ln647_6_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln647_11_fu_463_p3),160));
    zext_ln647_7_fu_1007_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln647_13_reg_1145),160));
    zext_ln647_fu_655_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln647_2_fu_641_p3),160));
    zext_ln76_1_fu_291_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Lo_assign_1_fu_283_p3),23));
    zext_ln76_fu_557_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Lo_assign_fu_549_p3),23));
    zext_ln80_fu_673_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_665_p3),23));
end behav;
