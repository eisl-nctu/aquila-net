// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module route_by_eth_protoco (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        etherTypeFifo_V_V_dout,
        etherTypeFifo_V_V_empty_n,
        etherTypeFifo_V_V_read,
        ethDataFifo_V_data_V_dout,
        ethDataFifo_V_data_V_empty_n,
        ethDataFifo_V_data_V_read,
        ethDataFifo_V_keep_V_dout,
        ethDataFifo_V_keep_V_empty_n,
        ethDataFifo_V_keep_V_read,
        ethDataFifo_V_last_V_dout,
        ethDataFifo_V_last_V_empty_n,
        ethDataFifo_V_last_V_read,
        ipv6ShiftFifo_V_data_din,
        ipv6ShiftFifo_V_data_full_n,
        ipv6ShiftFifo_V_data_write,
        ipv6ShiftFifo_V_keep_din,
        ipv6ShiftFifo_V_keep_full_n,
        ipv6ShiftFifo_V_keep_write,
        ipv6ShiftFifo_V_last_din,
        ipv6ShiftFifo_V_last_full_n,
        ipv6ShiftFifo_V_last_write,
        ipv4ShiftFifo_V_data_din,
        ipv4ShiftFifo_V_data_full_n,
        ipv4ShiftFifo_V_data_write,
        ipv4ShiftFifo_V_keep_din,
        ipv4ShiftFifo_V_keep_full_n,
        ipv4ShiftFifo_V_keep_write,
        ipv4ShiftFifo_V_last_din,
        ipv4ShiftFifo_V_last_full_n,
        ipv4ShiftFifo_V_last_write,
        m_axis_arp_TREADY,
        m_axis_arp_TDATA,
        m_axis_arp_TVALID,
        m_axis_arp_TKEEP,
        m_axis_arp_TLAST
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] etherTypeFifo_V_V_dout;
input   etherTypeFifo_V_V_empty_n;
output   etherTypeFifo_V_V_read;
input  [63:0] ethDataFifo_V_data_V_dout;
input   ethDataFifo_V_data_V_empty_n;
output   ethDataFifo_V_data_V_read;
input  [7:0] ethDataFifo_V_keep_V_dout;
input   ethDataFifo_V_keep_V_empty_n;
output   ethDataFifo_V_keep_V_read;
input  [0:0] ethDataFifo_V_last_V_dout;
input   ethDataFifo_V_last_V_empty_n;
output   ethDataFifo_V_last_V_read;
output  [63:0] ipv6ShiftFifo_V_data_din;
input   ipv6ShiftFifo_V_data_full_n;
output   ipv6ShiftFifo_V_data_write;
output  [7:0] ipv6ShiftFifo_V_keep_din;
input   ipv6ShiftFifo_V_keep_full_n;
output   ipv6ShiftFifo_V_keep_write;
output  [0:0] ipv6ShiftFifo_V_last_din;
input   ipv6ShiftFifo_V_last_full_n;
output   ipv6ShiftFifo_V_last_write;
output  [63:0] ipv4ShiftFifo_V_data_din;
input   ipv4ShiftFifo_V_data_full_n;
output   ipv4ShiftFifo_V_data_write;
output  [7:0] ipv4ShiftFifo_V_keep_din;
input   ipv4ShiftFifo_V_keep_full_n;
output   ipv4ShiftFifo_V_keep_write;
output  [0:0] ipv4ShiftFifo_V_last_din;
input   ipv4ShiftFifo_V_last_full_n;
output   ipv4ShiftFifo_V_last_write;
input   m_axis_arp_TREADY;
output  [63:0] m_axis_arp_TDATA;
output   m_axis_arp_TVALID;
output  [7:0] m_axis_arp_TKEEP;
output  [0:0] m_axis_arp_TLAST;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg etherTypeFifo_V_V_read;
reg ethDataFifo_V_data_V_read;
reg ethDataFifo_V_keep_V_read;
reg ethDataFifo_V_last_V_read;
reg ipv6ShiftFifo_V_data_write;
reg ipv6ShiftFifo_V_keep_write;
reg ipv6ShiftFifo_V_last_write;
reg ipv4ShiftFifo_V_data_write;
reg ipv4ShiftFifo_V_keep_write;
reg ipv4ShiftFifo_V_last_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire   [0:0] tmp_1_nbreadreq_fu_74_p3;
wire   [0:0] grp_nbreadreq_fu_82_p5;
reg    ap_predicate_op10_read_state1;
wire    io_acc_block_signal_op12;
reg    ap_predicate_op12_read_state1;
wire    io_acc_block_signal_op20;
reg    ap_predicate_op20_read_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire    io_acc_block_signal_op35;
reg   [0:0] rep_fsmState_V_load_reg_225;
reg   [0:0] tmp_reg_246;
reg   [0:0] icmp_ln879_reg_257;
reg   [0:0] icmp_ln879_1_reg_261;
reg   [0:0] icmp_ln879_3_reg_265;
reg    ap_predicate_op35_write_state2;
wire    io_acc_block_signal_op36;
reg    ap_predicate_op36_write_state2;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ARPdataOut_V_data_V_1_ack_in;
reg   [0:0] tmp_1_reg_229;
reg   [0:0] tmp_2_reg_233;
reg   [0:0] icmp_ln879_2_reg_242;
reg    ap_predicate_op32_write_state2;
reg    ap_predicate_op37_write_state2;
reg    ap_block_state2_io;
wire    ARPdataOut_V_data_V_1_ack_out;
reg   [1:0] ARPdataOut_V_data_V_1_state;
wire    ARPdataOut_V_keep_V_1_ack_out;
reg   [1:0] ARPdataOut_V_keep_V_1_state;
wire    ARPdataOut_V_last_V_1_ack_out;
reg   [1:0] ARPdataOut_V_last_V_1_state;
reg    ap_block_state3_pp0_stage0_iter2;
reg   [0:0] rep_fsmState_V_load_reg_225_pp0_iter1_reg;
reg   [0:0] tmp_1_reg_229_pp0_iter1_reg;
reg   [0:0] tmp_2_reg_233_pp0_iter1_reg;
reg   [0:0] icmp_ln879_2_reg_242_pp0_iter1_reg;
reg    ap_predicate_op51_write_state3;
reg   [0:0] tmp_reg_246_pp0_iter1_reg;
reg   [0:0] icmp_ln879_reg_257_pp0_iter1_reg;
reg    ap_predicate_op60_write_state3;
reg    ap_block_state3_io;
reg    ap_block_pp0_stage0_11001;
reg   [63:0] ARPdataOut_V_data_V_1_data_out;
reg    ARPdataOut_V_data_V_1_vld_in;
wire    ARPdataOut_V_data_V_1_vld_out;
reg   [63:0] ARPdataOut_V_data_V_1_payload_A;
reg   [63:0] ARPdataOut_V_data_V_1_payload_B;
reg    ARPdataOut_V_data_V_1_sel_rd;
reg    ARPdataOut_V_data_V_1_sel_wr;
wire    ARPdataOut_V_data_V_1_sel;
wire    ARPdataOut_V_data_V_1_load_A;
wire    ARPdataOut_V_data_V_1_load_B;
wire    ARPdataOut_V_data_V_1_state_cmp_full;
reg   [7:0] ARPdataOut_V_keep_V_1_data_out;
reg    ARPdataOut_V_keep_V_1_vld_in;
wire    ARPdataOut_V_keep_V_1_vld_out;
wire    ARPdataOut_V_keep_V_1_ack_in;
reg   [7:0] ARPdataOut_V_keep_V_1_payload_A;
reg   [7:0] ARPdataOut_V_keep_V_1_payload_B;
reg    ARPdataOut_V_keep_V_1_sel_rd;
reg    ARPdataOut_V_keep_V_1_sel_wr;
wire    ARPdataOut_V_keep_V_1_sel;
wire    ARPdataOut_V_keep_V_1_load_A;
wire    ARPdataOut_V_keep_V_1_load_B;
wire    ARPdataOut_V_keep_V_1_state_cmp_full;
reg   [0:0] ARPdataOut_V_last_V_1_data_in;
reg   [0:0] ARPdataOut_V_last_V_1_data_out;
reg    ARPdataOut_V_last_V_1_vld_in;
wire    ARPdataOut_V_last_V_1_vld_out;
wire    ARPdataOut_V_last_V_1_ack_in;
reg   [0:0] ARPdataOut_V_last_V_1_payload_A;
reg   [0:0] ARPdataOut_V_last_V_1_payload_B;
reg    ARPdataOut_V_last_V_1_sel_rd;
reg    ARPdataOut_V_last_V_1_sel_wr;
wire    ARPdataOut_V_last_V_1_sel;
wire    ARPdataOut_V_last_V_1_load_A;
wire    ARPdataOut_V_last_V_1_load_B;
wire    ARPdataOut_V_last_V_1_state_cmp_full;
reg   [0:0] rep_fsmState_V;
reg   [15:0] rep_etherType_V;
reg    m_axis_arp_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    etherTypeFifo_V_V_blk_n;
reg    ethDataFifo_V_data_V_blk_n;
reg    ethDataFifo_V_keep_V_blk_n;
reg    ethDataFifo_V_last_V_blk_n;
reg    ipv4ShiftFifo_V_data_blk_n;
reg    ipv4ShiftFifo_V_keep_blk_n;
reg    ipv4ShiftFifo_V_last_blk_n;
reg    ipv6ShiftFifo_V_data_blk_n;
reg    ipv6ShiftFifo_V_keep_blk_n;
reg    ipv6ShiftFifo_V_last_blk_n;
reg   [63:0] reg_161;
reg   [7:0] reg_168;
wire   [0:0] grp_fu_157_p1;
reg   [0:0] tmp_last_V_2_reg_237;
wire   [0:0] icmp_ln879_2_fu_189_p2;
reg   [0:0] tmp_last_V_reg_250;
wire   [0:0] icmp_ln879_fu_201_p2;
wire   [0:0] icmp_ln879_1_fu_207_p2;
wire   [0:0] icmp_ln879_3_fu_213_p2;
reg    ap_block_pp0_stage0_subdone;
reg    ap_block_pp0_stage0_01001;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_503;
reg    ap_condition_575;
reg    ap_condition_574;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ARPdataOut_V_data_V_1_state = 2'd0;
#0 ARPdataOut_V_keep_V_1_state = 2'd0;
#0 ARPdataOut_V_last_V_1_state = 2'd0;
#0 ARPdataOut_V_data_V_1_sel_rd = 1'b0;
#0 ARPdataOut_V_data_V_1_sel_wr = 1'b0;
#0 ARPdataOut_V_keep_V_1_sel_rd = 1'b0;
#0 ARPdataOut_V_keep_V_1_sel_wr = 1'b0;
#0 ARPdataOut_V_last_V_1_sel_rd = 1'b0;
#0 ARPdataOut_V_last_V_1_sel_wr = 1'b0;
#0 rep_fsmState_V = 1'd0;
#0 rep_etherType_V = 16'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ARPdataOut_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == ARPdataOut_V_data_V_1_vld_out) & (1'b1 == ARPdataOut_V_data_V_1_ack_out))) begin
            ARPdataOut_V_data_V_1_sel_rd <= ~ARPdataOut_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ARPdataOut_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == ARPdataOut_V_data_V_1_vld_in) & (1'b1 == ARPdataOut_V_data_V_1_ack_in))) begin
            ARPdataOut_V_data_V_1_sel_wr <= ~ARPdataOut_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ARPdataOut_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == ARPdataOut_V_data_V_1_vld_in) & (1'b1 == ARPdataOut_V_data_V_1_ack_out) & (2'd3 == ARPdataOut_V_data_V_1_state)) | ((1'b0 == ARPdataOut_V_data_V_1_vld_in) & (2'd2 == ARPdataOut_V_data_V_1_state)))) begin
            ARPdataOut_V_data_V_1_state <= 2'd2;
        end else if ((((m_axis_arp_TREADY == 1'b0) & (2'd1 == ARPdataOut_V_data_V_1_state)) | ((m_axis_arp_TREADY == 1'b0) & (1'b1 == ARPdataOut_V_data_V_1_vld_in) & (2'd3 == ARPdataOut_V_data_V_1_state)))) begin
            ARPdataOut_V_data_V_1_state <= 2'd1;
        end else if ((((1'b1 == ARPdataOut_V_data_V_1_ack_out) & (2'd1 == ARPdataOut_V_data_V_1_state)) | (~((1'b0 == ARPdataOut_V_data_V_1_vld_in) & (1'b1 == ARPdataOut_V_data_V_1_ack_out)) & ~((m_axis_arp_TREADY == 1'b0) & (1'b1 == ARPdataOut_V_data_V_1_vld_in)) & (2'd3 == ARPdataOut_V_data_V_1_state)) | ((1'b1 == ARPdataOut_V_data_V_1_vld_in) & (2'd2 == ARPdataOut_V_data_V_1_state)))) begin
            ARPdataOut_V_data_V_1_state <= 2'd3;
        end else begin
            ARPdataOut_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ARPdataOut_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == ARPdataOut_V_keep_V_1_vld_out) & (1'b1 == ARPdataOut_V_keep_V_1_ack_out))) begin
            ARPdataOut_V_keep_V_1_sel_rd <= ~ARPdataOut_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ARPdataOut_V_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == ARPdataOut_V_keep_V_1_ack_in) & (1'b1 == ARPdataOut_V_keep_V_1_vld_in))) begin
            ARPdataOut_V_keep_V_1_sel_wr <= ~ARPdataOut_V_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ARPdataOut_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == ARPdataOut_V_keep_V_1_vld_in) & (1'b1 == ARPdataOut_V_keep_V_1_ack_out) & (2'd3 == ARPdataOut_V_keep_V_1_state)) | ((1'b0 == ARPdataOut_V_keep_V_1_vld_in) & (2'd2 == ARPdataOut_V_keep_V_1_state)))) begin
            ARPdataOut_V_keep_V_1_state <= 2'd2;
        end else if ((((m_axis_arp_TREADY == 1'b0) & (2'd1 == ARPdataOut_V_keep_V_1_state)) | ((m_axis_arp_TREADY == 1'b0) & (1'b1 == ARPdataOut_V_keep_V_1_vld_in) & (2'd3 == ARPdataOut_V_keep_V_1_state)))) begin
            ARPdataOut_V_keep_V_1_state <= 2'd1;
        end else if ((((1'b1 == ARPdataOut_V_keep_V_1_ack_out) & (2'd1 == ARPdataOut_V_keep_V_1_state)) | (~((1'b0 == ARPdataOut_V_keep_V_1_vld_in) & (1'b1 == ARPdataOut_V_keep_V_1_ack_out)) & ~((m_axis_arp_TREADY == 1'b0) & (1'b1 == ARPdataOut_V_keep_V_1_vld_in)) & (2'd3 == ARPdataOut_V_keep_V_1_state)) | ((1'b1 == ARPdataOut_V_keep_V_1_vld_in) & (2'd2 == ARPdataOut_V_keep_V_1_state)))) begin
            ARPdataOut_V_keep_V_1_state <= 2'd3;
        end else begin
            ARPdataOut_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ARPdataOut_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == ARPdataOut_V_last_V_1_vld_out) & (1'b1 == ARPdataOut_V_last_V_1_ack_out))) begin
            ARPdataOut_V_last_V_1_sel_rd <= ~ARPdataOut_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ARPdataOut_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == ARPdataOut_V_last_V_1_ack_in) & (1'b1 == ARPdataOut_V_last_V_1_vld_in))) begin
            ARPdataOut_V_last_V_1_sel_wr <= ~ARPdataOut_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ARPdataOut_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == ARPdataOut_V_last_V_1_vld_in) & (1'b1 == ARPdataOut_V_last_V_1_ack_out) & (2'd3 == ARPdataOut_V_last_V_1_state)) | ((1'b0 == ARPdataOut_V_last_V_1_vld_in) & (2'd2 == ARPdataOut_V_last_V_1_state)))) begin
            ARPdataOut_V_last_V_1_state <= 2'd2;
        end else if ((((m_axis_arp_TREADY == 1'b0) & (2'd1 == ARPdataOut_V_last_V_1_state)) | ((m_axis_arp_TREADY == 1'b0) & (1'b1 == ARPdataOut_V_last_V_1_vld_in) & (2'd3 == ARPdataOut_V_last_V_1_state)))) begin
            ARPdataOut_V_last_V_1_state <= 2'd1;
        end else if ((((1'b1 == ARPdataOut_V_last_V_1_ack_out) & (2'd1 == ARPdataOut_V_last_V_1_state)) | (~((1'b0 == ARPdataOut_V_last_V_1_vld_in) & (1'b1 == ARPdataOut_V_last_V_1_ack_out)) & ~((m_axis_arp_TREADY == 1'b0) & (1'b1 == ARPdataOut_V_last_V_1_vld_in)) & (2'd3 == ARPdataOut_V_last_V_1_state)) | ((1'b1 == ARPdataOut_V_last_V_1_vld_in) & (2'd2 == ARPdataOut_V_last_V_1_state)))) begin
            ARPdataOut_V_last_V_1_state <= 2'd3;
        end else begin
            ARPdataOut_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_574)) begin
        if (((grp_fu_157_p1 == 1'd1) & (rep_fsmState_V == 1'd1))) begin
            rep_fsmState_V <= 1'd0;
        end else if ((1'b1 == ap_condition_575)) begin
            rep_fsmState_V <= 1'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ARPdataOut_V_data_V_1_load_A)) begin
        ARPdataOut_V_data_V_1_payload_A <= reg_161;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ARPdataOut_V_data_V_1_load_B)) begin
        ARPdataOut_V_data_V_1_payload_B <= reg_161;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ARPdataOut_V_keep_V_1_load_A)) begin
        ARPdataOut_V_keep_V_1_payload_A <= reg_168;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ARPdataOut_V_keep_V_1_load_B)) begin
        ARPdataOut_V_keep_V_1_payload_B <= reg_168;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ARPdataOut_V_last_V_1_load_A)) begin
        ARPdataOut_V_last_V_1_payload_A <= ARPdataOut_V_last_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ARPdataOut_V_last_V_1_load_B)) begin
        ARPdataOut_V_last_V_1_payload_B <= ARPdataOut_V_last_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_nbreadreq_fu_82_p5 == 1'd1) & (icmp_ln879_fu_201_p2 == 1'd0) & (rep_fsmState_V == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln879_1_reg_261 <= icmp_ln879_1_fu_207_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_nbreadreq_fu_82_p5 == 1'd1) & (tmp_1_nbreadreq_fu_74_p3 == 1'd1) & (rep_fsmState_V == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln879_2_reg_242 <= icmp_ln879_2_fu_189_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln879_2_reg_242_pp0_iter1_reg <= icmp_ln879_2_reg_242;
        icmp_ln879_reg_257_pp0_iter1_reg <= icmp_ln879_reg_257;
        rep_fsmState_V_load_reg_225 <= rep_fsmState_V;
        rep_fsmState_V_load_reg_225_pp0_iter1_reg <= rep_fsmState_V_load_reg_225;
        tmp_1_reg_229_pp0_iter1_reg <= tmp_1_reg_229;
        tmp_2_reg_233_pp0_iter1_reg <= tmp_2_reg_233;
        tmp_reg_246_pp0_iter1_reg <= tmp_reg_246;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_nbreadreq_fu_82_p5 == 1'd1) & (icmp_ln879_1_fu_207_p2 == 1'd0) & (icmp_ln879_fu_201_p2 == 1'd0) & (rep_fsmState_V == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln879_3_reg_265 <= icmp_ln879_3_fu_213_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_nbreadreq_fu_82_p5 == 1'd1) & (rep_fsmState_V == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln879_reg_257 <= icmp_ln879_fu_201_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((grp_nbreadreq_fu_82_p5 == 1'd1) & (rep_fsmState_V == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((grp_nbreadreq_fu_82_p5 == 1'd1) & (tmp_1_nbreadreq_fu_74_p3 == 1'd1) & (rep_fsmState_V == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        reg_161 <= ethDataFifo_V_data_V_dout;
        reg_168 <= ethDataFifo_V_keep_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_nbreadreq_fu_82_p5 == 1'd1) & (tmp_1_nbreadreq_fu_74_p3 == 1'd1) & (rep_fsmState_V == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rep_etherType_V <= etherTypeFifo_V_V_dout;
        tmp_last_V_2_reg_237 <= ethDataFifo_V_last_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((rep_fsmState_V == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_1_reg_229 <= tmp_1_nbreadreq_fu_74_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_nbreadreq_fu_74_p3 == 1'd1) & (rep_fsmState_V == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_2_reg_233 <= grp_nbreadreq_fu_82_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_nbreadreq_fu_82_p5 == 1'd1) & (rep_fsmState_V == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_last_V_reg_250 <= ethDataFifo_V_last_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((rep_fsmState_V == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_reg_246 <= grp_nbreadreq_fu_82_p5;
    end
end

always @ (*) begin
    if ((1'b1 == ARPdataOut_V_data_V_1_sel)) begin
        ARPdataOut_V_data_V_1_data_out = ARPdataOut_V_data_V_1_payload_B;
    end else begin
        ARPdataOut_V_data_V_1_data_out = ARPdataOut_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op37_write_state2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op32_write_state2 == 1'b1)))) begin
        ARPdataOut_V_data_V_1_vld_in = 1'b1;
    end else begin
        ARPdataOut_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ARPdataOut_V_keep_V_1_sel)) begin
        ARPdataOut_V_keep_V_1_data_out = ARPdataOut_V_keep_V_1_payload_B;
    end else begin
        ARPdataOut_V_keep_V_1_data_out = ARPdataOut_V_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op37_write_state2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op32_write_state2 == 1'b1)))) begin
        ARPdataOut_V_keep_V_1_vld_in = 1'b1;
    end else begin
        ARPdataOut_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_503)) begin
        if ((ap_predicate_op37_write_state2 == 1'b1)) begin
            ARPdataOut_V_last_V_1_data_in = tmp_last_V_reg_250;
        end else if ((ap_predicate_op32_write_state2 == 1'b1)) begin
            ARPdataOut_V_last_V_1_data_in = tmp_last_V_2_reg_237;
        end else begin
            ARPdataOut_V_last_V_1_data_in = 'bx;
        end
    end else begin
        ARPdataOut_V_last_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ARPdataOut_V_last_V_1_sel)) begin
        ARPdataOut_V_last_V_1_data_out = ARPdataOut_V_last_V_1_payload_B;
    end else begin
        ARPdataOut_V_last_V_1_data_out = ARPdataOut_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op37_write_state2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op32_write_state2 == 1'b1)))) begin
        ARPdataOut_V_last_V_1_vld_in = 1'b1;
    end else begin
        ARPdataOut_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op20_read_state1 == 1'b1)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op12_read_state1 == 1'b1)))) begin
        ethDataFifo_V_data_V_blk_n = ethDataFifo_V_data_V_empty_n;
    end else begin
        ethDataFifo_V_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op20_read_state1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op12_read_state1 == 1'b1)))) begin
        ethDataFifo_V_data_V_read = 1'b1;
    end else begin
        ethDataFifo_V_data_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op20_read_state1 == 1'b1)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op12_read_state1 == 1'b1)))) begin
        ethDataFifo_V_keep_V_blk_n = ethDataFifo_V_keep_V_empty_n;
    end else begin
        ethDataFifo_V_keep_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op20_read_state1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op12_read_state1 == 1'b1)))) begin
        ethDataFifo_V_keep_V_read = 1'b1;
    end else begin
        ethDataFifo_V_keep_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op20_read_state1 == 1'b1)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op12_read_state1 == 1'b1)))) begin
        ethDataFifo_V_last_V_blk_n = ethDataFifo_V_last_V_empty_n;
    end else begin
        ethDataFifo_V_last_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op20_read_state1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op12_read_state1 == 1'b1)))) begin
        ethDataFifo_V_last_V_read = 1'b1;
    end else begin
        ethDataFifo_V_last_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op10_read_state1 == 1'b1))) begin
        etherTypeFifo_V_V_blk_n = etherTypeFifo_V_V_empty_n;
    end else begin
        etherTypeFifo_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op10_read_state1 == 1'b1))) begin
        etherTypeFifo_V_V_read = 1'b1;
    end else begin
        etherTypeFifo_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op36_write_state2 == 1'b1))) begin
        ipv4ShiftFifo_V_data_blk_n = ipv4ShiftFifo_V_data_full_n;
    end else begin
        ipv4ShiftFifo_V_data_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op36_write_state2 == 1'b1))) begin
        ipv4ShiftFifo_V_data_write = 1'b1;
    end else begin
        ipv4ShiftFifo_V_data_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op36_write_state2 == 1'b1))) begin
        ipv4ShiftFifo_V_keep_blk_n = ipv4ShiftFifo_V_keep_full_n;
    end else begin
        ipv4ShiftFifo_V_keep_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op36_write_state2 == 1'b1))) begin
        ipv4ShiftFifo_V_keep_write = 1'b1;
    end else begin
        ipv4ShiftFifo_V_keep_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op36_write_state2 == 1'b1))) begin
        ipv4ShiftFifo_V_last_blk_n = ipv4ShiftFifo_V_last_full_n;
    end else begin
        ipv4ShiftFifo_V_last_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op36_write_state2 == 1'b1))) begin
        ipv4ShiftFifo_V_last_write = 1'b1;
    end else begin
        ipv4ShiftFifo_V_last_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op35_write_state2 == 1'b1))) begin
        ipv6ShiftFifo_V_data_blk_n = ipv6ShiftFifo_V_data_full_n;
    end else begin
        ipv6ShiftFifo_V_data_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op35_write_state2 == 1'b1))) begin
        ipv6ShiftFifo_V_data_write = 1'b1;
    end else begin
        ipv6ShiftFifo_V_data_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op35_write_state2 == 1'b1))) begin
        ipv6ShiftFifo_V_keep_blk_n = ipv6ShiftFifo_V_keep_full_n;
    end else begin
        ipv6ShiftFifo_V_keep_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op35_write_state2 == 1'b1))) begin
        ipv6ShiftFifo_V_keep_write = 1'b1;
    end else begin
        ipv6ShiftFifo_V_keep_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op35_write_state2 == 1'b1))) begin
        ipv6ShiftFifo_V_last_blk_n = ipv6ShiftFifo_V_last_full_n;
    end else begin
        ipv6ShiftFifo_V_last_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op35_write_state2 == 1'b1))) begin
        ipv6ShiftFifo_V_last_write = 1'b1;
    end else begin
        ipv6ShiftFifo_V_last_write = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op60_write_state3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op51_write_state3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op37_write_state2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op32_write_state2 == 1'b1)))) begin
        m_axis_arp_TDATA_blk_n = ARPdataOut_V_data_V_1_state[1'd1];
    end else begin
        m_axis_arp_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ARPdataOut_V_data_V_1_ack_in = ARPdataOut_V_data_V_1_state[1'd1];

assign ARPdataOut_V_data_V_1_ack_out = m_axis_arp_TREADY;

assign ARPdataOut_V_data_V_1_load_A = (~ARPdataOut_V_data_V_1_sel_wr & ARPdataOut_V_data_V_1_state_cmp_full);

assign ARPdataOut_V_data_V_1_load_B = (ARPdataOut_V_data_V_1_state_cmp_full & ARPdataOut_V_data_V_1_sel_wr);

assign ARPdataOut_V_data_V_1_sel = ARPdataOut_V_data_V_1_sel_rd;

assign ARPdataOut_V_data_V_1_state_cmp_full = ((ARPdataOut_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign ARPdataOut_V_data_V_1_vld_out = ARPdataOut_V_data_V_1_state[1'd0];

assign ARPdataOut_V_keep_V_1_ack_in = ARPdataOut_V_keep_V_1_state[1'd1];

assign ARPdataOut_V_keep_V_1_ack_out = m_axis_arp_TREADY;

assign ARPdataOut_V_keep_V_1_load_A = (~ARPdataOut_V_keep_V_1_sel_wr & ARPdataOut_V_keep_V_1_state_cmp_full);

assign ARPdataOut_V_keep_V_1_load_B = (ARPdataOut_V_keep_V_1_state_cmp_full & ARPdataOut_V_keep_V_1_sel_wr);

assign ARPdataOut_V_keep_V_1_sel = ARPdataOut_V_keep_V_1_sel_rd;

assign ARPdataOut_V_keep_V_1_state_cmp_full = ((ARPdataOut_V_keep_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign ARPdataOut_V_keep_V_1_vld_out = ARPdataOut_V_keep_V_1_state[1'd0];

assign ARPdataOut_V_last_V_1_ack_in = ARPdataOut_V_last_V_1_state[1'd1];

assign ARPdataOut_V_last_V_1_ack_out = m_axis_arp_TREADY;

assign ARPdataOut_V_last_V_1_load_A = (~ARPdataOut_V_last_V_1_sel_wr & ARPdataOut_V_last_V_1_state_cmp_full);

assign ARPdataOut_V_last_V_1_load_B = (ARPdataOut_V_last_V_1_state_cmp_full & ARPdataOut_V_last_V_1_sel_wr);

assign ARPdataOut_V_last_V_1_sel = ARPdataOut_V_last_V_1_sel_rd;

assign ARPdataOut_V_last_V_1_state_cmp_full = ((ARPdataOut_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign ARPdataOut_V_last_V_1_vld_out = ARPdataOut_V_last_V_1_state[1'd0];

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((io_acc_block_signal_op20 == 1'b0) & (ap_predicate_op20_read_state1 == 1'b1)) | ((io_acc_block_signal_op12 == 1'b0) & (ap_predicate_op12_read_state1 == 1'b1)) | ((etherTypeFifo_V_V_empty_n == 1'b0) & (ap_predicate_op10_read_state1 == 1'b1)))) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((2'd1 == ARPdataOut_V_last_V_1_state) | (2'd1 == ARPdataOut_V_keep_V_1_state) | (2'd1 == ARPdataOut_V_data_V_1_state) | ((m_axis_arp_TREADY == 1'b0) & (2'd3 == ARPdataOut_V_last_V_1_state)) | ((m_axis_arp_TREADY == 1'b0) & (2'd3 == ARPdataOut_V_keep_V_1_state)) | ((m_axis_arp_TREADY == 1'b0) & (2'd3 == ARPdataOut_V_data_V_1_state)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((io_acc_block_signal_op36 == 1'b0) & (ap_predicate_op36_write_state2 == 1'b1)) | ((io_acc_block_signal_op35 == 1'b0) & (ap_predicate_op35_write_state2 == 1'b1)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((io_acc_block_signal_op20 == 1'b0) & (ap_predicate_op20_read_state1 == 1'b1)) | ((io_acc_block_signal_op12 == 1'b0) & (ap_predicate_op12_read_state1 == 1'b1)) | ((etherTypeFifo_V_V_empty_n == 1'b0) & (ap_predicate_op10_read_state1 == 1'b1)))) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((1'b1 == ap_block_state3_io) | (2'd1 == ARPdataOut_V_last_V_1_state) | (2'd1 == ARPdataOut_V_keep_V_1_state) | (2'd1 == ARPdataOut_V_data_V_1_state) | ((m_axis_arp_TREADY == 1'b0) & (2'd3 == ARPdataOut_V_last_V_1_state)) | ((m_axis_arp_TREADY == 1'b0) & (2'd3 == ARPdataOut_V_keep_V_1_state)) | ((m_axis_arp_TREADY == 1'b0) & (2'd3 == ARPdataOut_V_data_V_1_state)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state2_io) | ((io_acc_block_signal_op36 == 1'b0) & (ap_predicate_op36_write_state2 == 1'b1)) | ((io_acc_block_signal_op35 == 1'b0) & (ap_predicate_op35_write_state2 == 1'b1)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((io_acc_block_signal_op20 == 1'b0) & (ap_predicate_op20_read_state1 == 1'b1)) | ((io_acc_block_signal_op12 == 1'b0) & (ap_predicate_op12_read_state1 == 1'b1)) | ((etherTypeFifo_V_V_empty_n == 1'b0) & (ap_predicate_op10_read_state1 == 1'b1)))) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((1'b1 == ap_block_state3_io) | (2'd1 == ARPdataOut_V_last_V_1_state) | (2'd1 == ARPdataOut_V_keep_V_1_state) | (2'd1 == ARPdataOut_V_data_V_1_state) | ((m_axis_arp_TREADY == 1'b0) & (2'd3 == ARPdataOut_V_last_V_1_state)) | ((m_axis_arp_TREADY == 1'b0) & (2'd3 == ARPdataOut_V_keep_V_1_state)) | ((m_axis_arp_TREADY == 1'b0) & (2'd3 == ARPdataOut_V_data_V_1_state)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state2_io) | ((io_acc_block_signal_op36 == 1'b0) & (ap_predicate_op36_write_state2 == 1'b1)) | ((io_acc_block_signal_op35 == 1'b0) & (ap_predicate_op35_write_state2 == 1'b1)))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((io_acc_block_signal_op20 == 1'b0) & (ap_predicate_op20_read_state1 == 1'b1)) | ((io_acc_block_signal_op12 == 1'b0) & (ap_predicate_op12_read_state1 == 1'b1)) | ((etherTypeFifo_V_V_empty_n == 1'b0) & (ap_predicate_op10_read_state1 == 1'b1)));
end

always @ (*) begin
    ap_block_state2_io = (((1'b0 == ARPdataOut_V_data_V_1_ack_in) & (ap_predicate_op37_write_state2 == 1'b1)) | ((1'b0 == ARPdataOut_V_data_V_1_ack_in) & (ap_predicate_op32_write_state2 == 1'b1)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (((io_acc_block_signal_op36 == 1'b0) & (ap_predicate_op36_write_state2 == 1'b1)) | ((io_acc_block_signal_op35 == 1'b0) & (ap_predicate_op35_write_state2 == 1'b1)));
end

always @ (*) begin
    ap_block_state3_io = (((1'b0 == ARPdataOut_V_data_V_1_ack_in) & (ap_predicate_op60_write_state3 == 1'b1)) | ((1'b0 == ARPdataOut_V_data_V_1_ack_in) & (ap_predicate_op51_write_state3 == 1'b1)));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((2'd1 == ARPdataOut_V_last_V_1_state) | (2'd1 == ARPdataOut_V_keep_V_1_state) | (2'd1 == ARPdataOut_V_data_V_1_state) | ((m_axis_arp_TREADY == 1'b0) & (2'd3 == ARPdataOut_V_last_V_1_state)) | ((m_axis_arp_TREADY == 1'b0) & (2'd3 == ARPdataOut_V_keep_V_1_state)) | ((m_axis_arp_TREADY == 1'b0) & (2'd3 == ARPdataOut_V_data_V_1_state)));
end

always @ (*) begin
    ap_condition_503 = ((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_574 = ((grp_nbreadreq_fu_82_p5 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_575 = ((tmp_1_nbreadreq_fu_74_p3 == 1'd1) & (grp_fu_157_p1 == 1'd0) & (rep_fsmState_V == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

always @ (*) begin
    ap_predicate_op10_read_state1 = ((grp_nbreadreq_fu_82_p5 == 1'd1) & (tmp_1_nbreadreq_fu_74_p3 == 1'd1) & (rep_fsmState_V == 1'd0));
end

always @ (*) begin
    ap_predicate_op12_read_state1 = ((grp_nbreadreq_fu_82_p5 == 1'd1) & (tmp_1_nbreadreq_fu_74_p3 == 1'd1) & (rep_fsmState_V == 1'd0));
end

always @ (*) begin
    ap_predicate_op20_read_state1 = ((grp_nbreadreq_fu_82_p5 == 1'd1) & (rep_fsmState_V == 1'd1));
end

always @ (*) begin
    ap_predicate_op32_write_state2 = ((icmp_ln879_2_reg_242 == 1'd1) & (tmp_2_reg_233 == 1'd1) & (tmp_1_reg_229 == 1'd1) & (rep_fsmState_V_load_reg_225 == 1'd0));
end

always @ (*) begin
    ap_predicate_op35_write_state2 = ((icmp_ln879_3_reg_265 == 1'd1) & (tmp_reg_246 == 1'd1) & (rep_fsmState_V_load_reg_225 == 1'd1) & (icmp_ln879_1_reg_261 == 1'd0) & (icmp_ln879_reg_257 == 1'd0));
end

always @ (*) begin
    ap_predicate_op36_write_state2 = ((icmp_ln879_1_reg_261 == 1'd1) & (tmp_reg_246 == 1'd1) & (rep_fsmState_V_load_reg_225 == 1'd1) & (icmp_ln879_reg_257 == 1'd0));
end

always @ (*) begin
    ap_predicate_op37_write_state2 = ((icmp_ln879_reg_257 == 1'd1) & (tmp_reg_246 == 1'd1) & (rep_fsmState_V_load_reg_225 == 1'd1));
end

always @ (*) begin
    ap_predicate_op51_write_state3 = ((icmp_ln879_2_reg_242_pp0_iter1_reg == 1'd1) & (tmp_2_reg_233_pp0_iter1_reg == 1'd1) & (tmp_1_reg_229_pp0_iter1_reg == 1'd1) & (rep_fsmState_V_load_reg_225_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op60_write_state3 = ((icmp_ln879_reg_257_pp0_iter1_reg == 1'd1) & (tmp_reg_246_pp0_iter1_reg == 1'd1) & (rep_fsmState_V_load_reg_225_pp0_iter1_reg == 1'd1));
end

assign grp_fu_157_p1 = ethDataFifo_V_last_V_dout;

assign grp_nbreadreq_fu_82_p5 = (ethDataFifo_V_last_V_empty_n & ethDataFifo_V_keep_V_empty_n & ethDataFifo_V_data_V_empty_n);

assign icmp_ln879_1_fu_207_p2 = ((rep_etherType_V == 16'd2048) ? 1'b1 : 1'b0);

assign icmp_ln879_2_fu_189_p2 = ((etherTypeFifo_V_V_dout == 16'd2054) ? 1'b1 : 1'b0);

assign icmp_ln879_3_fu_213_p2 = ((rep_etherType_V == 16'd34525) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_201_p2 = ((rep_etherType_V == 16'd2054) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op12 = (ethDataFifo_V_last_V_empty_n & ethDataFifo_V_keep_V_empty_n & ethDataFifo_V_data_V_empty_n);

assign io_acc_block_signal_op20 = (ethDataFifo_V_last_V_empty_n & ethDataFifo_V_keep_V_empty_n & ethDataFifo_V_data_V_empty_n);

assign io_acc_block_signal_op35 = (ipv6ShiftFifo_V_last_full_n & ipv6ShiftFifo_V_keep_full_n & ipv6ShiftFifo_V_data_full_n);

assign io_acc_block_signal_op36 = (ipv4ShiftFifo_V_last_full_n & ipv4ShiftFifo_V_keep_full_n & ipv4ShiftFifo_V_data_full_n);

assign ipv4ShiftFifo_V_data_din = reg_161;

assign ipv4ShiftFifo_V_keep_din = reg_168;

assign ipv4ShiftFifo_V_last_din = tmp_last_V_reg_250;

assign ipv6ShiftFifo_V_data_din = reg_161;

assign ipv6ShiftFifo_V_keep_din = reg_168;

assign ipv6ShiftFifo_V_last_din = tmp_last_V_reg_250;

assign m_axis_arp_TDATA = ARPdataOut_V_data_V_1_data_out;

assign m_axis_arp_TKEEP = ARPdataOut_V_keep_V_1_data_out;

assign m_axis_arp_TLAST = ARPdataOut_V_last_V_1_data_out;

assign m_axis_arp_TVALID = ARPdataOut_V_last_V_1_state[1'd0];

assign tmp_1_nbreadreq_fu_74_p3 = etherTypeFifo_V_V_empty_n;

endmodule //route_by_eth_protoco
