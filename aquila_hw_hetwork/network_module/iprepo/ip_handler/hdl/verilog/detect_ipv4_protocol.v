// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module detect_ipv4_protocol (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        ipv4ProtocolFifo_V_V_dout,
        ipv4ProtocolFifo_V_V_empty_n,
        ipv4ProtocolFifo_V_V_read,
        ipv4ValidFifo_V_dout,
        ipv4ValidFifo_V_empty_n,
        ipv4ValidFifo_V_read,
        ipDataCutFifo_V_dout,
        ipDataCutFifo_V_empty_n,
        ipDataCutFifo_V_read,
        udpDataFifo_V_din,
        udpDataFifo_V_full_n,
        udpDataFifo_V_write,
        m_axis_tcp_TREADY,
        m_axis_icmp_TREADY,
        m_axis_icmp_TDATA,
        m_axis_icmp_TVALID,
        m_axis_icmp_TKEEP,
        m_axis_icmp_TLAST,
        m_axis_tcp_TDATA,
        m_axis_tcp_TVALID,
        m_axis_tcp_TKEEP,
        m_axis_tcp_TLAST
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] ipv4ProtocolFifo_V_V_dout;
input   ipv4ProtocolFifo_V_V_empty_n;
output   ipv4ProtocolFifo_V_V_read;
input  [0:0] ipv4ValidFifo_V_dout;
input   ipv4ValidFifo_V_empty_n;
output   ipv4ValidFifo_V_read;
input  [72:0] ipDataCutFifo_V_dout;
input   ipDataCutFifo_V_empty_n;
output   ipDataCutFifo_V_read;
output  [72:0] udpDataFifo_V_din;
input   udpDataFifo_V_full_n;
output   udpDataFifo_V_write;
input   m_axis_tcp_TREADY;
input   m_axis_icmp_TREADY;
output  [63:0] m_axis_icmp_TDATA;
output   m_axis_icmp_TVALID;
output  [7:0] m_axis_icmp_TKEEP;
output  [0:0] m_axis_icmp_TLAST;
output  [63:0] m_axis_tcp_TDATA;
output   m_axis_tcp_TVALID;
output  [7:0] m_axis_tcp_TKEEP;
output  [0:0] m_axis_tcp_TLAST;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg ipv4ProtocolFifo_V_V_read;
reg ipv4ValidFifo_V_read;
reg ipDataCutFifo_V_read;
reg udpDataFifo_V_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire   [0:0] tmp_18_nbreadreq_fu_82_p3;
wire   [0:0] tmp_20_nbreadreq_fu_90_p3;
reg    ap_predicate_op10_read_state1;
reg    ap_predicate_op12_read_state1;
wire   [0:0] tmp_nbreadreq_fu_110_p3;
reg    ap_predicate_op17_read_state1;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] dip_state_load_reg_205;
reg   [0:0] tmp_reg_221;
reg   [7:0] dip_ipProtocol_V_loa_reg_248;
reg    ap_predicate_op25_write_state2;
reg    ap_block_state2_pp0_stage0_iter1;
wire    TCPdataOut_V_data_V_1_ack_in;
reg    ap_predicate_op24_write_state2;
wire    ICMPdataOut_V_data_V_1_ack_in;
reg    ap_predicate_op26_write_state2;
reg    ap_block_state2_io;
wire    ICMPdataOut_V_data_V_1_ack_out;
reg   [1:0] ICMPdataOut_V_data_V_1_state;
wire    ICMPdataOut_V_keep_V_1_ack_out;
reg   [1:0] ICMPdataOut_V_keep_V_1_state;
wire    ICMPdataOut_V_last_V_1_ack_out;
reg   [1:0] ICMPdataOut_V_last_V_1_state;
wire    TCPdataOut_V_data_V_1_ack_out;
reg   [1:0] TCPdataOut_V_data_V_1_state;
wire    TCPdataOut_V_keep_V_1_ack_out;
reg   [1:0] TCPdataOut_V_keep_V_1_state;
wire    TCPdataOut_V_last_V_1_ack_out;
reg   [1:0] TCPdataOut_V_last_V_1_state;
reg    ap_block_state3_pp0_stage0_iter2;
reg   [0:0] dip_state_load_reg_205_pp0_iter1_reg;
reg   [0:0] tmp_reg_221_pp0_iter1_reg;
reg   [7:0] dip_ipProtocol_V_loa_reg_248_pp0_iter1_reg;
reg    ap_predicate_op38_write_state3;
reg    ap_predicate_op41_write_state3;
reg    ap_block_state3_io;
reg    ap_block_pp0_stage0_11001;
reg   [63:0] ICMPdataOut_V_data_V_1_data_out;
reg    ICMPdataOut_V_data_V_1_vld_in;
wire    ICMPdataOut_V_data_V_1_vld_out;
reg   [63:0] ICMPdataOut_V_data_V_1_payload_A;
reg   [63:0] ICMPdataOut_V_data_V_1_payload_B;
reg    ICMPdataOut_V_data_V_1_sel_rd;
reg    ICMPdataOut_V_data_V_1_sel_wr;
wire    ICMPdataOut_V_data_V_1_sel;
wire    ICMPdataOut_V_data_V_1_load_A;
wire    ICMPdataOut_V_data_V_1_load_B;
wire    ICMPdataOut_V_data_V_1_state_cmp_full;
reg   [7:0] ICMPdataOut_V_keep_V_1_data_out;
reg    ICMPdataOut_V_keep_V_1_vld_in;
wire    ICMPdataOut_V_keep_V_1_vld_out;
wire    ICMPdataOut_V_keep_V_1_ack_in;
reg   [7:0] ICMPdataOut_V_keep_V_1_payload_A;
reg   [7:0] ICMPdataOut_V_keep_V_1_payload_B;
reg    ICMPdataOut_V_keep_V_1_sel_rd;
reg    ICMPdataOut_V_keep_V_1_sel_wr;
wire    ICMPdataOut_V_keep_V_1_sel;
wire    ICMPdataOut_V_keep_V_1_load_A;
wire    ICMPdataOut_V_keep_V_1_load_B;
wire    ICMPdataOut_V_keep_V_1_state_cmp_full;
reg   [0:0] ICMPdataOut_V_last_V_1_data_out;
reg    ICMPdataOut_V_last_V_1_vld_in;
wire    ICMPdataOut_V_last_V_1_vld_out;
wire    ICMPdataOut_V_last_V_1_ack_in;
reg   [0:0] ICMPdataOut_V_last_V_1_payload_A;
reg   [0:0] ICMPdataOut_V_last_V_1_payload_B;
reg    ICMPdataOut_V_last_V_1_sel_rd;
reg    ICMPdataOut_V_last_V_1_sel_wr;
wire    ICMPdataOut_V_last_V_1_sel;
wire    ICMPdataOut_V_last_V_1_load_A;
wire    ICMPdataOut_V_last_V_1_load_B;
wire    ICMPdataOut_V_last_V_1_state_cmp_full;
reg   [63:0] TCPdataOut_V_data_V_1_data_out;
reg    TCPdataOut_V_data_V_1_vld_in;
wire    TCPdataOut_V_data_V_1_vld_out;
reg   [63:0] TCPdataOut_V_data_V_1_payload_A;
reg   [63:0] TCPdataOut_V_data_V_1_payload_B;
reg    TCPdataOut_V_data_V_1_sel_rd;
reg    TCPdataOut_V_data_V_1_sel_wr;
wire    TCPdataOut_V_data_V_1_sel;
wire    TCPdataOut_V_data_V_1_load_A;
wire    TCPdataOut_V_data_V_1_load_B;
wire    TCPdataOut_V_data_V_1_state_cmp_full;
reg   [7:0] TCPdataOut_V_keep_V_1_data_out;
reg    TCPdataOut_V_keep_V_1_vld_in;
wire    TCPdataOut_V_keep_V_1_vld_out;
wire    TCPdataOut_V_keep_V_1_ack_in;
reg   [7:0] TCPdataOut_V_keep_V_1_payload_A;
reg   [7:0] TCPdataOut_V_keep_V_1_payload_B;
reg    TCPdataOut_V_keep_V_1_sel_rd;
reg    TCPdataOut_V_keep_V_1_sel_wr;
wire    TCPdataOut_V_keep_V_1_sel;
wire    TCPdataOut_V_keep_V_1_load_A;
wire    TCPdataOut_V_keep_V_1_load_B;
wire    TCPdataOut_V_keep_V_1_state_cmp_full;
reg   [0:0] TCPdataOut_V_last_V_1_data_out;
reg    TCPdataOut_V_last_V_1_vld_in;
wire    TCPdataOut_V_last_V_1_vld_out;
wire    TCPdataOut_V_last_V_1_ack_in;
reg   [0:0] TCPdataOut_V_last_V_1_payload_A;
reg   [0:0] TCPdataOut_V_last_V_1_payload_B;
reg    TCPdataOut_V_last_V_1_sel_rd;
reg    TCPdataOut_V_last_V_1_sel_wr;
wire    TCPdataOut_V_last_V_1_sel;
wire    TCPdataOut_V_last_V_1_load_A;
wire    TCPdataOut_V_last_V_1_load_B;
wire    TCPdataOut_V_last_V_1_state_cmp_full;
reg   [0:0] dip_state;
reg   [7:0] dip_ipProtocol_V;
reg    m_axis_icmp_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    m_axis_tcp_TDATA_blk_n;
reg    ipv4ProtocolFifo_V_V_blk_n;
reg    ipv4ValidFifo_V_blk_n;
reg    ipDataCutFifo_V_blk_n;
reg    udpDataFifo_V_blk_n;
wire   [0:0] tmp_22_read_fu_104_p2;
reg   [72:0] tmp9_reg_225;
wire   [63:0] tmp_data_V_fu_173_p1;
reg   [63:0] tmp_data_V_reg_230;
reg   [7:0] tmp_keep_V_reg_236;
wire   [0:0] tmp_last_V_fu_187_p3;
reg   [0:0] tmp_last_V_reg_242;
reg    ap_block_pp0_stage0_subdone;
reg    ap_block_pp0_stage0_01001;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_588;
reg    ap_condition_591;
reg    ap_condition_216;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ICMPdataOut_V_data_V_1_state = 2'd0;
#0 ICMPdataOut_V_keep_V_1_state = 2'd0;
#0 ICMPdataOut_V_last_V_1_state = 2'd0;
#0 TCPdataOut_V_data_V_1_state = 2'd0;
#0 TCPdataOut_V_keep_V_1_state = 2'd0;
#0 TCPdataOut_V_last_V_1_state = 2'd0;
#0 ICMPdataOut_V_data_V_1_sel_rd = 1'b0;
#0 ICMPdataOut_V_data_V_1_sel_wr = 1'b0;
#0 ICMPdataOut_V_keep_V_1_sel_rd = 1'b0;
#0 ICMPdataOut_V_keep_V_1_sel_wr = 1'b0;
#0 ICMPdataOut_V_last_V_1_sel_rd = 1'b0;
#0 ICMPdataOut_V_last_V_1_sel_wr = 1'b0;
#0 TCPdataOut_V_data_V_1_sel_rd = 1'b0;
#0 TCPdataOut_V_data_V_1_sel_wr = 1'b0;
#0 TCPdataOut_V_keep_V_1_sel_rd = 1'b0;
#0 TCPdataOut_V_keep_V_1_sel_wr = 1'b0;
#0 TCPdataOut_V_last_V_1_sel_rd = 1'b0;
#0 TCPdataOut_V_last_V_1_sel_wr = 1'b0;
#0 dip_state = 1'd0;
#0 dip_ipProtocol_V = 8'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ICMPdataOut_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == ICMPdataOut_V_data_V_1_vld_out) & (1'b1 == ICMPdataOut_V_data_V_1_ack_out))) begin
            ICMPdataOut_V_data_V_1_sel_rd <= ~ICMPdataOut_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ICMPdataOut_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == ICMPdataOut_V_data_V_1_vld_in) & (1'b1 == ICMPdataOut_V_data_V_1_ack_in))) begin
            ICMPdataOut_V_data_V_1_sel_wr <= ~ICMPdataOut_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ICMPdataOut_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == ICMPdataOut_V_data_V_1_vld_in) & (1'b1 == ICMPdataOut_V_data_V_1_ack_out) & (2'd3 == ICMPdataOut_V_data_V_1_state)) | ((1'b0 == ICMPdataOut_V_data_V_1_vld_in) & (2'd2 == ICMPdataOut_V_data_V_1_state)))) begin
            ICMPdataOut_V_data_V_1_state <= 2'd2;
        end else if ((((m_axis_icmp_TREADY == 1'b0) & (2'd1 == ICMPdataOut_V_data_V_1_state)) | ((m_axis_icmp_TREADY == 1'b0) & (1'b1 == ICMPdataOut_V_data_V_1_vld_in) & (2'd3 == ICMPdataOut_V_data_V_1_state)))) begin
            ICMPdataOut_V_data_V_1_state <= 2'd1;
        end else if ((((1'b1 == ICMPdataOut_V_data_V_1_ack_out) & (2'd1 == ICMPdataOut_V_data_V_1_state)) | (~((1'b0 == ICMPdataOut_V_data_V_1_vld_in) & (1'b1 == ICMPdataOut_V_data_V_1_ack_out)) & ~((m_axis_icmp_TREADY == 1'b0) & (1'b1 == ICMPdataOut_V_data_V_1_vld_in)) & (2'd3 == ICMPdataOut_V_data_V_1_state)) | ((1'b1 == ICMPdataOut_V_data_V_1_vld_in) & (2'd2 == ICMPdataOut_V_data_V_1_state)))) begin
            ICMPdataOut_V_data_V_1_state <= 2'd3;
        end else begin
            ICMPdataOut_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ICMPdataOut_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == ICMPdataOut_V_keep_V_1_vld_out) & (1'b1 == ICMPdataOut_V_keep_V_1_ack_out))) begin
            ICMPdataOut_V_keep_V_1_sel_rd <= ~ICMPdataOut_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ICMPdataOut_V_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == ICMPdataOut_V_keep_V_1_ack_in) & (1'b1 == ICMPdataOut_V_keep_V_1_vld_in))) begin
            ICMPdataOut_V_keep_V_1_sel_wr <= ~ICMPdataOut_V_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ICMPdataOut_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == ICMPdataOut_V_keep_V_1_vld_in) & (1'b1 == ICMPdataOut_V_keep_V_1_ack_out) & (2'd3 == ICMPdataOut_V_keep_V_1_state)) | ((1'b0 == ICMPdataOut_V_keep_V_1_vld_in) & (2'd2 == ICMPdataOut_V_keep_V_1_state)))) begin
            ICMPdataOut_V_keep_V_1_state <= 2'd2;
        end else if ((((m_axis_icmp_TREADY == 1'b0) & (2'd1 == ICMPdataOut_V_keep_V_1_state)) | ((m_axis_icmp_TREADY == 1'b0) & (1'b1 == ICMPdataOut_V_keep_V_1_vld_in) & (2'd3 == ICMPdataOut_V_keep_V_1_state)))) begin
            ICMPdataOut_V_keep_V_1_state <= 2'd1;
        end else if ((((1'b1 == ICMPdataOut_V_keep_V_1_ack_out) & (2'd1 == ICMPdataOut_V_keep_V_1_state)) | (~((1'b0 == ICMPdataOut_V_keep_V_1_vld_in) & (1'b1 == ICMPdataOut_V_keep_V_1_ack_out)) & ~((m_axis_icmp_TREADY == 1'b0) & (1'b1 == ICMPdataOut_V_keep_V_1_vld_in)) & (2'd3 == ICMPdataOut_V_keep_V_1_state)) | ((1'b1 == ICMPdataOut_V_keep_V_1_vld_in) & (2'd2 == ICMPdataOut_V_keep_V_1_state)))) begin
            ICMPdataOut_V_keep_V_1_state <= 2'd3;
        end else begin
            ICMPdataOut_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ICMPdataOut_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == ICMPdataOut_V_last_V_1_vld_out) & (1'b1 == ICMPdataOut_V_last_V_1_ack_out))) begin
            ICMPdataOut_V_last_V_1_sel_rd <= ~ICMPdataOut_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ICMPdataOut_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == ICMPdataOut_V_last_V_1_ack_in) & (1'b1 == ICMPdataOut_V_last_V_1_vld_in))) begin
            ICMPdataOut_V_last_V_1_sel_wr <= ~ICMPdataOut_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ICMPdataOut_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == ICMPdataOut_V_last_V_1_vld_in) & (1'b1 == ICMPdataOut_V_last_V_1_ack_out) & (2'd3 == ICMPdataOut_V_last_V_1_state)) | ((1'b0 == ICMPdataOut_V_last_V_1_vld_in) & (2'd2 == ICMPdataOut_V_last_V_1_state)))) begin
            ICMPdataOut_V_last_V_1_state <= 2'd2;
        end else if ((((m_axis_icmp_TREADY == 1'b0) & (2'd1 == ICMPdataOut_V_last_V_1_state)) | ((m_axis_icmp_TREADY == 1'b0) & (1'b1 == ICMPdataOut_V_last_V_1_vld_in) & (2'd3 == ICMPdataOut_V_last_V_1_state)))) begin
            ICMPdataOut_V_last_V_1_state <= 2'd1;
        end else if ((((1'b1 == ICMPdataOut_V_last_V_1_ack_out) & (2'd1 == ICMPdataOut_V_last_V_1_state)) | (~((1'b0 == ICMPdataOut_V_last_V_1_vld_in) & (1'b1 == ICMPdataOut_V_last_V_1_ack_out)) & ~((m_axis_icmp_TREADY == 1'b0) & (1'b1 == ICMPdataOut_V_last_V_1_vld_in)) & (2'd3 == ICMPdataOut_V_last_V_1_state)) | ((1'b1 == ICMPdataOut_V_last_V_1_vld_in) & (2'd2 == ICMPdataOut_V_last_V_1_state)))) begin
            ICMPdataOut_V_last_V_1_state <= 2'd3;
        end else begin
            ICMPdataOut_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        TCPdataOut_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == TCPdataOut_V_data_V_1_vld_out) & (1'b1 == TCPdataOut_V_data_V_1_ack_out))) begin
            TCPdataOut_V_data_V_1_sel_rd <= ~TCPdataOut_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        TCPdataOut_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == TCPdataOut_V_data_V_1_vld_in) & (1'b1 == TCPdataOut_V_data_V_1_ack_in))) begin
            TCPdataOut_V_data_V_1_sel_wr <= ~TCPdataOut_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        TCPdataOut_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == TCPdataOut_V_data_V_1_vld_in) & (1'b1 == TCPdataOut_V_data_V_1_ack_out) & (2'd3 == TCPdataOut_V_data_V_1_state)) | ((1'b0 == TCPdataOut_V_data_V_1_vld_in) & (2'd2 == TCPdataOut_V_data_V_1_state)))) begin
            TCPdataOut_V_data_V_1_state <= 2'd2;
        end else if ((((m_axis_tcp_TREADY == 1'b0) & (2'd1 == TCPdataOut_V_data_V_1_state)) | ((m_axis_tcp_TREADY == 1'b0) & (1'b1 == TCPdataOut_V_data_V_1_vld_in) & (2'd3 == TCPdataOut_V_data_V_1_state)))) begin
            TCPdataOut_V_data_V_1_state <= 2'd1;
        end else if ((((1'b1 == TCPdataOut_V_data_V_1_ack_out) & (2'd1 == TCPdataOut_V_data_V_1_state)) | (~((1'b0 == TCPdataOut_V_data_V_1_vld_in) & (1'b1 == TCPdataOut_V_data_V_1_ack_out)) & ~((m_axis_tcp_TREADY == 1'b0) & (1'b1 == TCPdataOut_V_data_V_1_vld_in)) & (2'd3 == TCPdataOut_V_data_V_1_state)) | ((1'b1 == TCPdataOut_V_data_V_1_vld_in) & (2'd2 == TCPdataOut_V_data_V_1_state)))) begin
            TCPdataOut_V_data_V_1_state <= 2'd3;
        end else begin
            TCPdataOut_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        TCPdataOut_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == TCPdataOut_V_keep_V_1_vld_out) & (1'b1 == TCPdataOut_V_keep_V_1_ack_out))) begin
            TCPdataOut_V_keep_V_1_sel_rd <= ~TCPdataOut_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        TCPdataOut_V_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == TCPdataOut_V_keep_V_1_ack_in) & (1'b1 == TCPdataOut_V_keep_V_1_vld_in))) begin
            TCPdataOut_V_keep_V_1_sel_wr <= ~TCPdataOut_V_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        TCPdataOut_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == TCPdataOut_V_keep_V_1_vld_in) & (1'b1 == TCPdataOut_V_keep_V_1_ack_out) & (2'd3 == TCPdataOut_V_keep_V_1_state)) | ((1'b0 == TCPdataOut_V_keep_V_1_vld_in) & (2'd2 == TCPdataOut_V_keep_V_1_state)))) begin
            TCPdataOut_V_keep_V_1_state <= 2'd2;
        end else if ((((m_axis_tcp_TREADY == 1'b0) & (2'd1 == TCPdataOut_V_keep_V_1_state)) | ((m_axis_tcp_TREADY == 1'b0) & (1'b1 == TCPdataOut_V_keep_V_1_vld_in) & (2'd3 == TCPdataOut_V_keep_V_1_state)))) begin
            TCPdataOut_V_keep_V_1_state <= 2'd1;
        end else if ((((1'b1 == TCPdataOut_V_keep_V_1_ack_out) & (2'd1 == TCPdataOut_V_keep_V_1_state)) | (~((1'b0 == TCPdataOut_V_keep_V_1_vld_in) & (1'b1 == TCPdataOut_V_keep_V_1_ack_out)) & ~((m_axis_tcp_TREADY == 1'b0) & (1'b1 == TCPdataOut_V_keep_V_1_vld_in)) & (2'd3 == TCPdataOut_V_keep_V_1_state)) | ((1'b1 == TCPdataOut_V_keep_V_1_vld_in) & (2'd2 == TCPdataOut_V_keep_V_1_state)))) begin
            TCPdataOut_V_keep_V_1_state <= 2'd3;
        end else begin
            TCPdataOut_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        TCPdataOut_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == TCPdataOut_V_last_V_1_vld_out) & (1'b1 == TCPdataOut_V_last_V_1_ack_out))) begin
            TCPdataOut_V_last_V_1_sel_rd <= ~TCPdataOut_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        TCPdataOut_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == TCPdataOut_V_last_V_1_ack_in) & (1'b1 == TCPdataOut_V_last_V_1_vld_in))) begin
            TCPdataOut_V_last_V_1_sel_wr <= ~TCPdataOut_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        TCPdataOut_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == TCPdataOut_V_last_V_1_vld_in) & (1'b1 == TCPdataOut_V_last_V_1_ack_out) & (2'd3 == TCPdataOut_V_last_V_1_state)) | ((1'b0 == TCPdataOut_V_last_V_1_vld_in) & (2'd2 == TCPdataOut_V_last_V_1_state)))) begin
            TCPdataOut_V_last_V_1_state <= 2'd2;
        end else if ((((m_axis_tcp_TREADY == 1'b0) & (2'd1 == TCPdataOut_V_last_V_1_state)) | ((m_axis_tcp_TREADY == 1'b0) & (1'b1 == TCPdataOut_V_last_V_1_vld_in) & (2'd3 == TCPdataOut_V_last_V_1_state)))) begin
            TCPdataOut_V_last_V_1_state <= 2'd1;
        end else if ((((1'b1 == TCPdataOut_V_last_V_1_ack_out) & (2'd1 == TCPdataOut_V_last_V_1_state)) | (~((1'b0 == TCPdataOut_V_last_V_1_vld_in) & (1'b1 == TCPdataOut_V_last_V_1_ack_out)) & ~((m_axis_tcp_TREADY == 1'b0) & (1'b1 == TCPdataOut_V_last_V_1_vld_in)) & (2'd3 == TCPdataOut_V_last_V_1_state)) | ((1'b1 == TCPdataOut_V_last_V_1_vld_in) & (2'd2 == TCPdataOut_V_last_V_1_state)))) begin
            TCPdataOut_V_last_V_1_state <= 2'd3;
        end else begin
            TCPdataOut_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_216)) begin
        if ((1'b1 == ap_condition_591)) begin
            dip_state <= 1'd0;
        end else if ((1'b1 == ap_condition_588)) begin
            dip_state <= 1'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ICMPdataOut_V_data_V_1_load_A)) begin
        ICMPdataOut_V_data_V_1_payload_A <= tmp_data_V_reg_230;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ICMPdataOut_V_data_V_1_load_B)) begin
        ICMPdataOut_V_data_V_1_payload_B <= tmp_data_V_reg_230;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ICMPdataOut_V_keep_V_1_load_A)) begin
        ICMPdataOut_V_keep_V_1_payload_A <= tmp_keep_V_reg_236;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ICMPdataOut_V_keep_V_1_load_B)) begin
        ICMPdataOut_V_keep_V_1_payload_B <= tmp_keep_V_reg_236;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ICMPdataOut_V_last_V_1_load_A)) begin
        ICMPdataOut_V_last_V_1_payload_A <= tmp_last_V_reg_242;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ICMPdataOut_V_last_V_1_load_B)) begin
        ICMPdataOut_V_last_V_1_payload_B <= tmp_last_V_reg_242;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == TCPdataOut_V_data_V_1_load_A)) begin
        TCPdataOut_V_data_V_1_payload_A <= tmp_data_V_reg_230;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == TCPdataOut_V_data_V_1_load_B)) begin
        TCPdataOut_V_data_V_1_payload_B <= tmp_data_V_reg_230;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == TCPdataOut_V_keep_V_1_load_A)) begin
        TCPdataOut_V_keep_V_1_payload_A <= tmp_keep_V_reg_236;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == TCPdataOut_V_keep_V_1_load_B)) begin
        TCPdataOut_V_keep_V_1_payload_B <= tmp_keep_V_reg_236;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == TCPdataOut_V_last_V_1_load_A)) begin
        TCPdataOut_V_last_V_1_payload_A <= tmp_last_V_reg_242;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == TCPdataOut_V_last_V_1_load_B)) begin
        TCPdataOut_V_last_V_1_payload_B <= tmp_last_V_reg_242;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_20_nbreadreq_fu_90_p3 == 1'd1) & (tmp_18_nbreadreq_fu_82_p3 == 1'd1) & (dip_state == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dip_ipProtocol_V <= ipv4ProtocolFifo_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_nbreadreq_fu_110_p3 == 1'd1) & (dip_state == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dip_ipProtocol_V_loa_reg_248 <= dip_ipProtocol_V;
        tmp_data_V_reg_230 <= tmp_data_V_fu_173_p1;
        tmp_keep_V_reg_236 <= {{ipDataCutFifo_V_dout[71:64]}};
        tmp_last_V_reg_242 <= ipDataCutFifo_V_dout[32'd72];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dip_ipProtocol_V_loa_reg_248_pp0_iter1_reg <= dip_ipProtocol_V_loa_reg_248;
        dip_state_load_reg_205 <= dip_state;
        dip_state_load_reg_205_pp0_iter1_reg <= dip_state_load_reg_205;
        tmp_reg_221_pp0_iter1_reg <= tmp_reg_221;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op17_read_state1 == 1'b1))) begin
        tmp9_reg_225 <= ipDataCutFifo_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((dip_state == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_reg_221 <= tmp_nbreadreq_fu_110_p3;
    end
end

always @ (*) begin
    if ((1'b1 == ICMPdataOut_V_data_V_1_sel)) begin
        ICMPdataOut_V_data_V_1_data_out = ICMPdataOut_V_data_V_1_payload_B;
    end else begin
        ICMPdataOut_V_data_V_1_data_out = ICMPdataOut_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op26_write_state2 == 1'b1))) begin
        ICMPdataOut_V_data_V_1_vld_in = 1'b1;
    end else begin
        ICMPdataOut_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ICMPdataOut_V_keep_V_1_sel)) begin
        ICMPdataOut_V_keep_V_1_data_out = ICMPdataOut_V_keep_V_1_payload_B;
    end else begin
        ICMPdataOut_V_keep_V_1_data_out = ICMPdataOut_V_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op26_write_state2 == 1'b1))) begin
        ICMPdataOut_V_keep_V_1_vld_in = 1'b1;
    end else begin
        ICMPdataOut_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ICMPdataOut_V_last_V_1_sel)) begin
        ICMPdataOut_V_last_V_1_data_out = ICMPdataOut_V_last_V_1_payload_B;
    end else begin
        ICMPdataOut_V_last_V_1_data_out = ICMPdataOut_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op26_write_state2 == 1'b1))) begin
        ICMPdataOut_V_last_V_1_vld_in = 1'b1;
    end else begin
        ICMPdataOut_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == TCPdataOut_V_data_V_1_sel)) begin
        TCPdataOut_V_data_V_1_data_out = TCPdataOut_V_data_V_1_payload_B;
    end else begin
        TCPdataOut_V_data_V_1_data_out = TCPdataOut_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op24_write_state2 == 1'b1))) begin
        TCPdataOut_V_data_V_1_vld_in = 1'b1;
    end else begin
        TCPdataOut_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == TCPdataOut_V_keep_V_1_sel)) begin
        TCPdataOut_V_keep_V_1_data_out = TCPdataOut_V_keep_V_1_payload_B;
    end else begin
        TCPdataOut_V_keep_V_1_data_out = TCPdataOut_V_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op24_write_state2 == 1'b1))) begin
        TCPdataOut_V_keep_V_1_vld_in = 1'b1;
    end else begin
        TCPdataOut_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == TCPdataOut_V_last_V_1_sel)) begin
        TCPdataOut_V_last_V_1_data_out = TCPdataOut_V_last_V_1_payload_B;
    end else begin
        TCPdataOut_V_last_V_1_data_out = TCPdataOut_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op24_write_state2 == 1'b1))) begin
        TCPdataOut_V_last_V_1_vld_in = 1'b1;
    end else begin
        TCPdataOut_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op17_read_state1 == 1'b1))) begin
        ipDataCutFifo_V_blk_n = ipDataCutFifo_V_empty_n;
    end else begin
        ipDataCutFifo_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op17_read_state1 == 1'b1))) begin
        ipDataCutFifo_V_read = 1'b1;
    end else begin
        ipDataCutFifo_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op10_read_state1 == 1'b1))) begin
        ipv4ProtocolFifo_V_V_blk_n = ipv4ProtocolFifo_V_V_empty_n;
    end else begin
        ipv4ProtocolFifo_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op10_read_state1 == 1'b1))) begin
        ipv4ProtocolFifo_V_V_read = 1'b1;
    end else begin
        ipv4ProtocolFifo_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op12_read_state1 == 1'b1))) begin
        ipv4ValidFifo_V_blk_n = ipv4ValidFifo_V_empty_n;
    end else begin
        ipv4ValidFifo_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op12_read_state1 == 1'b1))) begin
        ipv4ValidFifo_V_read = 1'b1;
    end else begin
        ipv4ValidFifo_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op41_write_state3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op26_write_state2 == 1'b1)))) begin
        m_axis_icmp_TDATA_blk_n = ICMPdataOut_V_data_V_1_state[1'd1];
    end else begin
        m_axis_icmp_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op38_write_state3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op24_write_state2 == 1'b1)))) begin
        m_axis_tcp_TDATA_blk_n = TCPdataOut_V_data_V_1_state[1'd1];
    end else begin
        m_axis_tcp_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op25_write_state2 == 1'b1))) begin
        udpDataFifo_V_blk_n = udpDataFifo_V_full_n;
    end else begin
        udpDataFifo_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op25_write_state2 == 1'b1))) begin
        udpDataFifo_V_write = 1'b1;
    end else begin
        udpDataFifo_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ICMPdataOut_V_data_V_1_ack_in = ICMPdataOut_V_data_V_1_state[1'd1];

assign ICMPdataOut_V_data_V_1_ack_out = m_axis_icmp_TREADY;

assign ICMPdataOut_V_data_V_1_load_A = (~ICMPdataOut_V_data_V_1_sel_wr & ICMPdataOut_V_data_V_1_state_cmp_full);

assign ICMPdataOut_V_data_V_1_load_B = (ICMPdataOut_V_data_V_1_state_cmp_full & ICMPdataOut_V_data_V_1_sel_wr);

assign ICMPdataOut_V_data_V_1_sel = ICMPdataOut_V_data_V_1_sel_rd;

assign ICMPdataOut_V_data_V_1_state_cmp_full = ((ICMPdataOut_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign ICMPdataOut_V_data_V_1_vld_out = ICMPdataOut_V_data_V_1_state[1'd0];

assign ICMPdataOut_V_keep_V_1_ack_in = ICMPdataOut_V_keep_V_1_state[1'd1];

assign ICMPdataOut_V_keep_V_1_ack_out = m_axis_icmp_TREADY;

assign ICMPdataOut_V_keep_V_1_load_A = (~ICMPdataOut_V_keep_V_1_sel_wr & ICMPdataOut_V_keep_V_1_state_cmp_full);

assign ICMPdataOut_V_keep_V_1_load_B = (ICMPdataOut_V_keep_V_1_state_cmp_full & ICMPdataOut_V_keep_V_1_sel_wr);

assign ICMPdataOut_V_keep_V_1_sel = ICMPdataOut_V_keep_V_1_sel_rd;

assign ICMPdataOut_V_keep_V_1_state_cmp_full = ((ICMPdataOut_V_keep_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign ICMPdataOut_V_keep_V_1_vld_out = ICMPdataOut_V_keep_V_1_state[1'd0];

assign ICMPdataOut_V_last_V_1_ack_in = ICMPdataOut_V_last_V_1_state[1'd1];

assign ICMPdataOut_V_last_V_1_ack_out = m_axis_icmp_TREADY;

assign ICMPdataOut_V_last_V_1_load_A = (~ICMPdataOut_V_last_V_1_sel_wr & ICMPdataOut_V_last_V_1_state_cmp_full);

assign ICMPdataOut_V_last_V_1_load_B = (ICMPdataOut_V_last_V_1_state_cmp_full & ICMPdataOut_V_last_V_1_sel_wr);

assign ICMPdataOut_V_last_V_1_sel = ICMPdataOut_V_last_V_1_sel_rd;

assign ICMPdataOut_V_last_V_1_state_cmp_full = ((ICMPdataOut_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign ICMPdataOut_V_last_V_1_vld_out = ICMPdataOut_V_last_V_1_state[1'd0];

assign TCPdataOut_V_data_V_1_ack_in = TCPdataOut_V_data_V_1_state[1'd1];

assign TCPdataOut_V_data_V_1_ack_out = m_axis_tcp_TREADY;

assign TCPdataOut_V_data_V_1_load_A = (~TCPdataOut_V_data_V_1_sel_wr & TCPdataOut_V_data_V_1_state_cmp_full);

assign TCPdataOut_V_data_V_1_load_B = (TCPdataOut_V_data_V_1_state_cmp_full & TCPdataOut_V_data_V_1_sel_wr);

assign TCPdataOut_V_data_V_1_sel = TCPdataOut_V_data_V_1_sel_rd;

assign TCPdataOut_V_data_V_1_state_cmp_full = ((TCPdataOut_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign TCPdataOut_V_data_V_1_vld_out = TCPdataOut_V_data_V_1_state[1'd0];

assign TCPdataOut_V_keep_V_1_ack_in = TCPdataOut_V_keep_V_1_state[1'd1];

assign TCPdataOut_V_keep_V_1_ack_out = m_axis_tcp_TREADY;

assign TCPdataOut_V_keep_V_1_load_A = (~TCPdataOut_V_keep_V_1_sel_wr & TCPdataOut_V_keep_V_1_state_cmp_full);

assign TCPdataOut_V_keep_V_1_load_B = (TCPdataOut_V_keep_V_1_state_cmp_full & TCPdataOut_V_keep_V_1_sel_wr);

assign TCPdataOut_V_keep_V_1_sel = TCPdataOut_V_keep_V_1_sel_rd;

assign TCPdataOut_V_keep_V_1_state_cmp_full = ((TCPdataOut_V_keep_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign TCPdataOut_V_keep_V_1_vld_out = TCPdataOut_V_keep_V_1_state[1'd0];

assign TCPdataOut_V_last_V_1_ack_in = TCPdataOut_V_last_V_1_state[1'd1];

assign TCPdataOut_V_last_V_1_ack_out = m_axis_tcp_TREADY;

assign TCPdataOut_V_last_V_1_load_A = (~TCPdataOut_V_last_V_1_sel_wr & TCPdataOut_V_last_V_1_state_cmp_full);

assign TCPdataOut_V_last_V_1_load_B = (TCPdataOut_V_last_V_1_state_cmp_full & TCPdataOut_V_last_V_1_sel_wr);

assign TCPdataOut_V_last_V_1_sel = TCPdataOut_V_last_V_1_sel_rd;

assign TCPdataOut_V_last_V_1_state_cmp_full = ((TCPdataOut_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign TCPdataOut_V_last_V_1_vld_out = TCPdataOut_V_last_V_1_state[1'd0];

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((udpDataFifo_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_predicate_op25_write_state2 == 1'b1)) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((ipDataCutFifo_V_empty_n == 1'b0) & (ap_predicate_op17_read_state1 == 1'b1)) | ((ipv4ValidFifo_V_empty_n == 1'b0) & (ap_predicate_op12_read_state1 == 1'b1)) | ((ipv4ProtocolFifo_V_V_empty_n == 1'b0) & (ap_predicate_op10_read_state1 == 1'b1)))) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((2'd1 == TCPdataOut_V_last_V_1_state) | (2'd1 == TCPdataOut_V_keep_V_1_state) | (2'd1 == TCPdataOut_V_data_V_1_state) | (2'd1 == ICMPdataOut_V_last_V_1_state) | (2'd1 == ICMPdataOut_V_keep_V_1_state) | (2'd1 == ICMPdataOut_V_data_V_1_state) | ((m_axis_tcp_TREADY == 1'b0) & (2'd3 == TCPdataOut_V_last_V_1_state)) | ((m_axis_tcp_TREADY == 1'b0) & (2'd3 == TCPdataOut_V_keep_V_1_state)) | ((m_axis_tcp_TREADY == 1'b0) & (2'd3 == TCPdataOut_V_data_V_1_state)) | ((m_axis_icmp_TREADY == 1'b0) & (2'd3 == ICMPdataOut_V_last_V_1_state)) | ((m_axis_icmp_TREADY == 1'b0) & (2'd3 == ICMPdataOut_V_keep_V_1_state)) | ((m_axis_icmp_TREADY == 1'b0) & (2'd3 == ICMPdataOut_V_data_V_1_state)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((ipDataCutFifo_V_empty_n == 1'b0) & (ap_predicate_op17_read_state1 == 1'b1)) | ((ipv4ValidFifo_V_empty_n == 1'b0) & (ap_predicate_op12_read_state1 == 1'b1)) | ((ipv4ProtocolFifo_V_V_empty_n == 1'b0) & (ap_predicate_op10_read_state1 == 1'b1)))) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((1'b1 == ap_block_state3_io) | (2'd1 == TCPdataOut_V_last_V_1_state) | (2'd1 == TCPdataOut_V_keep_V_1_state) | (2'd1 == TCPdataOut_V_data_V_1_state) | (2'd1 == ICMPdataOut_V_last_V_1_state) | (2'd1 == ICMPdataOut_V_keep_V_1_state) | (2'd1 == ICMPdataOut_V_data_V_1_state) | ((m_axis_tcp_TREADY == 1'b0) & (2'd3 == TCPdataOut_V_last_V_1_state)) | ((m_axis_tcp_TREADY == 1'b0) & (2'd3 == TCPdataOut_V_keep_V_1_state)) | ((m_axis_tcp_TREADY == 1'b0) & (2'd3 == TCPdataOut_V_data_V_1_state)) | ((m_axis_icmp_TREADY == 1'b0) & (2'd3 == ICMPdataOut_V_last_V_1_state)) | ((m_axis_icmp_TREADY == 1'b0) & (2'd3 == ICMPdataOut_V_keep_V_1_state)) | ((m_axis_icmp_TREADY == 1'b0) & (2'd3 == ICMPdataOut_V_data_V_1_state)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state2_io) | ((udpDataFifo_V_full_n == 1'b0) & (ap_predicate_op25_write_state2 == 1'b1)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((ipDataCutFifo_V_empty_n == 1'b0) & (ap_predicate_op17_read_state1 == 1'b1)) | ((ipv4ValidFifo_V_empty_n == 1'b0) & (ap_predicate_op12_read_state1 == 1'b1)) | ((ipv4ProtocolFifo_V_V_empty_n == 1'b0) & (ap_predicate_op10_read_state1 == 1'b1)))) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((1'b1 == ap_block_state3_io) | (2'd1 == TCPdataOut_V_last_V_1_state) | (2'd1 == TCPdataOut_V_keep_V_1_state) | (2'd1 == TCPdataOut_V_data_V_1_state) | (2'd1 == ICMPdataOut_V_last_V_1_state) | (2'd1 == ICMPdataOut_V_keep_V_1_state) | (2'd1 == ICMPdataOut_V_data_V_1_state) | ((m_axis_tcp_TREADY == 1'b0) & (2'd3 == TCPdataOut_V_last_V_1_state)) | ((m_axis_tcp_TREADY == 1'b0) & (2'd3 == TCPdataOut_V_keep_V_1_state)) | ((m_axis_tcp_TREADY == 1'b0) & (2'd3 == TCPdataOut_V_data_V_1_state)) | ((m_axis_icmp_TREADY == 1'b0) & (2'd3 == ICMPdataOut_V_last_V_1_state)) | ((m_axis_icmp_TREADY == 1'b0) & (2'd3 == ICMPdataOut_V_keep_V_1_state)) | ((m_axis_icmp_TREADY == 1'b0) & (2'd3 == ICMPdataOut_V_data_V_1_state)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state2_io) | ((udpDataFifo_V_full_n == 1'b0) & (ap_predicate_op25_write_state2 == 1'b1)))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((ipDataCutFifo_V_empty_n == 1'b0) & (ap_predicate_op17_read_state1 == 1'b1)) | ((ipv4ValidFifo_V_empty_n == 1'b0) & (ap_predicate_op12_read_state1 == 1'b1)) | ((ipv4ProtocolFifo_V_V_empty_n == 1'b0) & (ap_predicate_op10_read_state1 == 1'b1)));
end

always @ (*) begin
    ap_block_state2_io = (((1'b0 == ICMPdataOut_V_data_V_1_ack_in) & (ap_predicate_op26_write_state2 == 1'b1)) | ((1'b0 == TCPdataOut_V_data_V_1_ack_in) & (ap_predicate_op24_write_state2 == 1'b1)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((udpDataFifo_V_full_n == 1'b0) & (ap_predicate_op25_write_state2 == 1'b1));
end

always @ (*) begin
    ap_block_state3_io = (((1'b0 == ICMPdataOut_V_data_V_1_ack_in) & (ap_predicate_op41_write_state3 == 1'b1)) | ((1'b0 == TCPdataOut_V_data_V_1_ack_in) & (ap_predicate_op38_write_state3 == 1'b1)));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((2'd1 == TCPdataOut_V_last_V_1_state) | (2'd1 == TCPdataOut_V_keep_V_1_state) | (2'd1 == TCPdataOut_V_data_V_1_state) | (2'd1 == ICMPdataOut_V_last_V_1_state) | (2'd1 == ICMPdataOut_V_keep_V_1_state) | (2'd1 == ICMPdataOut_V_data_V_1_state) | ((m_axis_tcp_TREADY == 1'b0) & (2'd3 == TCPdataOut_V_last_V_1_state)) | ((m_axis_tcp_TREADY == 1'b0) & (2'd3 == TCPdataOut_V_keep_V_1_state)) | ((m_axis_tcp_TREADY == 1'b0) & (2'd3 == TCPdataOut_V_data_V_1_state)) | ((m_axis_icmp_TREADY == 1'b0) & (2'd3 == ICMPdataOut_V_last_V_1_state)) | ((m_axis_icmp_TREADY == 1'b0) & (2'd3 == ICMPdataOut_V_keep_V_1_state)) | ((m_axis_icmp_TREADY == 1'b0) & (2'd3 == ICMPdataOut_V_data_V_1_state)));
end

always @ (*) begin
    ap_condition_216 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_588 = ((tmp_22_read_fu_104_p2 == 1'd1) & (tmp_20_nbreadreq_fu_90_p3 == 1'd1) & (tmp_18_nbreadreq_fu_82_p3 == 1'd1) & (dip_state == 1'd0));
end

always @ (*) begin
    ap_condition_591 = ((tmp_nbreadreq_fu_110_p3 == 1'd1) & (tmp_last_V_fu_187_p3 == 1'd1) & (dip_state == 1'd1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

always @ (*) begin
    ap_predicate_op10_read_state1 = ((tmp_20_nbreadreq_fu_90_p3 == 1'd1) & (tmp_18_nbreadreq_fu_82_p3 == 1'd1) & (dip_state == 1'd0));
end

always @ (*) begin
    ap_predicate_op12_read_state1 = ((tmp_20_nbreadreq_fu_90_p3 == 1'd1) & (tmp_18_nbreadreq_fu_82_p3 == 1'd1) & (dip_state == 1'd0));
end

always @ (*) begin
    ap_predicate_op17_read_state1 = ((tmp_nbreadreq_fu_110_p3 == 1'd1) & (dip_state == 1'd1));
end

always @ (*) begin
    ap_predicate_op24_write_state2 = ((dip_ipProtocol_V_loa_reg_248 == 8'd6) & (tmp_reg_221 == 1'd1) & (dip_state_load_reg_205 == 1'd1));
end

always @ (*) begin
    ap_predicate_op25_write_state2 = ((dip_ipProtocol_V_loa_reg_248 == 8'd17) & (tmp_reg_221 == 1'd1) & (dip_state_load_reg_205 == 1'd1));
end

always @ (*) begin
    ap_predicate_op26_write_state2 = ((dip_ipProtocol_V_loa_reg_248 == 8'd1) & (tmp_reg_221 == 1'd1) & (dip_state_load_reg_205 == 1'd1));
end

always @ (*) begin
    ap_predicate_op38_write_state3 = ((tmp_reg_221_pp0_iter1_reg == 1'd1) & (dip_state_load_reg_205_pp0_iter1_reg == 1'd1) & (dip_ipProtocol_V_loa_reg_248_pp0_iter1_reg == 8'd6));
end

always @ (*) begin
    ap_predicate_op41_write_state3 = ((tmp_reg_221_pp0_iter1_reg == 1'd1) & (dip_state_load_reg_205_pp0_iter1_reg == 1'd1) & (dip_ipProtocol_V_loa_reg_248_pp0_iter1_reg == 8'd1));
end

assign m_axis_icmp_TDATA = ICMPdataOut_V_data_V_1_data_out;

assign m_axis_icmp_TKEEP = ICMPdataOut_V_keep_V_1_data_out;

assign m_axis_icmp_TLAST = ICMPdataOut_V_last_V_1_data_out;

assign m_axis_icmp_TVALID = ICMPdataOut_V_last_V_1_state[1'd0];

assign m_axis_tcp_TDATA = TCPdataOut_V_data_V_1_data_out;

assign m_axis_tcp_TKEEP = TCPdataOut_V_keep_V_1_data_out;

assign m_axis_tcp_TLAST = TCPdataOut_V_last_V_1_data_out;

assign m_axis_tcp_TVALID = TCPdataOut_V_last_V_1_state[1'd0];

assign tmp_18_nbreadreq_fu_82_p3 = ipv4ProtocolFifo_V_V_empty_n;

assign tmp_20_nbreadreq_fu_90_p3 = ipv4ValidFifo_V_empty_n;

assign tmp_22_read_fu_104_p2 = ipv4ValidFifo_V_dout;

assign tmp_data_V_fu_173_p1 = ipDataCutFifo_V_dout[63:0];

assign tmp_last_V_fu_187_p3 = ipDataCutFifo_V_dout[32'd72];

assign tmp_nbreadreq_fu_110_p3 = ipDataCutFifo_V_empty_n;

assign udpDataFifo_V_din = tmp9_reg_225;

endmodule //detect_ipv4_protocol
