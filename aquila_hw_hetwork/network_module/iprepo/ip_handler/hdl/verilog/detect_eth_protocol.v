// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module detect_eth_protocol (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        s_axis_raw_TVALID,
        ethDataFifo_V_data_V_din,
        ethDataFifo_V_data_V_full_n,
        ethDataFifo_V_data_V_write,
        ethDataFifo_V_keep_V_din,
        ethDataFifo_V_keep_V_full_n,
        ethDataFifo_V_keep_V_write,
        ethDataFifo_V_last_V_din,
        ethDataFifo_V_last_V_full_n,
        ethDataFifo_V_last_V_write,
        etherTypeFifo_V_V_din,
        etherTypeFifo_V_V_full_n,
        etherTypeFifo_V_V_write,
        s_axis_raw_TDATA,
        s_axis_raw_TREADY,
        s_axis_raw_TKEEP,
        s_axis_raw_TLAST
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input   s_axis_raw_TVALID;
output  [63:0] ethDataFifo_V_data_V_din;
input   ethDataFifo_V_data_V_full_n;
output   ethDataFifo_V_data_V_write;
output  [7:0] ethDataFifo_V_keep_V_din;
input   ethDataFifo_V_keep_V_full_n;
output   ethDataFifo_V_keep_V_write;
output  [0:0] ethDataFifo_V_last_V_din;
input   ethDataFifo_V_last_V_full_n;
output   ethDataFifo_V_last_V_write;
output  [15:0] etherTypeFifo_V_V_din;
input   etherTypeFifo_V_V_full_n;
output   etherTypeFifo_V_V_write;
input  [63:0] s_axis_raw_TDATA;
output   s_axis_raw_TREADY;
input  [7:0] s_axis_raw_TKEEP;
input  [0:0] s_axis_raw_TLAST;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg ethDataFifo_V_data_V_write;
reg ethDataFifo_V_keep_V_write;
reg ethDataFifo_V_last_V_write;
reg etherTypeFifo_V_V_write;
reg s_axis_raw_TREADY;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire   [0:0] tmp_nbreadreq_fu_92_p5;
reg    ap_block_state1_pp0_stage0_iter0;
wire    io_acc_block_signal_op61;
reg   [0:0] tmp_reg_475;
reg    ap_block_state2_pp0_stage0_iter1;
reg   [0:0] tmp_reg_475_pp0_iter1_reg;
reg   [0:0] or_ln54_reg_529;
reg    ap_predicate_op75_write_state3;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] header_ready;
reg   [15:0] header_idx_1;
reg   [111:0] header_header_V_1;
reg   [0:0] metaWritten_1;
reg    s_axis_raw_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    etherTypeFifo_V_V_blk_n;
reg    ethDataFifo_V_data_V_blk_n;
reg    ethDataFifo_V_keep_V_blk_n;
reg    ethDataFifo_V_last_V_blk_n;
reg   [63:0] tmp_data_V_reg_479;
reg   [7:0] tmp_keep_V_reg_485;
reg   [0:0] tmp_last_V_reg_490;
wire   [0:0] header_ready_load_load_fu_176_p1;
reg   [0:0] header_ready_load_reg_496;
wire   [0:0] trunc_ln58_fu_185_p1;
reg   [0:0] trunc_ln58_reg_500;
wire   [0:0] icmp_ln58_2_fu_227_p2;
reg   [0:0] icmp_ln58_2_reg_505;
wire   [6:0] trunc_ln58_2_fu_233_p1;
reg   [6:0] trunc_ln58_2_reg_513;
wire   [0:0] or_ln73_fu_251_p2;
reg   [0:0] or_ln73_reg_519;
wire   [0:0] xor_ln62_fu_257_p2;
reg   [0:0] xor_ln62_reg_524;
wire   [0:0] or_ln54_fu_426_p2;
wire   [0:0] or_ln62_fu_432_p2;
reg    ap_block_pp0_stage0_subdone;
reg   [15:0] ap_phi_mux_phi_ln73_phi_fu_137_p4;
wire   [15:0] ap_phi_reg_pp0_iter0_phi_ln73_reg_134;
wire   [15:0] add_ln67_fu_244_p2;
reg   [0:0] ap_phi_mux_write_flag_1_i_i_phi_fu_146_p4;
wire   [0:0] ap_phi_reg_pp0_iter0_write_flag_1_i_i_reg_143;
wire   [0:0] xor_ln58_fu_237_p2;
reg   [0:0] ap_phi_mux_metaWritten_1_flag_0_phi_fu_156_p4;
wire   [0:0] ap_phi_reg_pp0_iter1_metaWritten_1_flag_0_reg_153;
wire   [0:0] and_ln62_fu_263_p2;
wire   [15:0] select_ln62_fu_269_p3;
wire   [111:0] or_ln58_fu_405_p2;
reg    ap_block_pp0_stage0_01001;
wire   [21:0] Lo_assign_fu_189_p3;
wire   [22:0] zext_ln58_fu_197_p1;
wire   [22:0] add_ln58_fu_201_p2;
wire   [0:0] icmp_ln58_fu_207_p2;
wire   [21:0] or_ln60_fu_213_p2;
wire   [21:0] select_ln58_fu_219_p3;
wire   [6:0] tmp_23_fu_296_p3;
wire   [6:0] sub_ln58_fu_303_p2;
wire   [6:0] select_ln58_5_fu_309_p3;
wire   [6:0] select_ln58_7_fu_321_p3;
wire   [6:0] select_ln58_6_fu_315_p3;
wire   [6:0] sub_ln58_2_fu_328_p2;
wire   [111:0] tmp_V_2_fu_293_p1;
wire   [111:0] zext_ln58_4_fu_334_p1;
wire   [111:0] shl_ln58_fu_346_p2;
reg   [111:0] tmp_24_fu_352_p4;
wire   [111:0] zext_ln58_5_fu_338_p1;
wire   [111:0] zext_ln58_6_fu_342_p1;
wire   [111:0] shl_ln58_2_fu_369_p2;
wire   [111:0] lshr_ln58_fu_375_p2;
wire   [111:0] and_ln58_fu_381_p2;
wire   [111:0] xor_ln58_2_fu_387_p2;
wire   [111:0] select_ln58_8_fu_362_p3;
wire   [111:0] and_ln58_3_fu_393_p2;
wire   [111:0] and_ln58_4_fu_399_p2;
wire   [0:0] xor_ln54_fu_421_p2;
wire   [7:0] p_Result_50_1_i_i_s_fu_456_p4;
wire   [7:0] p_Result_50_i_i_i_fu_446_p4;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_117;
reg    ap_condition_109;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 header_ready = 1'd0;
#0 header_idx_1 = 16'd0;
#0 header_header_V_1 = 112'd0;
#0 metaWritten_1 = 1'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (header_ready_load_reg_496 == 1'd0) & (tmp_reg_475 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        header_header_V_1 <= or_ln58_fu_405_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_nbreadreq_fu_92_p5 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        header_idx_1 <= select_ln62_fu_269_p3;
        header_ready <= and_ln62_fu_263_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_nbreadreq_fu_92_p5 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        header_ready_load_reg_496 <= header_ready;
        or_ln73_reg_519 <= or_ln73_fu_251_p2;
        tmp_data_V_reg_479 <= s_axis_raw_TDATA;
        tmp_keep_V_reg_485 <= s_axis_raw_TKEEP;
        tmp_last_V_reg_490 <= s_axis_raw_TLAST;
        xor_ln62_reg_524 <= xor_ln62_fu_257_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (header_ready_load_load_fu_176_p1 == 1'd0) & (tmp_nbreadreq_fu_92_p5 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln58_2_reg_505 <= icmp_ln58_2_fu_227_p2;
        trunc_ln58_2_reg_513[4] <= trunc_ln58_2_fu_233_p1[4];
trunc_ln58_2_reg_513[6] <= trunc_ln58_2_fu_233_p1[6];
        trunc_ln58_reg_500 <= trunc_ln58_fu_185_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_475 == 1'd1) & (or_ln62_fu_432_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        metaWritten_1 <= xor_ln62_reg_524;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_475 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        or_ln54_reg_529 <= or_ln54_fu_426_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_reg_475 <= tmp_nbreadreq_fu_92_p5;
        tmp_reg_475_pp0_iter1_reg <= tmp_reg_475;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_117)) begin
        if ((or_ln54_fu_426_p2 == 1'd1)) begin
            ap_phi_mux_metaWritten_1_flag_0_phi_fu_156_p4 = 1'd0;
        end else if ((or_ln54_fu_426_p2 == 1'd0)) begin
            ap_phi_mux_metaWritten_1_flag_0_phi_fu_156_p4 = 1'd1;
        end else begin
            ap_phi_mux_metaWritten_1_flag_0_phi_fu_156_p4 = ap_phi_reg_pp0_iter1_metaWritten_1_flag_0_reg_153;
        end
    end else begin
        ap_phi_mux_metaWritten_1_flag_0_phi_fu_156_p4 = ap_phi_reg_pp0_iter1_metaWritten_1_flag_0_reg_153;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_109)) begin
        if ((header_ready_load_load_fu_176_p1 == 1'd0)) begin
            ap_phi_mux_phi_ln73_phi_fu_137_p4 = add_ln67_fu_244_p2;
        end else if ((header_ready_load_load_fu_176_p1 == 1'd1)) begin
            ap_phi_mux_phi_ln73_phi_fu_137_p4 = header_idx_1;
        end else begin
            ap_phi_mux_phi_ln73_phi_fu_137_p4 = ap_phi_reg_pp0_iter0_phi_ln73_reg_134;
        end
    end else begin
        ap_phi_mux_phi_ln73_phi_fu_137_p4 = ap_phi_reg_pp0_iter0_phi_ln73_reg_134;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_109)) begin
        if ((header_ready_load_load_fu_176_p1 == 1'd0)) begin
            ap_phi_mux_write_flag_1_i_i_phi_fu_146_p4 = xor_ln58_fu_237_p2;
        end else if ((header_ready_load_load_fu_176_p1 == 1'd1)) begin
            ap_phi_mux_write_flag_1_i_i_phi_fu_146_p4 = 1'd0;
        end else begin
            ap_phi_mux_write_flag_1_i_i_phi_fu_146_p4 = ap_phi_reg_pp0_iter0_write_flag_1_i_i_reg_143;
        end
    end else begin
        ap_phi_mux_write_flag_1_i_i_phi_fu_146_p4 = ap_phi_reg_pp0_iter0_write_flag_1_i_i_reg_143;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_reg_475 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ethDataFifo_V_data_V_blk_n = ethDataFifo_V_data_V_full_n;
    end else begin
        ethDataFifo_V_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_475 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ethDataFifo_V_data_V_write = 1'b1;
    end else begin
        ethDataFifo_V_data_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_reg_475 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ethDataFifo_V_keep_V_blk_n = ethDataFifo_V_keep_V_full_n;
    end else begin
        ethDataFifo_V_keep_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_475 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ethDataFifo_V_keep_V_write = 1'b1;
    end else begin
        ethDataFifo_V_keep_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_reg_475 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ethDataFifo_V_last_V_blk_n = ethDataFifo_V_last_V_full_n;
    end else begin
        ethDataFifo_V_last_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_475 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ethDataFifo_V_last_V_write = 1'b1;
    end else begin
        ethDataFifo_V_last_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op75_write_state3 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        etherTypeFifo_V_V_blk_n = etherTypeFifo_V_V_full_n;
    end else begin
        etherTypeFifo_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op75_write_state3 == 1'b1))) begin
        etherTypeFifo_V_V_write = 1'b1;
    end else begin
        etherTypeFifo_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (tmp_nbreadreq_fu_92_p5 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        s_axis_raw_TDATA_blk_n = s_axis_raw_TVALID;
    end else begin
        s_axis_raw_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_nbreadreq_fu_92_p5 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_axis_raw_TREADY = 1'b1;
    end else begin
        s_axis_raw_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Lo_assign_fu_189_p3 = {{header_idx_1}, {6'd0}};

assign add_ln58_fu_201_p2 = (zext_ln58_fu_197_p1 + 23'd64);

assign add_ln67_fu_244_p2 = (header_idx_1 + 16'd1);

assign and_ln58_3_fu_393_p2 = (xor_ln58_2_fu_387_p2 & header_header_V_1);

assign and_ln58_4_fu_399_p2 = (select_ln58_8_fu_362_p3 & and_ln58_fu_381_p2);

assign and_ln58_fu_381_p2 = (shl_ln58_2_fu_369_p2 & lshr_ln58_fu_375_p2);

assign and_ln62_fu_263_p2 = (xor_ln62_fu_257_p2 & or_ln73_fu_251_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((etherTypeFifo_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op75_write_state3 == 1'b1)) | ((tmp_reg_475 == 1'd1) & (io_acc_block_signal_op61 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((tmp_nbreadreq_fu_92_p5 == 1'd1) & (s_axis_raw_TVALID == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((etherTypeFifo_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op75_write_state3 == 1'b1)) | ((tmp_reg_475 == 1'd1) & (io_acc_block_signal_op61 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((tmp_nbreadreq_fu_92_p5 == 1'd1) & (s_axis_raw_TVALID == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((etherTypeFifo_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op75_write_state3 == 1'b1)) | ((tmp_reg_475 == 1'd1) & (io_acc_block_signal_op61 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((tmp_nbreadreq_fu_92_p5 == 1'd1) & (s_axis_raw_TVALID == 1'b0)))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((tmp_nbreadreq_fu_92_p5 == 1'd1) & (s_axis_raw_TVALID == 1'b0)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((tmp_reg_475 == 1'd1) & (io_acc_block_signal_op61 == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((etherTypeFifo_V_V_full_n == 1'b0) & (ap_predicate_op75_write_state3 == 1'b1));
end

always @ (*) begin
    ap_condition_109 = ((tmp_nbreadreq_fu_92_p5 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0));
end

always @ (*) begin
    ap_condition_117 = ((tmp_reg_475 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_phi_reg_pp0_iter0_phi_ln73_reg_134 = 'bx;

assign ap_phi_reg_pp0_iter0_write_flag_1_i_i_reg_143 = 'bx;

assign ap_phi_reg_pp0_iter1_metaWritten_1_flag_0_reg_153 = 'bx;

always @ (*) begin
    ap_predicate_op75_write_state3 = ((or_ln54_reg_529 == 1'd0) & (tmp_reg_475_pp0_iter1_reg == 1'd1));
end

assign ethDataFifo_V_data_V_din = tmp_data_V_reg_479;

assign ethDataFifo_V_keep_V_din = tmp_keep_V_reg_485;

assign ethDataFifo_V_last_V_din = tmp_last_V_reg_490;

assign etherTypeFifo_V_V_din = {{p_Result_50_1_i_i_s_fu_456_p4}, {p_Result_50_i_i_i_fu_446_p4}};

assign header_ready_load_load_fu_176_p1 = header_ready;

assign icmp_ln58_2_fu_227_p2 = ((Lo_assign_fu_189_p3 > select_ln58_fu_219_p3) ? 1'b1 : 1'b0);

assign icmp_ln58_fu_207_p2 = ((add_ln58_fu_201_p2 < 23'd112) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op61 = (ethDataFifo_V_last_V_full_n & ethDataFifo_V_keep_V_full_n & ethDataFifo_V_data_V_full_n);

assign lshr_ln58_fu_375_p2 = 112'd5192296858534827628530496329220095 >> zext_ln58_6_fu_342_p1;

assign or_ln54_fu_426_p2 = (xor_ln54_fu_421_p2 | metaWritten_1);

assign or_ln58_fu_405_p2 = (and_ln58_4_fu_399_p2 | and_ln58_3_fu_393_p2);

assign or_ln60_fu_213_p2 = (22'd63 | Lo_assign_fu_189_p3);

assign or_ln62_fu_432_p2 = (tmp_last_V_reg_490 | ap_phi_mux_metaWritten_1_flag_0_phi_fu_156_p4);

assign or_ln73_fu_251_p2 = (header_ready | ap_phi_mux_write_flag_1_i_i_phi_fu_146_p4);

assign p_Result_50_1_i_i_s_fu_456_p4 = {{header_header_V_1[103:96]}};

assign p_Result_50_i_i_i_fu_446_p4 = {{header_header_V_1[111:104]}};

assign select_ln58_5_fu_309_p3 = ((icmp_ln58_2_reg_505[0:0] === 1'b1) ? tmp_23_fu_296_p3 : trunc_ln58_2_reg_513);

assign select_ln58_6_fu_315_p3 = ((icmp_ln58_2_reg_505[0:0] === 1'b1) ? trunc_ln58_2_reg_513 : tmp_23_fu_296_p3);

assign select_ln58_7_fu_321_p3 = ((icmp_ln58_2_reg_505[0:0] === 1'b1) ? sub_ln58_fu_303_p2 : tmp_23_fu_296_p3);

assign select_ln58_8_fu_362_p3 = ((icmp_ln58_2_reg_505[0:0] === 1'b1) ? tmp_24_fu_352_p4 : shl_ln58_fu_346_p2);

assign select_ln58_fu_219_p3 = ((icmp_ln58_fu_207_p2[0:0] === 1'b1) ? or_ln60_fu_213_p2 : 22'd111);

assign select_ln62_fu_269_p3 = ((s_axis_raw_TLAST[0:0] === 1'b1) ? 16'd0 : ap_phi_mux_phi_ln73_phi_fu_137_p4);

assign shl_ln58_2_fu_369_p2 = 112'd5192296858534827628530496329220095 << zext_ln58_5_fu_338_p1;

assign shl_ln58_fu_346_p2 = tmp_V_2_fu_293_p1 << zext_ln58_4_fu_334_p1;

assign sub_ln58_2_fu_328_p2 = ($signed(7'd111) - $signed(select_ln58_5_fu_309_p3));

assign sub_ln58_fu_303_p2 = ($signed(7'd111) - $signed(tmp_23_fu_296_p3));

assign tmp_23_fu_296_p3 = {{trunc_ln58_reg_500}, {6'd0}};

integer ap_tvar_int_0;

always @ (shl_ln58_fu_346_p2) begin
    for (ap_tvar_int_0 = 112 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 111 - 0) begin
            tmp_24_fu_352_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_24_fu_352_p4[ap_tvar_int_0] = shl_ln58_fu_346_p2[111 - ap_tvar_int_0];
        end
    end
end

assign tmp_V_2_fu_293_p1 = tmp_data_V_reg_479;

assign tmp_nbreadreq_fu_92_p5 = s_axis_raw_TVALID;

assign trunc_ln58_2_fu_233_p1 = select_ln58_fu_219_p3[6:0];

assign trunc_ln58_fu_185_p1 = header_idx_1[0:0];

assign xor_ln54_fu_421_p2 = (or_ln73_reg_519 ^ 1'd1);

assign xor_ln58_2_fu_387_p2 = (112'd5192296858534827628530496329220095 ^ and_ln58_fu_381_p2);

assign xor_ln58_fu_237_p2 = (icmp_ln58_fu_207_p2 ^ 1'd1);

assign xor_ln62_fu_257_p2 = (s_axis_raw_TLAST ^ 1'd1);

assign zext_ln58_4_fu_334_p1 = select_ln58_7_fu_321_p3;

assign zext_ln58_5_fu_338_p1 = select_ln58_6_fu_315_p3;

assign zext_ln58_6_fu_342_p1 = sub_ln58_2_fu_328_p2;

assign zext_ln58_fu_197_p1 = Lo_assign_fu_189_p3;

always @ (posedge ap_clk) begin
    trunc_ln58_2_reg_513[3:0] <= 4'b1111;
    trunc_ln58_2_reg_513[5] <= 1'b1;
end

endmodule //detect_eth_protocol
