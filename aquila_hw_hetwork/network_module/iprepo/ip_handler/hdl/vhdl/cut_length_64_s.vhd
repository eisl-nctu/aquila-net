-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cut_length_64_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ipDataDropFifo_V_dout : IN STD_LOGIC_VECTOR (72 downto 0);
    ipDataDropFifo_V_empty_n : IN STD_LOGIC;
    ipDataDropFifo_V_read : OUT STD_LOGIC;
    ipDataCutFifo_V_din : OUT STD_LOGIC_VECTOR (72 downto 0);
    ipDataCutFifo_V_full_n : IN STD_LOGIC;
    ipDataCutFifo_V_write : OUT STD_LOGIC );
end;


architecture behav of cut_length_64_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv64_1F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011111";
    constant ap_const_lv64_3F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111111";
    constant ap_const_lv64_7F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001111111";
    constant ap_const_lv64_FF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000011111111";
    constant ap_const_lv64_1FF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000111111111";
    constant ap_const_lv64_3FF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000001111111111";
    constant ap_const_lv64_7FF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000011111111111";
    constant ap_const_lv64_FFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000111111111111";
    constant ap_const_lv64_1FFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000001111111111111";
    constant ap_const_lv64_3FFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000011111111111111";
    constant ap_const_lv64_7FFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000111111111111111";
    constant ap_const_lv64_FFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000001111111111111111";
    constant ap_const_lv64_1FFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000011111111111111111";
    constant ap_const_lv64_3FFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000111111111111111111";
    constant ap_const_lv64_7FFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000001111111111111111111";
    constant ap_const_lv64_FFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000011111111111111111111";
    constant ap_const_lv64_1FFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000111111111111111111111";
    constant ap_const_lv64_3FFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000001111111111111111111111";
    constant ap_const_lv64_7FFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000011111111111111111111111";
    constant ap_const_lv64_FFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000111111111111111111111111";
    constant ap_const_lv64_1FFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000001111111111111111111111111";
    constant ap_const_lv64_3FFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000011111111111111111111111111";
    constant ap_const_lv64_7FFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000111111111111111111111111111";
    constant ap_const_lv64_FFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000001111111111111111111111111111";
    constant ap_const_lv64_1FFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000011111111111111111111111111111";
    constant ap_const_lv64_3FFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000111111111111111111111111111111";
    constant ap_const_lv64_7FFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000001111111111111111111111111111111";
    constant ap_const_lv64_FFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000011111111111111111111111111111111";
    constant ap_const_lv64_1FFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000111111111111111111111111111111111";
    constant ap_const_lv64_3FFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000001111111111111111111111111111111111";
    constant ap_const_lv64_7FFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000011111111111111111111111111111111111";
    constant ap_const_lv64_FFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000111111111111111111111111111111111111";
    constant ap_const_lv64_1FFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000001111111111111111111111111111111111111";
    constant ap_const_lv64_3FFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000011111111111111111111111111111111111111";
    constant ap_const_lv64_7FFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000111111111111111111111111111111111111111";
    constant ap_const_lv64_FFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000001111111111111111111111111111111111111111";
    constant ap_const_lv64_1FFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000011111111111111111111111111111111111111111";
    constant ap_const_lv64_3FFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000111111111111111111111111111111111111111111";
    constant ap_const_lv64_7FFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000001111111111111111111111111111111111111111111";
    constant ap_const_lv64_FFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000011111111111111111111111111111111111111111111";
    constant ap_const_lv64_1FFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000111111111111111111111111111111111111111111111";
    constant ap_const_lv64_3FFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000001111111111111111111111111111111111111111111111";
    constant ap_const_lv64_7FFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000011111111111111111111111111111111111111111111111";
    constant ap_const_lv64_FFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000111111111111111111111111111111111111111111111111";
    constant ap_const_lv64_1FFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000001111111111111111111111111111111111111111111111111";
    constant ap_const_lv64_3FFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000011111111111111111111111111111111111111111111111111";
    constant ap_const_lv64_7FFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000111111111111111111111111111111111111111111111111111";
    constant ap_const_lv64_FFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000001111111111111111111111111111111111111111111111111111";
    constant ap_const_lv64_1FFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000011111111111111111111111111111111111111111111111111111";
    constant ap_const_lv64_3FFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv64_7FFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000001111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv64_FFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000011111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv64_1FFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000000111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv64_3FFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000001111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv64_7FFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000011111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv64_FFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv64_1FFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0001111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv64_3FFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0011111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv64_7FFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal tmp_nbreadreq_fu_200_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op7_read_state1 : BOOLEAN;
    signal ap_predicate_op41_read_state1 : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal cl_state_load_reg_555 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_559 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op51_write_state2 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal cl_state : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal cl_wordCount_V : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal cl_totalLength_V : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ipDataDropFifo_V_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ipDataCutFifo_V_blk_n : STD_LOGIC;
    signal tmp_last_V_reg_221 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_fu_259_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_s_reg_563 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_245_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln254_fu_277_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln891_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln209_fu_481_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_phi_mux_tmp_last_V_phi_fu_224_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter0_tmp_last_V_reg_221 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter0_tmp_keep_V_reg_234 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter1_tmp_keep_V_reg_234 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln275_fu_525_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_s_fu_505_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal zext_ln215_fu_287_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_fu_291_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_1_fu_297_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln891_fu_305_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln214_fu_321_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln214_1_fu_333_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln_fu_325_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal leftLength_V_fu_337_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_V_i_i_fu_347_p65 : STD_LOGIC_VECTOR (5 downto 0);
    signal agg_result_V_i_i_fu_347_p66 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_15_i_fu_495_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_i_fu_485_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln700_fu_519_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_422 : BOOLEAN;
    signal ap_condition_419 : BOOLEAN;

    component ip_handler_top_mux_646_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        din26_WIDTH : INTEGER;
        din27_WIDTH : INTEGER;
        din28_WIDTH : INTEGER;
        din29_WIDTH : INTEGER;
        din30_WIDTH : INTEGER;
        din31_WIDTH : INTEGER;
        din32_WIDTH : INTEGER;
        din33_WIDTH : INTEGER;
        din34_WIDTH : INTEGER;
        din35_WIDTH : INTEGER;
        din36_WIDTH : INTEGER;
        din37_WIDTH : INTEGER;
        din38_WIDTH : INTEGER;
        din39_WIDTH : INTEGER;
        din40_WIDTH : INTEGER;
        din41_WIDTH : INTEGER;
        din42_WIDTH : INTEGER;
        din43_WIDTH : INTEGER;
        din44_WIDTH : INTEGER;
        din45_WIDTH : INTEGER;
        din46_WIDTH : INTEGER;
        din47_WIDTH : INTEGER;
        din48_WIDTH : INTEGER;
        din49_WIDTH : INTEGER;
        din50_WIDTH : INTEGER;
        din51_WIDTH : INTEGER;
        din52_WIDTH : INTEGER;
        din53_WIDTH : INTEGER;
        din54_WIDTH : INTEGER;
        din55_WIDTH : INTEGER;
        din56_WIDTH : INTEGER;
        din57_WIDTH : INTEGER;
        din58_WIDTH : INTEGER;
        din59_WIDTH : INTEGER;
        din60_WIDTH : INTEGER;
        din61_WIDTH : INTEGER;
        din62_WIDTH : INTEGER;
        din63_WIDTH : INTEGER;
        din64_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        din2 : IN STD_LOGIC_VECTOR (63 downto 0);
        din3 : IN STD_LOGIC_VECTOR (63 downto 0);
        din4 : IN STD_LOGIC_VECTOR (63 downto 0);
        din5 : IN STD_LOGIC_VECTOR (63 downto 0);
        din6 : IN STD_LOGIC_VECTOR (63 downto 0);
        din7 : IN STD_LOGIC_VECTOR (63 downto 0);
        din8 : IN STD_LOGIC_VECTOR (63 downto 0);
        din9 : IN STD_LOGIC_VECTOR (63 downto 0);
        din10 : IN STD_LOGIC_VECTOR (63 downto 0);
        din11 : IN STD_LOGIC_VECTOR (63 downto 0);
        din12 : IN STD_LOGIC_VECTOR (63 downto 0);
        din13 : IN STD_LOGIC_VECTOR (63 downto 0);
        din14 : IN STD_LOGIC_VECTOR (63 downto 0);
        din15 : IN STD_LOGIC_VECTOR (63 downto 0);
        din16 : IN STD_LOGIC_VECTOR (63 downto 0);
        din17 : IN STD_LOGIC_VECTOR (63 downto 0);
        din18 : IN STD_LOGIC_VECTOR (63 downto 0);
        din19 : IN STD_LOGIC_VECTOR (63 downto 0);
        din20 : IN STD_LOGIC_VECTOR (63 downto 0);
        din21 : IN STD_LOGIC_VECTOR (63 downto 0);
        din22 : IN STD_LOGIC_VECTOR (63 downto 0);
        din23 : IN STD_LOGIC_VECTOR (63 downto 0);
        din24 : IN STD_LOGIC_VECTOR (63 downto 0);
        din25 : IN STD_LOGIC_VECTOR (63 downto 0);
        din26 : IN STD_LOGIC_VECTOR (63 downto 0);
        din27 : IN STD_LOGIC_VECTOR (63 downto 0);
        din28 : IN STD_LOGIC_VECTOR (63 downto 0);
        din29 : IN STD_LOGIC_VECTOR (63 downto 0);
        din30 : IN STD_LOGIC_VECTOR (63 downto 0);
        din31 : IN STD_LOGIC_VECTOR (63 downto 0);
        din32 : IN STD_LOGIC_VECTOR (63 downto 0);
        din33 : IN STD_LOGIC_VECTOR (63 downto 0);
        din34 : IN STD_LOGIC_VECTOR (63 downto 0);
        din35 : IN STD_LOGIC_VECTOR (63 downto 0);
        din36 : IN STD_LOGIC_VECTOR (63 downto 0);
        din37 : IN STD_LOGIC_VECTOR (63 downto 0);
        din38 : IN STD_LOGIC_VECTOR (63 downto 0);
        din39 : IN STD_LOGIC_VECTOR (63 downto 0);
        din40 : IN STD_LOGIC_VECTOR (63 downto 0);
        din41 : IN STD_LOGIC_VECTOR (63 downto 0);
        din42 : IN STD_LOGIC_VECTOR (63 downto 0);
        din43 : IN STD_LOGIC_VECTOR (63 downto 0);
        din44 : IN STD_LOGIC_VECTOR (63 downto 0);
        din45 : IN STD_LOGIC_VECTOR (63 downto 0);
        din46 : IN STD_LOGIC_VECTOR (63 downto 0);
        din47 : IN STD_LOGIC_VECTOR (63 downto 0);
        din48 : IN STD_LOGIC_VECTOR (63 downto 0);
        din49 : IN STD_LOGIC_VECTOR (63 downto 0);
        din50 : IN STD_LOGIC_VECTOR (63 downto 0);
        din51 : IN STD_LOGIC_VECTOR (63 downto 0);
        din52 : IN STD_LOGIC_VECTOR (63 downto 0);
        din53 : IN STD_LOGIC_VECTOR (63 downto 0);
        din54 : IN STD_LOGIC_VECTOR (63 downto 0);
        din55 : IN STD_LOGIC_VECTOR (63 downto 0);
        din56 : IN STD_LOGIC_VECTOR (63 downto 0);
        din57 : IN STD_LOGIC_VECTOR (63 downto 0);
        din58 : IN STD_LOGIC_VECTOR (63 downto 0);
        din59 : IN STD_LOGIC_VECTOR (63 downto 0);
        din60 : IN STD_LOGIC_VECTOR (63 downto 0);
        din61 : IN STD_LOGIC_VECTOR (63 downto 0);
        din62 : IN STD_LOGIC_VECTOR (63 downto 0);
        din63 : IN STD_LOGIC_VECTOR (63 downto 0);
        din64 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    ip_handler_top_mux_646_64_1_1_U50 : component ip_handler_top_mux_646_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 64,
        din10_WIDTH => 64,
        din11_WIDTH => 64,
        din12_WIDTH => 64,
        din13_WIDTH => 64,
        din14_WIDTH => 64,
        din15_WIDTH => 64,
        din16_WIDTH => 64,
        din17_WIDTH => 64,
        din18_WIDTH => 64,
        din19_WIDTH => 64,
        din20_WIDTH => 64,
        din21_WIDTH => 64,
        din22_WIDTH => 64,
        din23_WIDTH => 64,
        din24_WIDTH => 64,
        din25_WIDTH => 64,
        din26_WIDTH => 64,
        din27_WIDTH => 64,
        din28_WIDTH => 64,
        din29_WIDTH => 64,
        din30_WIDTH => 64,
        din31_WIDTH => 64,
        din32_WIDTH => 64,
        din33_WIDTH => 64,
        din34_WIDTH => 64,
        din35_WIDTH => 64,
        din36_WIDTH => 64,
        din37_WIDTH => 64,
        din38_WIDTH => 64,
        din39_WIDTH => 64,
        din40_WIDTH => 64,
        din41_WIDTH => 64,
        din42_WIDTH => 64,
        din43_WIDTH => 64,
        din44_WIDTH => 64,
        din45_WIDTH => 64,
        din46_WIDTH => 64,
        din47_WIDTH => 64,
        din48_WIDTH => 64,
        din49_WIDTH => 64,
        din50_WIDTH => 64,
        din51_WIDTH => 64,
        din52_WIDTH => 64,
        din53_WIDTH => 64,
        din54_WIDTH => 64,
        din55_WIDTH => 64,
        din56_WIDTH => 64,
        din57_WIDTH => 64,
        din58_WIDTH => 64,
        din59_WIDTH => 64,
        din60_WIDTH => 64,
        din61_WIDTH => 64,
        din62_WIDTH => 64,
        din63_WIDTH => 64,
        din64_WIDTH => 6,
        dout_WIDTH => 64)
    port map (
        din0 => ap_const_lv64_FFFFFFFFFFFFFFFF,
        din1 => ap_const_lv64_1,
        din2 => ap_const_lv64_3,
        din3 => ap_const_lv64_7,
        din4 => ap_const_lv64_F,
        din5 => ap_const_lv64_1F,
        din6 => ap_const_lv64_3F,
        din7 => ap_const_lv64_7F,
        din8 => ap_const_lv64_FF,
        din9 => ap_const_lv64_1FF,
        din10 => ap_const_lv64_3FF,
        din11 => ap_const_lv64_7FF,
        din12 => ap_const_lv64_FFF,
        din13 => ap_const_lv64_1FFF,
        din14 => ap_const_lv64_3FFF,
        din15 => ap_const_lv64_7FFF,
        din16 => ap_const_lv64_FFFF,
        din17 => ap_const_lv64_1FFFF,
        din18 => ap_const_lv64_3FFFF,
        din19 => ap_const_lv64_7FFFF,
        din20 => ap_const_lv64_FFFFF,
        din21 => ap_const_lv64_1FFFFF,
        din22 => ap_const_lv64_3FFFFF,
        din23 => ap_const_lv64_7FFFFF,
        din24 => ap_const_lv64_FFFFFF,
        din25 => ap_const_lv64_1FFFFFF,
        din26 => ap_const_lv64_3FFFFFF,
        din27 => ap_const_lv64_7FFFFFF,
        din28 => ap_const_lv64_FFFFFFF,
        din29 => ap_const_lv64_1FFFFFFF,
        din30 => ap_const_lv64_3FFFFFFF,
        din31 => ap_const_lv64_7FFFFFFF,
        din32 => ap_const_lv64_FFFFFFFF,
        din33 => ap_const_lv64_1FFFFFFFF,
        din34 => ap_const_lv64_3FFFFFFFF,
        din35 => ap_const_lv64_7FFFFFFFF,
        din36 => ap_const_lv64_FFFFFFFFF,
        din37 => ap_const_lv64_1FFFFFFFFF,
        din38 => ap_const_lv64_3FFFFFFFFF,
        din39 => ap_const_lv64_7FFFFFFFFF,
        din40 => ap_const_lv64_FFFFFFFFFF,
        din41 => ap_const_lv64_1FFFFFFFFFF,
        din42 => ap_const_lv64_3FFFFFFFFFF,
        din43 => ap_const_lv64_7FFFFFFFFFF,
        din44 => ap_const_lv64_FFFFFFFFFFF,
        din45 => ap_const_lv64_1FFFFFFFFFFF,
        din46 => ap_const_lv64_3FFFFFFFFFFF,
        din47 => ap_const_lv64_7FFFFFFFFFFF,
        din48 => ap_const_lv64_FFFFFFFFFFFF,
        din49 => ap_const_lv64_1FFFFFFFFFFFF,
        din50 => ap_const_lv64_3FFFFFFFFFFFF,
        din51 => ap_const_lv64_7FFFFFFFFFFFF,
        din52 => ap_const_lv64_FFFFFFFFFFFFF,
        din53 => ap_const_lv64_1FFFFFFFFFFFFF,
        din54 => ap_const_lv64_3FFFFFFFFFFFFF,
        din55 => ap_const_lv64_7FFFFFFFFFFFFF,
        din56 => ap_const_lv64_FFFFFFFFFFFFFF,
        din57 => ap_const_lv64_1FFFFFFFFFFFFFF,
        din58 => ap_const_lv64_3FFFFFFFFFFFFFF,
        din59 => ap_const_lv64_7FFFFFFFFFFFFFF,
        din60 => ap_const_lv64_FFFFFFFFFFFFFFF,
        din61 => ap_const_lv64_1FFFFFFFFFFFFFFF,
        din62 => ap_const_lv64_3FFFFFFFFFFFFFFF,
        din63 => ap_const_lv64_7FFFFFFFFFFFFFFF,
        din64 => agg_result_V_i_i_fu_347_p65,
        dout => agg_result_V_i_i_fu_347_p66);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter1_tmp_keep_V_reg_234_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_nbreadreq_fu_200_p3 = ap_const_lv1_1) and (icmp_ln891_fu_309_p2 = ap_const_lv1_0) and (icmp_ln254_fu_277_p2 = ap_const_lv1_0) and (cl_state = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                ap_phi_reg_pp0_iter1_tmp_keep_V_reg_234 <= trunc_ln209_fu_481_p1;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln254_fu_277_p2 = ap_const_lv1_1) and (tmp_nbreadreq_fu_200_p3 = ap_const_lv1_1) and (cl_state = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln891_fu_309_p2 = ap_const_lv1_1) and (tmp_nbreadreq_fu_200_p3 = ap_const_lv1_1) and (icmp_ln254_fu_277_p2 = ap_const_lv1_0) and (cl_state = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
                ap_phi_reg_pp0_iter1_tmp_keep_V_reg_234 <= ipDataDropFifo_V_dout(71 downto 64);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                ap_phi_reg_pp0_iter1_tmp_keep_V_reg_234 <= ap_phi_reg_pp0_iter0_tmp_keep_V_reg_234;
            end if; 
        end if;
    end process;

    cl_state_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_419)) then
                if (((grp_fu_245_p3 = ap_const_lv1_1) and (cl_state = ap_const_lv1_1))) then 
                    cl_state <= ap_const_lv1_0;
                elsif ((ap_const_boolean_1 = ap_condition_422)) then 
                    cl_state <= ap_const_lv1_1;
                end if;
            end if; 
        end if;
    end process;

    tmp_last_V_reg_221_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_nbreadreq_fu_200_p3 = ap_const_lv1_1) and (icmp_ln891_fu_309_p2 = ap_const_lv1_0) and (icmp_ln254_fu_277_p2 = ap_const_lv1_0) and (cl_state = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                tmp_last_V_reg_221 <= ap_const_lv1_1;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln254_fu_277_p2 = ap_const_lv1_1) and (tmp_nbreadreq_fu_200_p3 = ap_const_lv1_1) and (cl_state = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln891_fu_309_p2 = ap_const_lv1_1) and (tmp_nbreadreq_fu_200_p3 = ap_const_lv1_1) and (icmp_ln254_fu_277_p2 = ap_const_lv1_0) and (cl_state = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
                tmp_last_V_reg_221 <= ipDataDropFifo_V_dout(72 downto 72);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                tmp_last_V_reg_221 <= ap_phi_reg_pp0_iter0_tmp_last_V_reg_221;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                cl_state_load_reg_555 <= cl_state;
                tmp_reg_559 <= tmp_nbreadreq_fu_200_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln254_fu_277_p2 = ap_const_lv1_1) and (tmp_nbreadreq_fu_200_p3 = ap_const_lv1_1) and (cl_state = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                cl_totalLength_V <= p_Result_s_fu_505_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_nbreadreq_fu_200_p3 = ap_const_lv1_1) and (cl_state = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                cl_wordCount_V <= select_ln275_fu_525_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_nbreadreq_fu_200_p3 = ap_const_lv1_1) and (cl_state = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                p_Val2_s_reg_563 <= p_Val2_s_fu_259_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln700_fu_519_p2 <= std_logic_vector(unsigned(cl_wordCount_V) + unsigned(ap_const_lv16_1));
    agg_result_V_i_i_fu_347_p65 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(leftLength_V_fu_337_p2),6));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, ap_done_reg, ap_enable_reg_pp0_iter1, ipDataDropFifo_V_empty_n, ap_predicate_op7_read_state1, ap_predicate_op41_read_state1, ipDataCutFifo_V_full_n, ap_predicate_op51_write_state2)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((ipDataCutFifo_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_predicate_op51_write_state2 = ap_const_boolean_1)) or ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((ipDataDropFifo_V_empty_n = ap_const_logic_0) and (ap_predicate_op41_read_state1 = ap_const_boolean_1)) or ((ipDataDropFifo_V_empty_n = ap_const_logic_0) and (ap_predicate_op7_read_state1 = ap_const_boolean_1)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_done_reg, ap_enable_reg_pp0_iter1, ipDataDropFifo_V_empty_n, ap_predicate_op7_read_state1, ap_predicate_op41_read_state1, ipDataCutFifo_V_full_n, ap_predicate_op51_write_state2)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ipDataCutFifo_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_predicate_op51_write_state2 = ap_const_boolean_1)) or ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((ipDataDropFifo_V_empty_n = ap_const_logic_0) and (ap_predicate_op41_read_state1 = ap_const_boolean_1)) or ((ipDataDropFifo_V_empty_n = ap_const_logic_0) and (ap_predicate_op7_read_state1 = ap_const_boolean_1)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_done_reg, ap_enable_reg_pp0_iter1, ipDataDropFifo_V_empty_n, ap_predicate_op7_read_state1, ap_predicate_op41_read_state1, ipDataCutFifo_V_full_n, ap_predicate_op51_write_state2)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ipDataCutFifo_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_predicate_op51_write_state2 = ap_const_boolean_1)) or ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((ipDataDropFifo_V_empty_n = ap_const_logic_0) and (ap_predicate_op41_read_state1 = ap_const_boolean_1)) or ((ipDataDropFifo_V_empty_n = ap_const_logic_0) and (ap_predicate_op7_read_state1 = ap_const_boolean_1)))));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start, ap_done_reg, ipDataDropFifo_V_empty_n, ap_predicate_op7_read_state1, ap_predicate_op41_read_state1)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((ipDataDropFifo_V_empty_n = ap_const_logic_0) and (ap_predicate_op41_read_state1 = ap_const_boolean_1)) or ((ipDataDropFifo_V_empty_n = ap_const_logic_0) and (ap_predicate_op7_read_state1 = ap_const_boolean_1)));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(ipDataCutFifo_V_full_n, ap_predicate_op51_write_state2)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((ipDataCutFifo_V_full_n = ap_const_logic_0) and (ap_predicate_op51_write_state2 = ap_const_boolean_1));
    end process;


    ap_condition_419_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, tmp_nbreadreq_fu_200_p3, ap_block_pp0_stage0_11001)
    begin
                ap_condition_419 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_nbreadreq_fu_200_p3 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_422_assign_proc : process(cl_state, grp_fu_245_p3, icmp_ln254_fu_277_p2, icmp_ln891_fu_309_p2)
    begin
                ap_condition_422 <= ((icmp_ln891_fu_309_p2 = ap_const_lv1_0) and (icmp_ln254_fu_277_p2 = ap_const_lv1_0) and (grp_fu_245_p3 = ap_const_lv1_0) and (cl_state = ap_const_lv1_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_tmp_last_V_phi_fu_224_p6_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ipDataDropFifo_V_dout, tmp_nbreadreq_fu_200_p3, cl_state, ap_block_pp0_stage0, icmp_ln254_fu_277_p2, icmp_ln891_fu_309_p2, ap_phi_reg_pp0_iter0_tmp_last_V_reg_221)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_nbreadreq_fu_200_p3 = ap_const_lv1_1) and (icmp_ln891_fu_309_p2 = ap_const_lv1_0) and (icmp_ln254_fu_277_p2 = ap_const_lv1_0) and (cl_state = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_tmp_last_V_phi_fu_224_p6 <= ap_const_lv1_1;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln254_fu_277_p2 = ap_const_lv1_1) and (tmp_nbreadreq_fu_200_p3 = ap_const_lv1_1) and (cl_state = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln891_fu_309_p2 = ap_const_lv1_1) and (tmp_nbreadreq_fu_200_p3 = ap_const_lv1_1) and (icmp_ln254_fu_277_p2 = ap_const_lv1_0) and (cl_state = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            ap_phi_mux_tmp_last_V_phi_fu_224_p6 <= ipDataDropFifo_V_dout(72 downto 72);
        else 
            ap_phi_mux_tmp_last_V_phi_fu_224_p6 <= ap_phi_reg_pp0_iter0_tmp_last_V_reg_221;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_tmp_keep_V_reg_234 <= "XXXXXXXX";
    ap_phi_reg_pp0_iter0_tmp_last_V_reg_221 <= "X";

    ap_predicate_op41_read_state1_assign_proc : process(tmp_nbreadreq_fu_200_p3, cl_state)
    begin
                ap_predicate_op41_read_state1 <= ((tmp_nbreadreq_fu_200_p3 = ap_const_lv1_1) and (cl_state = ap_const_lv1_1));
    end process;


    ap_predicate_op51_write_state2_assign_proc : process(cl_state_load_reg_555, tmp_reg_559)
    begin
                ap_predicate_op51_write_state2 <= ((tmp_reg_559 = ap_const_lv1_1) and (cl_state_load_reg_555 = ap_const_lv1_0));
    end process;


    ap_predicate_op7_read_state1_assign_proc : process(tmp_nbreadreq_fu_200_p3, cl_state)
    begin
                ap_predicate_op7_read_state1 <= ((tmp_nbreadreq_fu_200_p3 = ap_const_lv1_1) and (cl_state = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_245_p3 <= ipDataDropFifo_V_dout(72 downto 72);
    icmp_ln254_fu_277_p2 <= "1" when (cl_wordCount_V = ap_const_lv16_0) else "0";
    icmp_ln891_fu_309_p2 <= "1" when (unsigned(ret_V_1_fu_297_p3) < unsigned(zext_ln891_fu_305_p1)) else "0";

    ipDataCutFifo_V_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ipDataCutFifo_V_full_n, ap_predicate_op51_write_state2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op51_write_state2 = ap_const_boolean_1))) then 
            ipDataCutFifo_V_blk_n <= ipDataCutFifo_V_full_n;
        else 
            ipDataCutFifo_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ipDataCutFifo_V_din <= ((tmp_last_V_reg_221 & ap_phi_reg_pp0_iter1_tmp_keep_V_reg_234) & p_Val2_s_reg_563);

    ipDataCutFifo_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op51_write_state2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op51_write_state2 = ap_const_boolean_1))) then 
            ipDataCutFifo_V_write <= ap_const_logic_1;
        else 
            ipDataCutFifo_V_write <= ap_const_logic_0;
        end if; 
    end process;


    ipDataDropFifo_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_pp0_stage0, ipDataDropFifo_V_empty_n, ap_predicate_op7_read_state1, ap_predicate_op41_read_state1, ap_block_pp0_stage0)
    begin
        if (((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op41_read_state1 = ap_const_boolean_1)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op7_read_state1 = ap_const_boolean_1)))) then 
            ipDataDropFifo_V_blk_n <= ipDataDropFifo_V_empty_n;
        else 
            ipDataDropFifo_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ipDataDropFifo_V_read_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_predicate_op7_read_state1, ap_predicate_op41_read_state1, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op41_read_state1 = ap_const_boolean_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op7_read_state1 = ap_const_boolean_1)))) then 
            ipDataDropFifo_V_read <= ap_const_logic_1;
        else 
            ipDataDropFifo_V_read <= ap_const_logic_0;
        end if; 
    end process;

    leftLength_V_fu_337_p2 <= std_logic_vector(unsigned(trunc_ln214_1_fu_333_p1) - unsigned(shl_ln_fu_325_p3));
    p_Result_15_i_fu_495_p4 <= ipDataDropFifo_V_dout(23 downto 16);
    p_Result_i_fu_485_p4 <= ipDataDropFifo_V_dout(31 downto 24);
    p_Result_s_fu_505_p3 <= (p_Result_15_i_fu_495_p4 & p_Result_i_fu_485_p4);
    p_Val2_s_fu_259_p1 <= ipDataDropFifo_V_dout(64 - 1 downto 0);
    ret_V_1_fu_297_p3 <= (ret_V_fu_291_p2 & ap_const_lv3_0);
    ret_V_fu_291_p2 <= std_logic_vector(unsigned(zext_ln215_fu_287_p1) + unsigned(ap_const_lv17_1));
    select_ln275_fu_525_p3 <= 
        ap_const_lv16_0 when (ap_phi_mux_tmp_last_V_phi_fu_224_p6(0) = '1') else 
        add_ln700_fu_519_p2;
    shl_ln_fu_325_p3 <= (trunc_ln214_fu_321_p1 & ap_const_lv3_0);
    tmp_nbreadreq_fu_200_p3 <= (0=>(ipDataDropFifo_V_empty_n), others=>'-');
    trunc_ln209_fu_481_p1 <= agg_result_V_i_i_fu_347_p66(8 - 1 downto 0);
    trunc_ln214_1_fu_333_p1 <= cl_totalLength_V(4 - 1 downto 0);
    trunc_ln214_fu_321_p1 <= cl_wordCount_V(1 - 1 downto 0);
    zext_ln215_fu_287_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cl_wordCount_V),17));
    zext_ln891_fu_305_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cl_totalLength_V),20));
end behav;
