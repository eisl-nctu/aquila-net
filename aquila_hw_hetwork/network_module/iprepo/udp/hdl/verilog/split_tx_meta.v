// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module split_tx_meta (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        metaIn_V_TVALID,
        tx_udpMetaFifo_V_the_din,
        tx_udpMetaFifo_V_the_full_n,
        tx_udpMetaFifo_V_the_write,
        tx_udpMetaFifo_V_my_s_din,
        tx_udpMetaFifo_V_my_s_full_n,
        tx_udpMetaFifo_V_my_s_write,
        tx_udpMetaFifo_V_len_din,
        tx_udpMetaFifo_V_len_full_n,
        tx_udpMetaFifo_V_len_write,
        tx_udpMetaFifo_V_val_din,
        tx_udpMetaFifo_V_val_full_n,
        tx_udpMetaFifo_V_val_write,
        metaOut0_V_TREADY,
        metaIn_V_TDATA,
        metaIn_V_TREADY,
        metaOut0_V_TDATA,
        metaOut0_V_TVALID
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input   metaIn_V_TVALID;
output  [15:0] tx_udpMetaFifo_V_the_din;
input   tx_udpMetaFifo_V_the_full_n;
output   tx_udpMetaFifo_V_the_write;
output  [15:0] tx_udpMetaFifo_V_my_s_din;
input   tx_udpMetaFifo_V_my_s_full_n;
output   tx_udpMetaFifo_V_my_s_write;
output  [15:0] tx_udpMetaFifo_V_len_din;
input   tx_udpMetaFifo_V_len_full_n;
output   tx_udpMetaFifo_V_len_write;
output  [0:0] tx_udpMetaFifo_V_val_din;
input   tx_udpMetaFifo_V_val_full_n;
output   tx_udpMetaFifo_V_val_write;
input   metaOut0_V_TREADY;
input  [175:0] metaIn_V_TDATA;
output   metaIn_V_TREADY;
output  [47:0] metaOut0_V_TDATA;
output   metaOut0_V_TVALID;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg tx_udpMetaFifo_V_the_write;
reg tx_udpMetaFifo_V_my_s_write;
reg tx_udpMetaFifo_V_len_write;
reg tx_udpMetaFifo_V_val_write;
reg metaIn_V_TREADY;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire   [0:0] tmp_nbreadreq_fu_66_p3;
reg    ap_block_state1_pp0_stage0_iter0;
wire    io_acc_block_signal_op14;
reg   [0:0] tmp_reg_158;
reg    ap_block_state2_pp0_stage0_iter1;
wire    metaOut0_V_1_ack_in;
reg    ap_block_state2_io;
wire    metaOut0_V_1_ack_out;
reg   [1:0] metaOut0_V_1_state;
reg    ap_block_state3_pp0_stage0_iter2;
reg   [0:0] tmp_reg_158_pp0_iter1_reg;
reg    ap_block_state3_io;
reg    ap_block_pp0_stage0_11001;
reg   [47:0] metaOut0_V_1_data_out;
reg    metaOut0_V_1_vld_in;
wire    metaOut0_V_1_vld_out;
reg   [47:0] metaOut0_V_1_payload_A;
reg   [47:0] metaOut0_V_1_payload_B;
reg    metaOut0_V_1_sel_rd;
reg    metaOut0_V_1_sel_wr;
wire    metaOut0_V_1_sel;
wire    metaOut0_V_1_load_A;
wire    metaOut0_V_1_load_B;
wire    metaOut0_V_1_state_cmp_full;
reg    metaIn_V_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    metaOut0_V_TDATA_blk_n;
reg    tx_udpMetaFifo_V_the_blk_n;
reg    tx_udpMetaFifo_V_my_s_blk_n;
reg    tx_udpMetaFifo_V_len_blk_n;
reg    tx_udpMetaFifo_V_val_blk_n;
reg   [15:0] tmp_their_port_V_reg_162;
reg   [15:0] tmp_my_port_V_reg_167;
reg   [15:0] tmp_length_V_load_ne_reg_172;
reg   [31:0] tmp_their_address_V_reg_177;
wire   [47:0] tmp_1_fu_150_p3;
reg    ap_block_pp0_stage0_subdone;
reg    ap_block_pp0_stage0_01001;
wire   [15:0] tempLen_V_fu_144_p2;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 metaOut0_V_1_state = 2'd0;
#0 metaOut0_V_1_sel_rd = 1'b0;
#0 metaOut0_V_1_sel_wr = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        metaOut0_V_1_sel_rd <= 1'b0;
    end else begin
        if (((metaOut0_V_1_ack_out == 1'b1) & (metaOut0_V_1_vld_out == 1'b1))) begin
            metaOut0_V_1_sel_rd <= ~metaOut0_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        metaOut0_V_1_sel_wr <= 1'b0;
    end else begin
        if (((metaOut0_V_1_ack_in == 1'b1) & (metaOut0_V_1_vld_in == 1'b1))) begin
            metaOut0_V_1_sel_wr <= ~metaOut0_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        metaOut0_V_1_state <= 2'd0;
    end else begin
        if ((((metaOut0_V_1_state == 2'd3) & (metaOut0_V_1_vld_in == 1'b0) & (metaOut0_V_1_ack_out == 1'b1)) | ((metaOut0_V_1_state == 2'd2) & (metaOut0_V_1_vld_in == 1'b0)))) begin
            metaOut0_V_1_state <= 2'd2;
        end else if ((((metaOut0_V_1_state == 2'd1) & (metaOut0_V_TREADY == 1'b0)) | ((metaOut0_V_1_state == 2'd3) & (metaOut0_V_TREADY == 1'b0) & (metaOut0_V_1_vld_in == 1'b1)))) begin
            metaOut0_V_1_state <= 2'd1;
        end else if ((((metaOut0_V_1_state == 2'd1) & (metaOut0_V_1_ack_out == 1'b1)) | (~((metaOut0_V_1_vld_in == 1'b0) & (metaOut0_V_1_ack_out == 1'b1)) & ~((metaOut0_V_TREADY == 1'b0) & (metaOut0_V_1_vld_in == 1'b1)) & (metaOut0_V_1_state == 2'd3)) | ((metaOut0_V_1_state == 2'd2) & (metaOut0_V_1_vld_in == 1'b1)))) begin
            metaOut0_V_1_state <= 2'd3;
        end else begin
            metaOut0_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((metaOut0_V_1_load_A == 1'b1)) begin
        metaOut0_V_1_payload_A <= tmp_1_fu_150_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((metaOut0_V_1_load_B == 1'b1)) begin
        metaOut0_V_1_payload_B <= tmp_1_fu_150_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_nbreadreq_fu_66_p3 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_length_V_load_ne_reg_172 <= {{metaIn_V_TDATA[175:160]}};
        tmp_my_port_V_reg_167 <= {{metaIn_V_TDATA[159:144]}};
        tmp_their_address_V_reg_177 <= {{metaIn_V_TDATA[127:96]}};
        tmp_their_port_V_reg_162 <= {{metaIn_V_TDATA[143:128]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_reg_158 <= tmp_nbreadreq_fu_66_p3;
        tmp_reg_158_pp0_iter1_reg <= tmp_reg_158;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (tmp_nbreadreq_fu_66_p3 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        metaIn_V_TDATA_blk_n = metaIn_V_TVALID;
    end else begin
        metaIn_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_nbreadreq_fu_66_p3 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        metaIn_V_TREADY = 1'b1;
    end else begin
        metaIn_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((metaOut0_V_1_sel == 1'b1)) begin
        metaOut0_V_1_data_out = metaOut0_V_1_payload_B;
    end else begin
        metaOut0_V_1_data_out = metaOut0_V_1_payload_A;
    end
end

always @ (*) begin
    if (((tmp_reg_158 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        metaOut0_V_1_vld_in = 1'b1;
    end else begin
        metaOut0_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_reg_158_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((tmp_reg_158 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)))) begin
        metaOut0_V_TDATA_blk_n = metaOut0_V_1_state[1'd1];
    end else begin
        metaOut0_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_reg_158 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        tx_udpMetaFifo_V_len_blk_n = tx_udpMetaFifo_V_len_full_n;
    end else begin
        tx_udpMetaFifo_V_len_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_reg_158 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tx_udpMetaFifo_V_len_write = 1'b1;
    end else begin
        tx_udpMetaFifo_V_len_write = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_reg_158 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        tx_udpMetaFifo_V_my_s_blk_n = tx_udpMetaFifo_V_my_s_full_n;
    end else begin
        tx_udpMetaFifo_V_my_s_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_reg_158 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tx_udpMetaFifo_V_my_s_write = 1'b1;
    end else begin
        tx_udpMetaFifo_V_my_s_write = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_reg_158 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        tx_udpMetaFifo_V_the_blk_n = tx_udpMetaFifo_V_the_full_n;
    end else begin
        tx_udpMetaFifo_V_the_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_reg_158 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tx_udpMetaFifo_V_the_write = 1'b1;
    end else begin
        tx_udpMetaFifo_V_the_write = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_reg_158 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        tx_udpMetaFifo_V_val_blk_n = tx_udpMetaFifo_V_val_full_n;
    end else begin
        tx_udpMetaFifo_V_val_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_reg_158 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tx_udpMetaFifo_V_val_write = 1'b1;
    end else begin
        tx_udpMetaFifo_V_val_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((metaOut0_V_1_state == 2'd1) | ((metaOut0_V_1_state == 2'd3) & (metaOut0_V_TREADY == 1'b0)))) | ((tmp_reg_158 == 1'd1) & (io_acc_block_signal_op14 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((tmp_nbreadreq_fu_66_p3 == 1'd1) & (metaIn_V_TVALID == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((metaOut0_V_1_state == 2'd1) | (1'b1 == ap_block_state3_io) | ((metaOut0_V_1_state == 2'd3) & (metaOut0_V_TREADY == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state2_io) | ((tmp_reg_158 == 1'd1) & (io_acc_block_signal_op14 == 1'b0)))) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((tmp_nbreadreq_fu_66_p3 == 1'd1) & (metaIn_V_TVALID == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((metaOut0_V_1_state == 2'd1) | (1'b1 == ap_block_state3_io) | ((metaOut0_V_1_state == 2'd3) & (metaOut0_V_TREADY == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state2_io) | ((tmp_reg_158 == 1'd1) & (io_acc_block_signal_op14 == 1'b0)))) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((tmp_nbreadreq_fu_66_p3 == 1'd1) & (metaIn_V_TVALID == 1'b0)))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((tmp_nbreadreq_fu_66_p3 == 1'd1) & (metaIn_V_TVALID == 1'b0)));
end

always @ (*) begin
    ap_block_state2_io = ((tmp_reg_158 == 1'd1) & (metaOut0_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((tmp_reg_158 == 1'd1) & (io_acc_block_signal_op14 == 1'b0));
end

always @ (*) begin
    ap_block_state3_io = ((tmp_reg_158_pp0_iter1_reg == 1'd1) & (metaOut0_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((metaOut0_V_1_state == 2'd1) | ((metaOut0_V_1_state == 2'd3) & (metaOut0_V_TREADY == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign io_acc_block_signal_op14 = (tx_udpMetaFifo_V_val_full_n & tx_udpMetaFifo_V_the_full_n & tx_udpMetaFifo_V_my_s_full_n & tx_udpMetaFifo_V_len_full_n);

assign metaOut0_V_1_ack_in = metaOut0_V_1_state[1'd1];

assign metaOut0_V_1_ack_out = metaOut0_V_TREADY;

assign metaOut0_V_1_load_A = (metaOut0_V_1_state_cmp_full & ~metaOut0_V_1_sel_wr);

assign metaOut0_V_1_load_B = (metaOut0_V_1_state_cmp_full & metaOut0_V_1_sel_wr);

assign metaOut0_V_1_sel = metaOut0_V_1_sel_rd;

assign metaOut0_V_1_state_cmp_full = ((metaOut0_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign metaOut0_V_1_vld_out = metaOut0_V_1_state[1'd0];

assign metaOut0_V_TDATA = metaOut0_V_1_data_out;

assign metaOut0_V_TVALID = metaOut0_V_1_state[1'd0];

assign tempLen_V_fu_144_p2 = (tmp_length_V_load_ne_reg_172 + 16'd8);

assign tmp_1_fu_150_p3 = {{tempLen_V_fu_144_p2}, {tmp_their_address_V_reg_177}};

assign tmp_nbreadreq_fu_66_p3 = metaIn_V_TVALID;

assign tx_udpMetaFifo_V_len_din = tempLen_V_fu_144_p2;

assign tx_udpMetaFifo_V_my_s_din = tmp_my_port_V_reg_167;

assign tx_udpMetaFifo_V_the_din = tmp_their_port_V_reg_162;

assign tx_udpMetaFifo_V_val_din = 1'd1;

endmodule //split_tx_meta
