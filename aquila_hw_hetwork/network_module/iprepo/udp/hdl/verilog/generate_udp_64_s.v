// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module generate_udp_64_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        tx_shift2udpFifo_V_d_dout,
        tx_shift2udpFifo_V_d_empty_n,
        tx_shift2udpFifo_V_d_read,
        tx_shift2udpFifo_V_k_dout,
        tx_shift2udpFifo_V_k_empty_n,
        tx_shift2udpFifo_V_k_read,
        tx_shift2udpFifo_V_l_dout,
        tx_shift2udpFifo_V_l_empty_n,
        tx_shift2udpFifo_V_l_read,
        tx_udpMetaFifo_V_the_dout,
        tx_udpMetaFifo_V_the_empty_n,
        tx_udpMetaFifo_V_the_read,
        tx_udpMetaFifo_V_my_s_dout,
        tx_udpMetaFifo_V_my_s_empty_n,
        tx_udpMetaFifo_V_my_s_read,
        tx_udpMetaFifo_V_len_dout,
        tx_udpMetaFifo_V_len_empty_n,
        tx_udpMetaFifo_V_len_read,
        tx_udpMetaFifo_V_val_dout,
        tx_udpMetaFifo_V_val_empty_n,
        tx_udpMetaFifo_V_val_read,
        m_axis_tx_data_TREADY,
        m_axis_tx_data_TDATA,
        m_axis_tx_data_TVALID,
        m_axis_tx_data_TKEEP,
        m_axis_tx_data_TLAST
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [63:0] tx_shift2udpFifo_V_d_dout;
input   tx_shift2udpFifo_V_d_empty_n;
output   tx_shift2udpFifo_V_d_read;
input  [7:0] tx_shift2udpFifo_V_k_dout;
input   tx_shift2udpFifo_V_k_empty_n;
output   tx_shift2udpFifo_V_k_read;
input  [0:0] tx_shift2udpFifo_V_l_dout;
input   tx_shift2udpFifo_V_l_empty_n;
output   tx_shift2udpFifo_V_l_read;
input  [15:0] tx_udpMetaFifo_V_the_dout;
input   tx_udpMetaFifo_V_the_empty_n;
output   tx_udpMetaFifo_V_the_read;
input  [15:0] tx_udpMetaFifo_V_my_s_dout;
input   tx_udpMetaFifo_V_my_s_empty_n;
output   tx_udpMetaFifo_V_my_s_read;
input  [15:0] tx_udpMetaFifo_V_len_dout;
input   tx_udpMetaFifo_V_len_empty_n;
output   tx_udpMetaFifo_V_len_read;
input  [0:0] tx_udpMetaFifo_V_val_dout;
input   tx_udpMetaFifo_V_val_empty_n;
output   tx_udpMetaFifo_V_val_read;
input   m_axis_tx_data_TREADY;
output  [63:0] m_axis_tx_data_TDATA;
output   m_axis_tx_data_TVALID;
output  [7:0] m_axis_tx_data_TKEEP;
output  [0:0] m_axis_tx_data_TLAST;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg tx_shift2udpFifo_V_d_read;
reg tx_shift2udpFifo_V_k_read;
reg tx_shift2udpFifo_V_l_read;
reg tx_udpMetaFifo_V_the_read;
reg tx_udpMetaFifo_V_my_s_read;
reg tx_udpMetaFifo_V_len_read;
reg tx_udpMetaFifo_V_val_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    io_acc_block_signal_op8;
wire   [1:0] state_load_load_fu_228_p1;
wire   [0:0] grp_nbreadreq_fu_138_p5;
reg    ap_predicate_op8_read_state1;
wire    io_acc_block_signal_op14;
reg    ap_predicate_op14_read_state1;
wire    io_acc_block_signal_op94;
wire   [0:0] tmp_nbreadreq_fu_160_p6;
reg    ap_predicate_op94_read_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    output_V_data_V_1_ack_in;
reg   [1:0] state_load_reg_959;
reg   [0:0] tmp_16_reg_963;
reg    ap_predicate_op115_write_state2;
reg   [0:0] tmp_9_reg_977;
reg    ap_predicate_op127_write_state2;
reg    ap_block_state2_io;
wire    output_V_data_V_1_ack_out;
reg   [1:0] output_V_data_V_1_state;
wire    output_V_keep_V_1_ack_out;
reg   [1:0] output_V_keep_V_1_state;
wire    output_V_last_V_1_ack_out;
reg   [1:0] output_V_last_V_1_state;
reg    ap_block_state3_pp0_stage0_iter2;
reg   [1:0] state_load_reg_959_pp0_iter1_reg;
reg   [0:0] tmp_16_reg_963_pp0_iter1_reg;
reg    ap_predicate_op152_write_state3;
reg   [0:0] tmp_9_reg_977_pp0_iter1_reg;
reg    ap_predicate_op156_write_state3;
reg    ap_block_state3_io;
reg    ap_block_pp0_stage0_11001;
reg   [63:0] output_V_data_V_1_data_in;
reg   [63:0] output_V_data_V_1_data_out;
reg    output_V_data_V_1_vld_in;
wire    output_V_data_V_1_vld_out;
reg   [63:0] output_V_data_V_1_payload_A;
reg   [63:0] output_V_data_V_1_payload_B;
reg    output_V_data_V_1_sel_rd;
reg    output_V_data_V_1_sel_wr;
wire    output_V_data_V_1_sel;
wire    output_V_data_V_1_load_A;
wire    output_V_data_V_1_load_B;
wire    output_V_data_V_1_state_cmp_full;
reg   [7:0] output_V_keep_V_1_data_in;
reg   [7:0] output_V_keep_V_1_data_out;
reg    output_V_keep_V_1_vld_in;
wire    output_V_keep_V_1_vld_out;
wire    output_V_keep_V_1_ack_in;
reg   [7:0] output_V_keep_V_1_payload_A;
reg   [7:0] output_V_keep_V_1_payload_B;
reg    output_V_keep_V_1_sel_rd;
reg    output_V_keep_V_1_sel_wr;
wire    output_V_keep_V_1_sel;
wire    output_V_keep_V_1_load_A;
wire    output_V_keep_V_1_load_B;
wire    output_V_keep_V_1_state_cmp_full;
reg   [0:0] output_V_last_V_1_data_in;
reg   [0:0] output_V_last_V_1_data_out;
reg    output_V_last_V_1_vld_in;
wire    output_V_last_V_1_vld_out;
wire    output_V_last_V_1_ack_in;
reg   [0:0] output_V_last_V_1_payload_A;
reg   [0:0] output_V_last_V_1_payload_B;
reg    output_V_last_V_1_sel_rd;
reg    output_V_last_V_1_sel_wr;
wire    output_V_last_V_1_sel;
wire    output_V_last_V_1_load_A;
wire    output_V_last_V_1_load_B;
wire    output_V_last_V_1_state_cmp_full;
reg   [1:0] state;
reg   [15:0] header_idx;
reg   [63:0] header_header_V;
reg    m_axis_tx_data_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    tx_udpMetaFifo_V_the_blk_n;
reg    tx_udpMetaFifo_V_my_s_blk_n;
reg    tx_udpMetaFifo_V_len_blk_n;
reg    tx_udpMetaFifo_V_val_blk_n;
reg    tx_shift2udpFifo_V_d_blk_n;
reg    tx_shift2udpFifo_V_k_blk_n;
reg    tx_shift2udpFifo_V_l_blk_n;
reg   [7:0] reg_223;
reg   [63:0] tmp_data_V_4_reg_967;
wire   [0:0] grp_fu_205_p1;
reg   [0:0] tmp_last_V_2_reg_972;
reg   [63:0] empty_34_reg_981_0;
reg   [0:0] tmp_last_V_reg_986;
wire   [0:0] icmp_ln76_1_fu_274_p2;
reg   [0:0] icmp_ln76_1_reg_991;
wire   [6:0] sub_ln647_3_fu_356_p2;
reg   [6:0] sub_ln647_3_reg_996;
wire   [63:0] lshr_ln647_fu_366_p2;
reg   [63:0] lshr_ln647_reg_1001;
wire   [6:0] sub_ln647_6_fu_442_p2;
reg   [6:0] sub_ln647_6_reg_1006;
wire   [63:0] lshr_ln647_2_fu_452_p2;
reg   [63:0] lshr_ln647_2_reg_1011;
wire   [0:0] and_ln82_1_fu_464_p2;
reg   [0:0] and_ln82_1_reg_1016;
wire   [21:0] Lo_assign_fu_516_p3;
reg   [21:0] Lo_assign_reg_1021;
wire   [21:0] select_ln82_1_fu_622_p3;
reg   [21:0] select_ln82_1_reg_1026;
wire   [6:0] tmp_12_fu_630_p3;
reg   [6:0] tmp_12_reg_1031;
wire   [6:0] trunc_ln82_fu_638_p1;
reg   [6:0] trunc_ln82_reg_1038;
wire   [6:0] sub_ln82_1_fu_642_p2;
reg   [6:0] sub_ln82_1_reg_1044;
wire   [0:0] or_ln887_fu_688_p2;
wire   [63:0] ret_V_fu_870_p3;
wire   [63:0] ret_V_4_fu_952_p2;
reg    ap_block_pp0_stage0_subdone;
wire   [1:0] select_ln223_fu_498_p3;
wire   [15:0] select_ln82_2_fu_478_p3;
wire   [15:0] select_ln82_fu_614_p3;
wire   [63:0] p_Result_s_fu_808_p5;
reg    ap_block_pp0_stage0_01001;
wire   [21:0] Lo_assign_1_fu_256_p3;
wire   [22:0] zext_ln76_1_fu_264_p1;
wire   [22:0] add_ln76_1_fu_268_p2;
wire   [21:0] or_ln78_1_fu_280_p2;
wire   [0:0] trunc_ln76_2_fu_252_p1;
wire   [6:0] tmp_17_fu_292_p3;
wire   [6:0] trunc_ln647_4_fu_300_p1;
wire   [0:0] icmp_ln647_fu_286_p2;
wire   [6:0] sub_ln647_fu_314_p2;
wire   [6:0] sub_ln647_2_fu_326_p2;
reg   [63:0] tmp_18_fu_304_p4;
wire   [6:0] sub_ln647_1_fu_320_p2;
wire   [6:0] select_ln647_fu_332_p3;
wire   [6:0] select_ln647_2_fu_348_p3;
wire   [63:0] select_ln647_1_fu_340_p3;
wire   [63:0] zext_ln647_fu_362_p1;
wire   [25:0] zext_ln647_2_fu_372_p1;
wire   [0:0] trunc_ln76_1_fu_248_p1;
wire   [6:0] tmp_19_fu_382_p3;
wire   [0:0] icmp_ln647_1_fu_376_p2;
wire   [6:0] add_ln647_fu_400_p2;
wire   [6:0] sub_ln647_5_fu_412_p2;
reg   [63:0] tmp_20_fu_390_p4;
wire   [6:0] sub_ln647_4_fu_406_p2;
wire   [6:0] select_ln647_3_fu_418_p3;
wire   [6:0] select_ln647_5_fu_434_p3;
wire   [63:0] select_ln647_4_fu_426_p3;
wire   [63:0] zext_ln647_3_fu_448_p1;
wire   [0:0] grp_fu_218_p2;
wire   [0:0] xor_ln76_1_fu_458_p2;
wire   [15:0] grp_fu_213_p2;
wire   [15:0] select_ln76_1_fu_470_p3;
wire   [0:0] xor_ln223_fu_492_p2;
wire   [22:0] zext_ln76_fu_524_p1;
wire   [22:0] add_ln76_fu_528_p2;
wire   [21:0] shl_ln_fu_546_p3;
wire   [22:0] zext_ln80_fu_554_p1;
wire   [22:0] sub_ln80_fu_558_p2;
wire   [22:0] sub_ln80_1_fu_572_p2;
wire   [7:0] trunc_ln80_1_fu_578_p4;
wire   [0:0] icmp_ln76_fu_534_p2;
wire   [0:0] xor_ln76_fu_594_p2;
wire   [0:0] and_ln82_fu_600_p2;
wire   [15:0] select_ln76_fu_606_p3;
wire   [21:0] or_ln78_fu_540_p2;
wire   [0:0] trunc_ln76_fu_512_p1;
wire   [7:0] sub_ln80_2_fu_588_p2;
wire   [0:0] tmp_11_fu_564_p3;
wire   [4:0] tmp_14_fu_654_p4;
wire   [4:0] tmp_15_fu_664_p4;
wire   [4:0] select_ln80_fu_674_p3;
wire   [0:0] icmp_ln887_fu_682_p2;
wire   [7:0] trunc_ln647_fu_728_p1;
wire   [7:0] p_Result_10_i_i_i_fu_718_p4;
wire   [15:0] agg_result_V_0_1_i_i_fu_732_p3;
wire   [7:0] trunc_ln647_2_fu_762_p1;
wire   [7:0] p_Result_10_i_i18_s_fu_752_p4;
wire   [63:0] p_Result_6_fu_740_p5;
wire   [15:0] agg_result_V_0_1_i_i_1_fu_766_p3;
wire   [7:0] trunc_ln647_3_fu_796_p1;
wire   [7:0] p_Result_10_i_i23_s_fu_786_p4;
wire   [63:0] p_Result_7_fu_774_p5;
wire   [15:0] agg_result_V_0_1_i_i_2_fu_800_p3;
wire   [63:0] zext_ln647_1_fu_835_p1;
wire   [63:0] lshr_ln647_1_fu_838_p2;
wire   [63:0] zext_ln647_4_fu_849_p1;
wire   [63:0] lshr_ln647_3_fu_852_p2;
wire   [63:0] p_Result_8_fu_844_p2;
wire   [63:0] p_Result_5_fu_858_p2;
wire   [63:0] ret_V_2_fu_863_p3;
wire   [0:0] icmp_ln82_2_fu_882_p2;
wire   [6:0] sub_ln82_fu_896_p2;
wire   [6:0] sub_ln82_2_fu_900_p2;
reg   [63:0] tmp_13_fu_886_p4;
wire   [6:0] select_ln82_3_fu_904_p3;
wire   [6:0] select_ln82_5_fu_920_p3;
wire   [6:0] sub_ln82_3_fu_926_p2;
wire   [63:0] select_ln82_4_fu_912_p3;
wire   [63:0] zext_ln82_fu_932_p1;
wire   [63:0] zext_ln82_1_fu_936_p1;
wire   [63:0] lshr_ln82_fu_940_p2;
wire   [63:0] lshr_ln82_1_fu_946_p2;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_192;
reg    ap_condition_498;
reg    ap_condition_462;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 output_V_data_V_1_state = 2'd0;
#0 output_V_keep_V_1_state = 2'd0;
#0 output_V_last_V_1_state = 2'd0;
#0 output_V_data_V_1_sel_rd = 1'b0;
#0 output_V_data_V_1_sel_wr = 1'b0;
#0 output_V_keep_V_1_sel_rd = 1'b0;
#0 output_V_keep_V_1_sel_wr = 1'b0;
#0 output_V_last_V_1_sel_rd = 1'b0;
#0 output_V_last_V_1_sel_wr = 1'b0;
#0 state = 2'd0;
#0 header_idx = 16'd0;
#0 header_header_V = 64'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        output_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((output_V_data_V_1_vld_out == 1'b1) & (output_V_data_V_1_ack_out == 1'b1))) begin
            output_V_data_V_1_sel_rd <= ~output_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        output_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((output_V_data_V_1_vld_in == 1'b1) & (output_V_data_V_1_ack_in == 1'b1))) begin
            output_V_data_V_1_sel_wr <= ~output_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        output_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((output_V_data_V_1_state == 2'd3) & (output_V_data_V_1_vld_in == 1'b0) & (output_V_data_V_1_ack_out == 1'b1)) | ((output_V_data_V_1_state == 2'd2) & (output_V_data_V_1_vld_in == 1'b0)))) begin
            output_V_data_V_1_state <= 2'd2;
        end else if ((((m_axis_tx_data_TREADY == 1'b0) & (output_V_data_V_1_state == 2'd1)) | ((output_V_data_V_1_state == 2'd3) & (m_axis_tx_data_TREADY == 1'b0) & (output_V_data_V_1_vld_in == 1'b1)))) begin
            output_V_data_V_1_state <= 2'd1;
        end else if ((((output_V_data_V_1_ack_out == 1'b1) & (output_V_data_V_1_state == 2'd1)) | (~((output_V_data_V_1_vld_in == 1'b0) & (output_V_data_V_1_ack_out == 1'b1)) & ~((m_axis_tx_data_TREADY == 1'b0) & (output_V_data_V_1_vld_in == 1'b1)) & (output_V_data_V_1_state == 2'd3)) | ((output_V_data_V_1_state == 2'd2) & (output_V_data_V_1_vld_in == 1'b1)))) begin
            output_V_data_V_1_state <= 2'd3;
        end else begin
            output_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        output_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((output_V_keep_V_1_vld_out == 1'b1) & (output_V_keep_V_1_ack_out == 1'b1))) begin
            output_V_keep_V_1_sel_rd <= ~output_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        output_V_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((output_V_keep_V_1_ack_in == 1'b1) & (output_V_keep_V_1_vld_in == 1'b1))) begin
            output_V_keep_V_1_sel_wr <= ~output_V_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        output_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((output_V_keep_V_1_state == 2'd3) & (output_V_keep_V_1_vld_in == 1'b0) & (output_V_keep_V_1_ack_out == 1'b1)) | ((output_V_keep_V_1_state == 2'd2) & (output_V_keep_V_1_vld_in == 1'b0)))) begin
            output_V_keep_V_1_state <= 2'd2;
        end else if ((((m_axis_tx_data_TREADY == 1'b0) & (output_V_keep_V_1_state == 2'd1)) | ((output_V_keep_V_1_state == 2'd3) & (m_axis_tx_data_TREADY == 1'b0) & (output_V_keep_V_1_vld_in == 1'b1)))) begin
            output_V_keep_V_1_state <= 2'd1;
        end else if ((((output_V_keep_V_1_ack_out == 1'b1) & (output_V_keep_V_1_state == 2'd1)) | (~((output_V_keep_V_1_vld_in == 1'b0) & (output_V_keep_V_1_ack_out == 1'b1)) & ~((m_axis_tx_data_TREADY == 1'b0) & (output_V_keep_V_1_vld_in == 1'b1)) & (output_V_keep_V_1_state == 2'd3)) | ((output_V_keep_V_1_state == 2'd2) & (output_V_keep_V_1_vld_in == 1'b1)))) begin
            output_V_keep_V_1_state <= 2'd3;
        end else begin
            output_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        output_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((output_V_last_V_1_vld_out == 1'b1) & (output_V_last_V_1_ack_out == 1'b1))) begin
            output_V_last_V_1_sel_rd <= ~output_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        output_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((output_V_last_V_1_ack_in == 1'b1) & (output_V_last_V_1_vld_in == 1'b1))) begin
            output_V_last_V_1_sel_wr <= ~output_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        output_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((output_V_last_V_1_state == 2'd3) & (output_V_last_V_1_vld_in == 1'b0) & (output_V_last_V_1_ack_out == 1'b1)) | ((output_V_last_V_1_state == 2'd2) & (output_V_last_V_1_vld_in == 1'b0)))) begin
            output_V_last_V_1_state <= 2'd2;
        end else if ((((m_axis_tx_data_TREADY == 1'b0) & (output_V_last_V_1_state == 2'd1)) | ((output_V_last_V_1_state == 2'd3) & (m_axis_tx_data_TREADY == 1'b0) & (output_V_last_V_1_vld_in == 1'b1)))) begin
            output_V_last_V_1_state <= 2'd1;
        end else if ((((output_V_last_V_1_ack_out == 1'b1) & (output_V_last_V_1_state == 2'd1)) | (~((output_V_last_V_1_vld_in == 1'b0) & (output_V_last_V_1_ack_out == 1'b1)) & ~((m_axis_tx_data_TREADY == 1'b0) & (output_V_last_V_1_vld_in == 1'b1)) & (output_V_last_V_1_state == 2'd3)) | ((output_V_last_V_1_state == 2'd2) & (output_V_last_V_1_vld_in == 1'b1)))) begin
            output_V_last_V_1_state <= 2'd3;
        end else begin
            output_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_192)) begin
        if (((tmp_nbreadreq_fu_160_p6 == 1'd1) & (state == 2'd0))) begin
            header_idx <= 16'd0;
        end else if ((state_load_load_fu_228_p1 == 2'd1)) begin
            header_idx <= select_ln82_fu_614_p3;
        end else if (((grp_nbreadreq_fu_138_p5 == 1'd1) & (state == 2'd2))) begin
            header_idx <= select_ln82_2_fu_478_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_192)) begin
        if (((tmp_nbreadreq_fu_160_p6 == 1'd1) & (state == 2'd0))) begin
            state <= 2'd1;
        end else if (((or_ln887_fu_688_p2 == 1'd1) & (state_load_load_fu_228_p1 == 2'd1))) begin
            state <= 2'd2;
        end else if (((grp_nbreadreq_fu_138_p5 == 1'd1) & (state == 2'd2))) begin
            state <= select_ln223_fu_498_p3;
        end else if ((1'b1 == ap_condition_462)) begin
            state <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((state_load_load_fu_228_p1 == 2'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Lo_assign_reg_1021[21 : 6] <= Lo_assign_fu_516_p3[21 : 6];
        select_ln82_1_reg_1026[21 : 6] <= select_ln82_1_fu_622_p3[21 : 6];
        sub_ln82_1_reg_1044[6] <= sub_ln82_1_fu_642_p2[6];
        tmp_12_reg_1031[6] <= tmp_12_fu_630_p3[6];
        trunc_ln82_reg_1038[6] <= trunc_ln82_fu_638_p1[6];
    end
end

always @ (posedge ap_clk) begin
    if (((grp_nbreadreq_fu_138_p5 == 1'd1) & (state == 2'd2) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        and_ln82_1_reg_1016 <= and_ln82_1_fu_464_p2;
        icmp_ln76_1_reg_991 <= icmp_ln76_1_fu_274_p2;
        lshr_ln647_2_reg_1011 <= lshr_ln647_2_fu_452_p2;
        lshr_ln647_reg_1001 <= lshr_ln647_fu_366_p2;
        sub_ln647_3_reg_996[6 : 1] <= sub_ln647_3_fu_356_p2[6 : 1];
        sub_ln647_6_reg_1006[6 : 1] <= sub_ln647_6_fu_442_p2[6 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op14_read_state1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_34_reg_981_0 <= tx_shift2udpFifo_V_d_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_nbreadreq_fu_160_p6 == 1'd1) & (state == 2'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        header_header_V <= p_Result_s_fu_808_p5;
    end
end

always @ (posedge ap_clk) begin
    if ((output_V_data_V_1_load_A == 1'b1)) begin
        output_V_data_V_1_payload_A <= output_V_data_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((output_V_data_V_1_load_B == 1'b1)) begin
        output_V_data_V_1_payload_B <= output_V_data_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((output_V_keep_V_1_load_A == 1'b1)) begin
        output_V_keep_V_1_payload_A <= output_V_keep_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((output_V_keep_V_1_load_B == 1'b1)) begin
        output_V_keep_V_1_payload_B <= output_V_keep_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((output_V_last_V_1_load_A == 1'b1)) begin
        output_V_last_V_1_payload_A <= output_V_last_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((output_V_last_V_1_load_B == 1'b1)) begin
        output_V_last_V_1_payload_B <= output_V_last_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((((grp_nbreadreq_fu_138_p5 == 1'd1) & (state == 2'd2) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((grp_nbreadreq_fu_138_p5 == 1'd1) & (state == 2'd3) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        reg_223 <= tx_shift2udpFifo_V_k_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        state_load_reg_959 <= state;
        state_load_reg_959_pp0_iter1_reg <= state_load_reg_959;
        tmp_16_reg_963_pp0_iter1_reg <= tmp_16_reg_963;
        tmp_9_reg_977_pp0_iter1_reg <= tmp_9_reg_977;
    end
end

always @ (posedge ap_clk) begin
    if (((state == 2'd3) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_16_reg_963 <= grp_nbreadreq_fu_138_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((state == 2'd2) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_9_reg_977 <= grp_nbreadreq_fu_138_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_nbreadreq_fu_138_p5 == 1'd1) & (state == 2'd3) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_data_V_4_reg_967 <= tx_shift2udpFifo_V_d_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_nbreadreq_fu_138_p5 == 1'd1) & (state == 2'd3) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_last_V_2_reg_972 <= tx_shift2udpFifo_V_l_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_nbreadreq_fu_138_p5 == 1'd1) & (state == 2'd2) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_last_V_reg_986 <= tx_shift2udpFifo_V_l_dout;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (state_load_reg_959 == 2'd1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op127_write_state2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op115_write_state2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (state_load_reg_959_pp0_iter1_reg == 2'd1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op156_write_state3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op152_write_state3 == 1'b1)))) begin
        m_axis_tx_data_TDATA_blk_n = output_V_data_V_1_state[1'd1];
    end else begin
        m_axis_tx_data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_498)) begin
        if ((state_load_reg_959 == 2'd1)) begin
            output_V_data_V_1_data_in = ret_V_4_fu_952_p2;
        end else if ((ap_predicate_op127_write_state2 == 1'b1)) begin
            output_V_data_V_1_data_in = ret_V_fu_870_p3;
        end else if ((ap_predicate_op115_write_state2 == 1'b1)) begin
            output_V_data_V_1_data_in = tmp_data_V_4_reg_967;
        end else begin
            output_V_data_V_1_data_in = 'bx;
        end
    end else begin
        output_V_data_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((output_V_data_V_1_sel == 1'b1)) begin
        output_V_data_V_1_data_out = output_V_data_V_1_payload_B;
    end else begin
        output_V_data_V_1_data_out = output_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (state_load_reg_959 == 2'd1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op127_write_state2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op115_write_state2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        output_V_data_V_1_vld_in = 1'b1;
    end else begin
        output_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (state_load_reg_959 == 2'd1))) begin
        output_V_keep_V_1_data_in = 8'd255;
    end else if ((((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op127_write_state2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op115_write_state2 == 1'b1)))) begin
        output_V_keep_V_1_data_in = reg_223;
    end else begin
        output_V_keep_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((output_V_keep_V_1_sel == 1'b1)) begin
        output_V_keep_V_1_data_out = output_V_keep_V_1_payload_B;
    end else begin
        output_V_keep_V_1_data_out = output_V_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (state_load_reg_959 == 2'd1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op127_write_state2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op115_write_state2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        output_V_keep_V_1_vld_in = 1'b1;
    end else begin
        output_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_498)) begin
        if ((state_load_reg_959 == 2'd1)) begin
            output_V_last_V_1_data_in = 1'd0;
        end else if ((ap_predicate_op127_write_state2 == 1'b1)) begin
            output_V_last_V_1_data_in = tmp_last_V_reg_986;
        end else if ((ap_predicate_op115_write_state2 == 1'b1)) begin
            output_V_last_V_1_data_in = tmp_last_V_2_reg_972;
        end else begin
            output_V_last_V_1_data_in = 'bx;
        end
    end else begin
        output_V_last_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((output_V_last_V_1_sel == 1'b1)) begin
        output_V_last_V_1_data_out = output_V_last_V_1_payload_B;
    end else begin
        output_V_last_V_1_data_out = output_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (state_load_reg_959 == 2'd1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op127_write_state2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op115_write_state2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        output_V_last_V_1_vld_in = 1'b1;
    end else begin
        output_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op14_read_state1 == 1'b1)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op8_read_state1 == 1'b1)))) begin
        tx_shift2udpFifo_V_d_blk_n = tx_shift2udpFifo_V_d_empty_n;
    end else begin
        tx_shift2udpFifo_V_d_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op14_read_state1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op8_read_state1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        tx_shift2udpFifo_V_d_read = 1'b1;
    end else begin
        tx_shift2udpFifo_V_d_read = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op14_read_state1 == 1'b1)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op8_read_state1 == 1'b1)))) begin
        tx_shift2udpFifo_V_k_blk_n = tx_shift2udpFifo_V_k_empty_n;
    end else begin
        tx_shift2udpFifo_V_k_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op14_read_state1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op8_read_state1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        tx_shift2udpFifo_V_k_read = 1'b1;
    end else begin
        tx_shift2udpFifo_V_k_read = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op14_read_state1 == 1'b1)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op8_read_state1 == 1'b1)))) begin
        tx_shift2udpFifo_V_l_blk_n = tx_shift2udpFifo_V_l_empty_n;
    end else begin
        tx_shift2udpFifo_V_l_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op14_read_state1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op8_read_state1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        tx_shift2udpFifo_V_l_read = 1'b1;
    end else begin
        tx_shift2udpFifo_V_l_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op94_read_state1 == 1'b1))) begin
        tx_udpMetaFifo_V_len_blk_n = tx_udpMetaFifo_V_len_empty_n;
    end else begin
        tx_udpMetaFifo_V_len_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op94_read_state1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tx_udpMetaFifo_V_len_read = 1'b1;
    end else begin
        tx_udpMetaFifo_V_len_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op94_read_state1 == 1'b1))) begin
        tx_udpMetaFifo_V_my_s_blk_n = tx_udpMetaFifo_V_my_s_empty_n;
    end else begin
        tx_udpMetaFifo_V_my_s_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op94_read_state1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tx_udpMetaFifo_V_my_s_read = 1'b1;
    end else begin
        tx_udpMetaFifo_V_my_s_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op94_read_state1 == 1'b1))) begin
        tx_udpMetaFifo_V_the_blk_n = tx_udpMetaFifo_V_the_empty_n;
    end else begin
        tx_udpMetaFifo_V_the_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op94_read_state1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tx_udpMetaFifo_V_the_read = 1'b1;
    end else begin
        tx_udpMetaFifo_V_the_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op94_read_state1 == 1'b1))) begin
        tx_udpMetaFifo_V_val_blk_n = tx_udpMetaFifo_V_val_empty_n;
    end else begin
        tx_udpMetaFifo_V_val_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op94_read_state1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tx_udpMetaFifo_V_val_read = 1'b1;
    end else begin
        tx_udpMetaFifo_V_val_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Lo_assign_1_fu_256_p3 = {{header_idx}, {6'd0}};

assign Lo_assign_fu_516_p3 = {{header_idx}, {6'd0}};

assign add_ln647_fu_400_p2 = ($signed(tmp_19_fu_382_p3) + $signed(7'd65));

assign add_ln76_1_fu_268_p2 = (zext_ln76_1_fu_264_p1 + 23'd64);

assign add_ln76_fu_528_p2 = (zext_ln76_fu_524_p1 + 23'd64);

assign agg_result_V_0_1_i_i_1_fu_766_p3 = {{trunc_ln647_2_fu_762_p1}, {p_Result_10_i_i18_s_fu_752_p4}};

assign agg_result_V_0_1_i_i_2_fu_800_p3 = {{trunc_ln647_3_fu_796_p1}, {p_Result_10_i_i23_s_fu_786_p4}};

assign agg_result_V_0_1_i_i_fu_732_p3 = {{trunc_ln647_fu_728_p1}, {p_Result_10_i_i_i_fu_718_p4}};

assign and_ln82_1_fu_464_p2 = (xor_ln76_1_fu_458_p2 & grp_fu_218_p2);

assign and_ln82_fu_600_p2 = (xor_ln76_fu_594_p2 & grp_fu_218_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((io_acc_block_signal_op94 == 1'b0) & (ap_predicate_op94_read_state1 == 1'b1)) | ((io_acc_block_signal_op14 == 1'b0) & (ap_predicate_op14_read_state1 == 1'b1)) | ((io_acc_block_signal_op8 == 1'b0) & (ap_predicate_op8_read_state1 == 1'b1)))) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((output_V_last_V_1_state == 2'd1) | (output_V_keep_V_1_state == 2'd1) | (output_V_data_V_1_state == 2'd1) | ((output_V_last_V_1_state == 2'd3) & (m_axis_tx_data_TREADY == 1'b0)) | ((output_V_keep_V_1_state == 2'd3) & (m_axis_tx_data_TREADY == 1'b0)) | ((output_V_data_V_1_state == 2'd3) & (m_axis_tx_data_TREADY == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((io_acc_block_signal_op94 == 1'b0) & (ap_predicate_op94_read_state1 == 1'b1)) | ((io_acc_block_signal_op14 == 1'b0) & (ap_predicate_op14_read_state1 == 1'b1)) | ((io_acc_block_signal_op8 == 1'b0) & (ap_predicate_op8_read_state1 == 1'b1)))) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((1'b1 == ap_block_state3_io) | (output_V_last_V_1_state == 2'd1) | (output_V_keep_V_1_state == 2'd1) | (output_V_data_V_1_state == 2'd1) | ((output_V_last_V_1_state == 2'd3) & (m_axis_tx_data_TREADY == 1'b0)) | ((output_V_keep_V_1_state == 2'd3) & (m_axis_tx_data_TREADY == 1'b0)) | ((output_V_data_V_1_state == 2'd3) & (m_axis_tx_data_TREADY == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((io_acc_block_signal_op94 == 1'b0) & (ap_predicate_op94_read_state1 == 1'b1)) | ((io_acc_block_signal_op14 == 1'b0) & (ap_predicate_op14_read_state1 == 1'b1)) | ((io_acc_block_signal_op8 == 1'b0) & (ap_predicate_op8_read_state1 == 1'b1)))) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((1'b1 == ap_block_state3_io) | (output_V_last_V_1_state == 2'd1) | (output_V_keep_V_1_state == 2'd1) | (output_V_data_V_1_state == 2'd1) | ((output_V_last_V_1_state == 2'd3) & (m_axis_tx_data_TREADY == 1'b0)) | ((output_V_keep_V_1_state == 2'd3) & (m_axis_tx_data_TREADY == 1'b0)) | ((output_V_data_V_1_state == 2'd3) & (m_axis_tx_data_TREADY == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_io)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | ((io_acc_block_signal_op94 == 1'b0) & (ap_predicate_op94_read_state1 == 1'b1)) | ((io_acc_block_signal_op14 == 1'b0) & (ap_predicate_op14_read_state1 == 1'b1)) | ((io_acc_block_signal_op8 == 1'b0) & (ap_predicate_op8_read_state1 == 1'b1)));
end

always @ (*) begin
    ap_block_state2_io = (((output_V_data_V_1_ack_in == 1'b0) & (state_load_reg_959 == 2'd1)) | ((output_V_data_V_1_ack_in == 1'b0) & (ap_predicate_op127_write_state2 == 1'b1)) | ((output_V_data_V_1_ack_in == 1'b0) & (ap_predicate_op115_write_state2 == 1'b1)));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = (((output_V_data_V_1_ack_in == 1'b0) & (state_load_reg_959_pp0_iter1_reg == 2'd1)) | ((output_V_data_V_1_ack_in == 1'b0) & (ap_predicate_op156_write_state3 == 1'b1)) | ((output_V_data_V_1_ack_in == 1'b0) & (ap_predicate_op152_write_state3 == 1'b1)));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((output_V_last_V_1_state == 2'd1) | (output_V_keep_V_1_state == 2'd1) | (output_V_data_V_1_state == 2'd1) | ((output_V_last_V_1_state == 2'd3) & (m_axis_tx_data_TREADY == 1'b0)) | ((output_V_keep_V_1_state == 2'd3) & (m_axis_tx_data_TREADY == 1'b0)) | ((output_V_data_V_1_state == 2'd3) & (m_axis_tx_data_TREADY == 1'b0)));
end

always @ (*) begin
    ap_condition_192 = ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001));
end

always @ (*) begin
    ap_condition_462 = ((grp_fu_205_p1 == 1'd1) & (grp_nbreadreq_fu_138_p5 == 1'd1) & (state == 2'd3));
end

always @ (*) begin
    ap_condition_498 = ((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

always @ (*) begin
    ap_predicate_op115_write_state2 = ((tmp_16_reg_963 == 1'd1) & (state_load_reg_959 == 2'd3));
end

always @ (*) begin
    ap_predicate_op127_write_state2 = ((state_load_reg_959 == 2'd2) & (tmp_9_reg_977 == 1'd1));
end

always @ (*) begin
    ap_predicate_op14_read_state1 = ((grp_nbreadreq_fu_138_p5 == 1'd1) & (state == 2'd2));
end

always @ (*) begin
    ap_predicate_op152_write_state3 = ((tmp_16_reg_963_pp0_iter1_reg == 1'd1) & (state_load_reg_959_pp0_iter1_reg == 2'd3));
end

always @ (*) begin
    ap_predicate_op156_write_state3 = ((state_load_reg_959_pp0_iter1_reg == 2'd2) & (tmp_9_reg_977_pp0_iter1_reg == 1'd1));
end

always @ (*) begin
    ap_predicate_op8_read_state1 = ((grp_nbreadreq_fu_138_p5 == 1'd1) & (state == 2'd3));
end

always @ (*) begin
    ap_predicate_op94_read_state1 = ((tmp_nbreadreq_fu_160_p6 == 1'd1) & (state == 2'd0));
end

assign grp_fu_205_p1 = tx_shift2udpFifo_V_l_dout;

assign grp_fu_213_p2 = (header_idx + 16'd1);

assign grp_fu_218_p2 = ((header_idx == 16'd0) ? 1'b1 : 1'b0);

assign grp_nbreadreq_fu_138_p5 = (tx_shift2udpFifo_V_l_empty_n & tx_shift2udpFifo_V_k_empty_n & tx_shift2udpFifo_V_d_empty_n);

assign icmp_ln647_1_fu_376_p2 = ((zext_ln647_2_fu_372_p1 != 26'd0) ? 1'b1 : 1'b0);

assign icmp_ln647_fu_286_p2 = ((Lo_assign_1_fu_256_p3 > or_ln78_1_fu_280_p2) ? 1'b1 : 1'b0);

assign icmp_ln76_1_fu_274_p2 = ((add_ln76_1_fu_268_p2 < 23'd65) ? 1'b1 : 1'b0);

assign icmp_ln76_fu_534_p2 = ((add_ln76_fu_528_p2 < 23'd65) ? 1'b1 : 1'b0);

assign icmp_ln82_2_fu_882_p2 = ((Lo_assign_reg_1021 > select_ln82_1_reg_1026) ? 1'b1 : 1'b0);

assign icmp_ln887_fu_682_p2 = ((select_ln80_fu_674_p3 == 5'd0) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op14 = (tx_shift2udpFifo_V_l_empty_n & tx_shift2udpFifo_V_k_empty_n & tx_shift2udpFifo_V_d_empty_n);

assign io_acc_block_signal_op8 = (tx_shift2udpFifo_V_l_empty_n & tx_shift2udpFifo_V_k_empty_n & tx_shift2udpFifo_V_d_empty_n);

assign io_acc_block_signal_op94 = (tx_udpMetaFifo_V_val_empty_n & tx_udpMetaFifo_V_the_empty_n & tx_udpMetaFifo_V_my_s_empty_n & tx_udpMetaFifo_V_len_empty_n);

assign lshr_ln647_1_fu_838_p2 = 64'd18446744073709551615 >> zext_ln647_1_fu_835_p1;

assign lshr_ln647_2_fu_452_p2 = select_ln647_4_fu_426_p3 >> zext_ln647_3_fu_448_p1;

assign lshr_ln647_3_fu_852_p2 = 64'd18446744073709551615 >> zext_ln647_4_fu_849_p1;

assign lshr_ln647_fu_366_p2 = select_ln647_1_fu_340_p3 >> zext_ln647_fu_362_p1;

assign lshr_ln82_1_fu_946_p2 = 64'd18446744073709551615 >> zext_ln82_1_fu_936_p1;

assign lshr_ln82_fu_940_p2 = select_ln82_4_fu_912_p3 >> zext_ln82_fu_932_p1;

assign m_axis_tx_data_TDATA = output_V_data_V_1_data_out;

assign m_axis_tx_data_TKEEP = output_V_keep_V_1_data_out;

assign m_axis_tx_data_TLAST = output_V_last_V_1_data_out;

assign m_axis_tx_data_TVALID = output_V_last_V_1_state[1'd0];

assign or_ln78_1_fu_280_p2 = (22'd63 | Lo_assign_1_fu_256_p3);

assign or_ln78_fu_540_p2 = (22'd63 | Lo_assign_fu_516_p3);

assign or_ln887_fu_688_p2 = (xor_ln76_fu_594_p2 | icmp_ln887_fu_682_p2);

assign output_V_data_V_1_ack_in = output_V_data_V_1_state[1'd1];

assign output_V_data_V_1_ack_out = m_axis_tx_data_TREADY;

assign output_V_data_V_1_load_A = (output_V_data_V_1_state_cmp_full & ~output_V_data_V_1_sel_wr);

assign output_V_data_V_1_load_B = (output_V_data_V_1_state_cmp_full & output_V_data_V_1_sel_wr);

assign output_V_data_V_1_sel = output_V_data_V_1_sel_rd;

assign output_V_data_V_1_state_cmp_full = ((output_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign output_V_data_V_1_vld_out = output_V_data_V_1_state[1'd0];

assign output_V_keep_V_1_ack_in = output_V_keep_V_1_state[1'd1];

assign output_V_keep_V_1_ack_out = m_axis_tx_data_TREADY;

assign output_V_keep_V_1_load_A = (output_V_keep_V_1_state_cmp_full & ~output_V_keep_V_1_sel_wr);

assign output_V_keep_V_1_load_B = (output_V_keep_V_1_state_cmp_full & output_V_keep_V_1_sel_wr);

assign output_V_keep_V_1_sel = output_V_keep_V_1_sel_rd;

assign output_V_keep_V_1_state_cmp_full = ((output_V_keep_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign output_V_keep_V_1_vld_out = output_V_keep_V_1_state[1'd0];

assign output_V_last_V_1_ack_in = output_V_last_V_1_state[1'd1];

assign output_V_last_V_1_ack_out = m_axis_tx_data_TREADY;

assign output_V_last_V_1_load_A = (output_V_last_V_1_state_cmp_full & ~output_V_last_V_1_sel_wr);

assign output_V_last_V_1_load_B = (output_V_last_V_1_state_cmp_full & output_V_last_V_1_sel_wr);

assign output_V_last_V_1_sel = output_V_last_V_1_sel_rd;

assign output_V_last_V_1_state_cmp_full = ((output_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign output_V_last_V_1_vld_out = output_V_last_V_1_state[1'd0];

assign p_Result_10_i_i18_s_fu_752_p4 = {{tx_udpMetaFifo_V_my_s_dout[15:8]}};

assign p_Result_10_i_i23_s_fu_786_p4 = {{tx_udpMetaFifo_V_len_dout[15:8]}};

assign p_Result_10_i_i_i_fu_718_p4 = {{tx_udpMetaFifo_V_the_dout[15:8]}};

assign p_Result_5_fu_858_p2 = (lshr_ln647_3_fu_852_p2 & lshr_ln647_2_reg_1011);

assign p_Result_6_fu_740_p5 = {{header_header_V[63:32]}, {agg_result_V_0_1_i_i_fu_732_p3}, {header_header_V[15:0]}};

assign p_Result_7_fu_774_p5 = {{p_Result_6_fu_740_p5[63:16]}, {agg_result_V_0_1_i_i_1_fu_766_p3}};

assign p_Result_8_fu_844_p2 = (lshr_ln647_reg_1001 & lshr_ln647_1_fu_838_p2);

assign p_Result_s_fu_808_p5 = {{p_Result_7_fu_774_p5[63:48]}, {agg_result_V_0_1_i_i_2_fu_800_p3}, {p_Result_7_fu_774_p5[31:0]}};

assign ret_V_2_fu_863_p3 = ((icmp_ln76_1_reg_991[0:0] === 1'b1) ? p_Result_8_fu_844_p2 : empty_34_reg_981_0);

assign ret_V_4_fu_952_p2 = (lshr_ln82_fu_940_p2 & lshr_ln82_1_fu_946_p2);

assign ret_V_fu_870_p3 = ((and_ln82_1_reg_1016[0:0] === 1'b1) ? p_Result_5_fu_858_p2 : ret_V_2_fu_863_p3);

assign select_ln223_fu_498_p3 = ((xor_ln223_fu_492_p2[0:0] === 1'b1) ? 2'd3 : 2'd0);

assign select_ln647_1_fu_340_p3 = ((icmp_ln647_fu_286_p2[0:0] === 1'b1) ? tmp_18_fu_304_p4 : header_header_V);

assign select_ln647_2_fu_348_p3 = ((icmp_ln647_fu_286_p2[0:0] === 1'b1) ? sub_ln647_1_fu_320_p2 : tmp_17_fu_292_p3);

assign select_ln647_3_fu_418_p3 = ((icmp_ln647_1_fu_376_p2[0:0] === 1'b1) ? add_ln647_fu_400_p2 : sub_ln647_5_fu_412_p2);

assign select_ln647_4_fu_426_p3 = ((icmp_ln647_1_fu_376_p2[0:0] === 1'b1) ? tmp_20_fu_390_p4 : header_header_V);

assign select_ln647_5_fu_434_p3 = ((icmp_ln647_1_fu_376_p2[0:0] === 1'b1) ? sub_ln647_4_fu_406_p2 : tmp_19_fu_382_p3);

assign select_ln647_fu_332_p3 = ((icmp_ln647_fu_286_p2[0:0] === 1'b1) ? sub_ln647_fu_314_p2 : sub_ln647_2_fu_326_p2);

assign select_ln76_1_fu_470_p3 = ((icmp_ln76_1_fu_274_p2[0:0] === 1'b1) ? grp_fu_213_p2 : header_idx);

assign select_ln76_fu_606_p3 = ((icmp_ln76_fu_534_p2[0:0] === 1'b1) ? grp_fu_213_p2 : header_idx);

assign select_ln80_fu_674_p3 = ((tmp_11_fu_564_p3[0:0] === 1'b1) ? tmp_14_fu_654_p4 : tmp_15_fu_664_p4);

assign select_ln82_1_fu_622_p3 = ((and_ln82_fu_600_p2[0:0] === 1'b1) ? 22'd63 : or_ln78_fu_540_p2);

assign select_ln82_2_fu_478_p3 = ((and_ln82_1_fu_464_p2[0:0] === 1'b1) ? grp_fu_213_p2 : select_ln76_1_fu_470_p3);

assign select_ln82_3_fu_904_p3 = ((icmp_ln82_2_fu_882_p2[0:0] === 1'b1) ? sub_ln82_fu_896_p2 : sub_ln82_2_fu_900_p2);

assign select_ln82_4_fu_912_p3 = ((icmp_ln82_2_fu_882_p2[0:0] === 1'b1) ? tmp_13_fu_886_p4 : header_header_V);

assign select_ln82_5_fu_920_p3 = ((icmp_ln82_2_fu_882_p2[0:0] === 1'b1) ? sub_ln82_1_reg_1044 : tmp_12_reg_1031);

assign select_ln82_fu_614_p3 = ((and_ln82_fu_600_p2[0:0] === 1'b1) ? grp_fu_213_p2 : select_ln76_fu_606_p3);

assign shl_ln_fu_546_p3 = {{grp_fu_213_p2}, {6'd0}};

assign state_load_load_fu_228_p1 = state;

assign sub_ln647_1_fu_320_p2 = (7'd63 - tmp_17_fu_292_p3);

assign sub_ln647_2_fu_326_p2 = (trunc_ln647_4_fu_300_p1 - tmp_17_fu_292_p3);

assign sub_ln647_3_fu_356_p2 = (7'd63 - select_ln647_fu_332_p3);

assign sub_ln647_4_fu_406_p2 = (7'd63 - tmp_19_fu_382_p3);

assign sub_ln647_5_fu_412_p2 = (7'd63 - tmp_19_fu_382_p3);

assign sub_ln647_6_fu_442_p2 = (7'd63 - select_ln647_3_fu_418_p3);

assign sub_ln647_fu_314_p2 = (tmp_17_fu_292_p3 - trunc_ln647_4_fu_300_p1);

assign sub_ln80_1_fu_572_p2 = (23'd0 - sub_ln80_fu_558_p2);

assign sub_ln80_2_fu_588_p2 = (8'd0 - trunc_ln80_1_fu_578_p4);

assign sub_ln80_fu_558_p2 = (23'd64 - zext_ln80_fu_554_p1);

assign sub_ln82_1_fu_642_p2 = (7'd63 - tmp_12_fu_630_p3);

assign sub_ln82_2_fu_900_p2 = (trunc_ln82_reg_1038 - tmp_12_reg_1031);

assign sub_ln82_3_fu_926_p2 = (7'd63 - select_ln82_3_fu_904_p3);

assign sub_ln82_fu_896_p2 = (tmp_12_reg_1031 - trunc_ln82_reg_1038);

assign tmp_11_fu_564_p3 = sub_ln80_fu_558_p2[32'd22];

assign tmp_12_fu_630_p3 = {{trunc_ln76_fu_512_p1}, {6'd0}};

integer ap_tvar_int_0;

always @ (header_header_V) begin
    for (ap_tvar_int_0 = 64 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 63 - 0) begin
            tmp_13_fu_886_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_13_fu_886_p4[ap_tvar_int_0] = header_header_V[63 - ap_tvar_int_0];
        end
    end
end

assign tmp_14_fu_654_p4 = {{sub_ln80_2_fu_588_p2[7:3]}};

assign tmp_15_fu_664_p4 = {{sub_ln80_fu_558_p2[10:6]}};

assign tmp_17_fu_292_p3 = {{trunc_ln76_2_fu_252_p1}, {6'd0}};

integer ap_tvar_int_1;

always @ (header_header_V) begin
    for (ap_tvar_int_1 = 64 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 63 - 0) begin
            tmp_18_fu_304_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_18_fu_304_p4[ap_tvar_int_1] = header_header_V[63 - ap_tvar_int_1];
        end
    end
end

assign tmp_19_fu_382_p3 = {{trunc_ln76_1_fu_248_p1}, {6'd0}};

integer ap_tvar_int_2;

always @ (header_header_V) begin
    for (ap_tvar_int_2 = 64 - 1; ap_tvar_int_2 >= 0; ap_tvar_int_2 = ap_tvar_int_2 - 1) begin
        if (ap_tvar_int_2 > 63 - 0) begin
            tmp_20_fu_390_p4[ap_tvar_int_2] = 1'b0;
        end else begin
            tmp_20_fu_390_p4[ap_tvar_int_2] = header_header_V[63 - ap_tvar_int_2];
        end
    end
end

assign tmp_nbreadreq_fu_160_p6 = (tx_udpMetaFifo_V_val_empty_n & tx_udpMetaFifo_V_the_empty_n & tx_udpMetaFifo_V_my_s_empty_n & tx_udpMetaFifo_V_len_empty_n);

assign trunc_ln647_2_fu_762_p1 = tx_udpMetaFifo_V_my_s_dout[7:0];

assign trunc_ln647_3_fu_796_p1 = tx_udpMetaFifo_V_len_dout[7:0];

assign trunc_ln647_4_fu_300_p1 = or_ln78_1_fu_280_p2[6:0];

assign trunc_ln647_fu_728_p1 = tx_udpMetaFifo_V_the_dout[7:0];

assign trunc_ln76_1_fu_248_p1 = header_idx[0:0];

assign trunc_ln76_2_fu_252_p1 = header_idx[0:0];

assign trunc_ln76_fu_512_p1 = header_idx[0:0];

assign trunc_ln80_1_fu_578_p4 = {{sub_ln80_1_fu_572_p2[10:3]}};

assign trunc_ln82_fu_638_p1 = select_ln82_1_fu_622_p3[6:0];

assign xor_ln223_fu_492_p2 = (tx_shift2udpFifo_V_l_dout ^ 1'd1);

assign xor_ln76_1_fu_458_p2 = (icmp_ln76_1_fu_274_p2 ^ 1'd1);

assign xor_ln76_fu_594_p2 = (icmp_ln76_fu_534_p2 ^ 1'd1);

assign zext_ln647_1_fu_835_p1 = sub_ln647_3_reg_996;

assign zext_ln647_2_fu_372_p1 = header_idx;

assign zext_ln647_3_fu_448_p1 = select_ln647_5_fu_434_p3;

assign zext_ln647_4_fu_849_p1 = sub_ln647_6_reg_1006;

assign zext_ln647_fu_362_p1 = select_ln647_2_fu_348_p3;

assign zext_ln76_1_fu_264_p1 = Lo_assign_1_fu_256_p3;

assign zext_ln76_fu_524_p1 = Lo_assign_fu_516_p3;

assign zext_ln80_fu_554_p1 = shl_ln_fu_546_p3;

assign zext_ln82_1_fu_936_p1 = sub_ln82_3_fu_926_p2;

assign zext_ln82_fu_932_p1 = select_ln82_5_fu_920_p3;

always @ (posedge ap_clk) begin
    sub_ln647_3_reg_996[0] <= 1'b0;
    sub_ln647_6_reg_1006[0] <= 1'b0;
    Lo_assign_reg_1021[5:0] <= 6'b000000;
    select_ln82_1_reg_1026[5:0] <= 6'b111111;
    tmp_12_reg_1031[5:0] <= 6'b000000;
    trunc_ln82_reg_1038[5:0] <= 6'b111111;
    sub_ln82_1_reg_1044[5:0] <= 6'b111111;
end

endmodule //generate_udp_64_s
