-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity udp_top is
port (
    s_axis_rx_meta_V_TDATA : IN STD_LOGIC_VECTOR (47 downto 0);
    s_axis_rx_data_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    s_axis_rx_data_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
    s_axis_rx_data_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axis_rx_meta_V_TDATA : OUT STD_LOGIC_VECTOR (175 downto 0);
    m_axis_rx_data_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axis_rx_data_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axis_rx_data_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axis_tx_meta_V_TDATA : IN STD_LOGIC_VECTOR (175 downto 0);
    s_axis_tx_data_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    s_axis_tx_data_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
    s_axis_tx_data_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axis_tx_meta_V_TDATA : OUT STD_LOGIC_VECTOR (47 downto 0);
    m_axis_tx_data_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axis_tx_data_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axis_tx_data_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axis_port_cmd_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    reg_ip_address_V : IN STD_LOGIC_VECTOR (127 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axis_rx_data_TVALID : IN STD_LOGIC;
    s_axis_rx_data_TREADY : OUT STD_LOGIC;
    m_axis_rx_data_TVALID : OUT STD_LOGIC;
    m_axis_rx_data_TREADY : IN STD_LOGIC;
    s_axis_rx_meta_V_TVALID : IN STD_LOGIC;
    s_axis_rx_meta_V_TREADY : OUT STD_LOGIC;
    m_axis_rx_meta_V_TVALID : OUT STD_LOGIC;
    m_axis_rx_meta_V_TREADY : IN STD_LOGIC;
    s_axis_tx_meta_V_TVALID : IN STD_LOGIC;
    s_axis_tx_meta_V_TREADY : OUT STD_LOGIC;
    m_axis_tx_meta_V_TVALID : OUT STD_LOGIC;
    m_axis_tx_meta_V_TREADY : IN STD_LOGIC;
    s_axis_tx_data_TVALID : IN STD_LOGIC;
    s_axis_tx_data_TREADY : OUT STD_LOGIC;
    m_axis_tx_data_TVALID : OUT STD_LOGIC;
    m_axis_tx_data_TREADY : IN STD_LOGIC;
    s_axis_port_cmd_V_TVALID : IN STD_LOGIC;
    s_axis_port_cmd_V_TREADY : OUT STD_LOGIC );
end;


architecture behav of udp_top is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "udp_top,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k325t-ffg900-2,HLS_INPUT_CLOCK=6.400000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=6.897500,HLS_SYN_LAT=4,HLS_SYN_TPT=1,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=1790,HLS_SYN_LUT=5033,HLS_VERSION=2019_1}";
    constant ap_const_lv176_lc_1 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv48_0 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal ap_rst_n_inv : STD_LOGIC;
    signal process_udp_64_U0_ap_start : STD_LOGIC;
    signal process_udp_64_U0_ap_done : STD_LOGIC;
    signal process_udp_64_U0_ap_continue : STD_LOGIC;
    signal process_udp_64_U0_ap_idle : STD_LOGIC;
    signal process_udp_64_U0_ap_ready : STD_LOGIC;
    signal process_udp_64_U0_portStatusFifo_V_read : STD_LOGIC;
    signal process_udp_64_U0_rx_udp2shiftFifo_V_d_din : STD_LOGIC_VECTOR (63 downto 0);
    signal process_udp_64_U0_rx_udp2shiftFifo_V_d_write : STD_LOGIC;
    signal process_udp_64_U0_rx_udp2shiftFifo_V_k_din : STD_LOGIC_VECTOR (7 downto 0);
    signal process_udp_64_U0_rx_udp2shiftFifo_V_k_write : STD_LOGIC;
    signal process_udp_64_U0_rx_udp2shiftFifo_V_l_din : STD_LOGIC_VECTOR (0 downto 0);
    signal process_udp_64_U0_rx_udp2shiftFifo_V_l_write : STD_LOGIC;
    signal process_udp_64_U0_portLookupReqFifo_V_s_din : STD_LOGIC_VECTOR (15 downto 0);
    signal process_udp_64_U0_portLookupReqFifo_V_s_write : STD_LOGIC;
    signal process_udp_64_U0_rx_udpMetaFifo_V_din : STD_LOGIC_VECTOR (48 downto 0);
    signal process_udp_64_U0_rx_udpMetaFifo_V_write : STD_LOGIC;
    signal process_udp_64_U0_s_axis_rx_data_TREADY : STD_LOGIC;
    signal rshiftWordByOctet_U0_ap_start : STD_LOGIC;
    signal rshiftWordByOctet_U0_ap_done : STD_LOGIC;
    signal rshiftWordByOctet_U0_ap_continue : STD_LOGIC;
    signal rshiftWordByOctet_U0_ap_idle : STD_LOGIC;
    signal rshiftWordByOctet_U0_ap_ready : STD_LOGIC;
    signal rshiftWordByOctet_U0_rx_udp2shiftFifo_V_d_read : STD_LOGIC;
    signal rshiftWordByOctet_U0_rx_udp2shiftFifo_V_k_read : STD_LOGIC;
    signal rshiftWordByOctet_U0_rx_udp2shiftFifo_V_l_read : STD_LOGIC;
    signal rshiftWordByOctet_U0_m_axis_rx_data_TDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal rshiftWordByOctet_U0_m_axis_rx_data_TVALID : STD_LOGIC;
    signal rshiftWordByOctet_U0_m_axis_rx_data_TKEEP : STD_LOGIC_VECTOR (7 downto 0);
    signal rshiftWordByOctet_U0_m_axis_rx_data_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sync_continue : STD_LOGIC;
    signal merge_rx_meta_U0_ap_start : STD_LOGIC;
    signal merge_rx_meta_U0_ap_done : STD_LOGIC;
    signal merge_rx_meta_U0_ap_continue : STD_LOGIC;
    signal merge_rx_meta_U0_ap_idle : STD_LOGIC;
    signal merge_rx_meta_U0_ap_ready : STD_LOGIC;
    signal merge_rx_meta_U0_rx_udpMetaFifo_V_read : STD_LOGIC;
    signal merge_rx_meta_U0_ipMetaIn_V_TREADY : STD_LOGIC;
    signal merge_rx_meta_U0_metaOut_V_TDATA : STD_LOGIC_VECTOR (175 downto 0);
    signal merge_rx_meta_U0_metaOut_V_TVALID : STD_LOGIC;
    signal split_tx_meta_U0_ap_start : STD_LOGIC;
    signal split_tx_meta_U0_ap_done : STD_LOGIC;
    signal split_tx_meta_U0_ap_continue : STD_LOGIC;
    signal split_tx_meta_U0_ap_idle : STD_LOGIC;
    signal split_tx_meta_U0_ap_ready : STD_LOGIC;
    signal split_tx_meta_U0_tx_udpMetaFifo_V_the_din : STD_LOGIC_VECTOR (15 downto 0);
    signal split_tx_meta_U0_tx_udpMetaFifo_V_the_write : STD_LOGIC;
    signal split_tx_meta_U0_tx_udpMetaFifo_V_my_s_din : STD_LOGIC_VECTOR (15 downto 0);
    signal split_tx_meta_U0_tx_udpMetaFifo_V_my_s_write : STD_LOGIC;
    signal split_tx_meta_U0_tx_udpMetaFifo_V_len_din : STD_LOGIC_VECTOR (15 downto 0);
    signal split_tx_meta_U0_tx_udpMetaFifo_V_len_write : STD_LOGIC;
    signal split_tx_meta_U0_tx_udpMetaFifo_V_val_din : STD_LOGIC_VECTOR (0 downto 0);
    signal split_tx_meta_U0_tx_udpMetaFifo_V_val_write : STD_LOGIC;
    signal split_tx_meta_U0_metaIn_V_TREADY : STD_LOGIC;
    signal split_tx_meta_U0_metaOut0_V_TDATA : STD_LOGIC_VECTOR (47 downto 0);
    signal split_tx_meta_U0_metaOut0_V_TVALID : STD_LOGIC;
    signal lshiftWordByOctet_U0_ap_start : STD_LOGIC;
    signal lshiftWordByOctet_U0_ap_done : STD_LOGIC;
    signal lshiftWordByOctet_U0_ap_continue : STD_LOGIC;
    signal lshiftWordByOctet_U0_ap_idle : STD_LOGIC;
    signal lshiftWordByOctet_U0_ap_ready : STD_LOGIC;
    signal lshiftWordByOctet_U0_tx_shift2udpFifo_V_d_din : STD_LOGIC_VECTOR (63 downto 0);
    signal lshiftWordByOctet_U0_tx_shift2udpFifo_V_d_write : STD_LOGIC;
    signal lshiftWordByOctet_U0_tx_shift2udpFifo_V_k_din : STD_LOGIC_VECTOR (7 downto 0);
    signal lshiftWordByOctet_U0_tx_shift2udpFifo_V_k_write : STD_LOGIC;
    signal lshiftWordByOctet_U0_tx_shift2udpFifo_V_l_din : STD_LOGIC_VECTOR (0 downto 0);
    signal lshiftWordByOctet_U0_tx_shift2udpFifo_V_l_write : STD_LOGIC;
    signal lshiftWordByOctet_U0_s_axis_tx_data_TREADY : STD_LOGIC;
    signal generate_udp_64_U0_ap_start : STD_LOGIC;
    signal generate_udp_64_U0_ap_done : STD_LOGIC;
    signal generate_udp_64_U0_ap_continue : STD_LOGIC;
    signal generate_udp_64_U0_ap_idle : STD_LOGIC;
    signal generate_udp_64_U0_ap_ready : STD_LOGIC;
    signal generate_udp_64_U0_tx_shift2udpFifo_V_d_read : STD_LOGIC;
    signal generate_udp_64_U0_tx_shift2udpFifo_V_k_read : STD_LOGIC;
    signal generate_udp_64_U0_tx_shift2udpFifo_V_l_read : STD_LOGIC;
    signal generate_udp_64_U0_tx_udpMetaFifo_V_the_read : STD_LOGIC;
    signal generate_udp_64_U0_tx_udpMetaFifo_V_my_s_read : STD_LOGIC;
    signal generate_udp_64_U0_tx_udpMetaFifo_V_len_read : STD_LOGIC;
    signal generate_udp_64_U0_tx_udpMetaFifo_V_val_read : STD_LOGIC;
    signal generate_udp_64_U0_m_axis_tx_data_TDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal generate_udp_64_U0_m_axis_tx_data_TVALID : STD_LOGIC;
    signal generate_udp_64_U0_m_axis_tx_data_TKEEP : STD_LOGIC_VECTOR (7 downto 0);
    signal generate_udp_64_U0_m_axis_tx_data_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal portFilter_U0_ap_start : STD_LOGIC;
    signal portFilter_U0_ap_done : STD_LOGIC;
    signal portFilter_U0_ap_continue : STD_LOGIC;
    signal portFilter_U0_ap_idle : STD_LOGIC;
    signal portFilter_U0_ap_ready : STD_LOGIC;
    signal portFilter_U0_portLookupReqFifo_V_s_read : STD_LOGIC;
    signal portFilter_U0_portStatusFifo_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal portFilter_U0_portStatusFifo_V_write : STD_LOGIC;
    signal portFilter_U0_port_cmd_V_TREADY : STD_LOGIC;
    signal rx_udp2shiftFifo_V_d_full_n : STD_LOGIC;
    signal rx_udp2shiftFifo_V_d_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal rx_udp2shiftFifo_V_d_empty_n : STD_LOGIC;
    signal rx_udp2shiftFifo_V_k_full_n : STD_LOGIC;
    signal rx_udp2shiftFifo_V_k_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal rx_udp2shiftFifo_V_k_empty_n : STD_LOGIC;
    signal rx_udp2shiftFifo_V_l_full_n : STD_LOGIC;
    signal rx_udp2shiftFifo_V_l_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal rx_udp2shiftFifo_V_l_empty_n : STD_LOGIC;
    signal portLookupReqFifo_V_s_full_n : STD_LOGIC;
    signal portLookupReqFifo_V_s_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal portLookupReqFifo_V_s_empty_n : STD_LOGIC;
    signal rx_udpMetaFifo_V_full_n : STD_LOGIC;
    signal rx_udpMetaFifo_V_dout : STD_LOGIC_VECTOR (48 downto 0);
    signal rx_udpMetaFifo_V_empty_n : STD_LOGIC;
    signal portStatusFifo_V_full_n : STD_LOGIC;
    signal portStatusFifo_V_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal portStatusFifo_V_empty_n : STD_LOGIC;
    signal tx_udpMetaFifo_V_the_full_n : STD_LOGIC;
    signal tx_udpMetaFifo_V_the_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal tx_udpMetaFifo_V_the_empty_n : STD_LOGIC;
    signal tx_udpMetaFifo_V_my_s_full_n : STD_LOGIC;
    signal tx_udpMetaFifo_V_my_s_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal tx_udpMetaFifo_V_my_s_empty_n : STD_LOGIC;
    signal tx_udpMetaFifo_V_len_full_n : STD_LOGIC;
    signal tx_udpMetaFifo_V_len_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal tx_udpMetaFifo_V_len_empty_n : STD_LOGIC;
    signal tx_udpMetaFifo_V_val_full_n : STD_LOGIC;
    signal tx_udpMetaFifo_V_val_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal tx_udpMetaFifo_V_val_empty_n : STD_LOGIC;
    signal tx_shift2udpFifo_V_d_full_n : STD_LOGIC;
    signal tx_shift2udpFifo_V_d_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal tx_shift2udpFifo_V_d_empty_n : STD_LOGIC;
    signal tx_shift2udpFifo_V_k_full_n : STD_LOGIC;
    signal tx_shift2udpFifo_V_k_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal tx_shift2udpFifo_V_k_empty_n : STD_LOGIC;
    signal tx_shift2udpFifo_V_l_full_n : STD_LOGIC;
    signal tx_shift2udpFifo_V_l_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal tx_shift2udpFifo_V_l_empty_n : STD_LOGIC;

    component process_udp_64_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        s_axis_rx_data_TVALID : IN STD_LOGIC;
        portStatusFifo_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        portStatusFifo_V_empty_n : IN STD_LOGIC;
        portStatusFifo_V_read : OUT STD_LOGIC;
        rx_udp2shiftFifo_V_d_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        rx_udp2shiftFifo_V_d_full_n : IN STD_LOGIC;
        rx_udp2shiftFifo_V_d_write : OUT STD_LOGIC;
        rx_udp2shiftFifo_V_k_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        rx_udp2shiftFifo_V_k_full_n : IN STD_LOGIC;
        rx_udp2shiftFifo_V_k_write : OUT STD_LOGIC;
        rx_udp2shiftFifo_V_l_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        rx_udp2shiftFifo_V_l_full_n : IN STD_LOGIC;
        rx_udp2shiftFifo_V_l_write : OUT STD_LOGIC;
        portLookupReqFifo_V_s_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        portLookupReqFifo_V_s_full_n : IN STD_LOGIC;
        portLookupReqFifo_V_s_write : OUT STD_LOGIC;
        rx_udpMetaFifo_V_din : OUT STD_LOGIC_VECTOR (48 downto 0);
        rx_udpMetaFifo_V_full_n : IN STD_LOGIC;
        rx_udpMetaFifo_V_write : OUT STD_LOGIC;
        s_axis_rx_data_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        s_axis_rx_data_TREADY : OUT STD_LOGIC;
        s_axis_rx_data_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
        s_axis_rx_data_TLAST : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component rshiftWordByOctet IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        rx_udp2shiftFifo_V_d_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        rx_udp2shiftFifo_V_d_empty_n : IN STD_LOGIC;
        rx_udp2shiftFifo_V_d_read : OUT STD_LOGIC;
        rx_udp2shiftFifo_V_k_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        rx_udp2shiftFifo_V_k_empty_n : IN STD_LOGIC;
        rx_udp2shiftFifo_V_k_read : OUT STD_LOGIC;
        rx_udp2shiftFifo_V_l_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        rx_udp2shiftFifo_V_l_empty_n : IN STD_LOGIC;
        rx_udp2shiftFifo_V_l_read : OUT STD_LOGIC;
        m_axis_rx_data_TREADY : IN STD_LOGIC;
        m_axis_rx_data_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axis_rx_data_TVALID : OUT STD_LOGIC;
        m_axis_rx_data_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axis_rx_data_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component merge_rx_meta IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ipMetaIn_V_TVALID : IN STD_LOGIC;
        rx_udpMetaFifo_V_dout : IN STD_LOGIC_VECTOR (48 downto 0);
        rx_udpMetaFifo_V_empty_n : IN STD_LOGIC;
        rx_udpMetaFifo_V_read : OUT STD_LOGIC;
        metaOut_V_TREADY : IN STD_LOGIC;
        ipMetaIn_V_TDATA : IN STD_LOGIC_VECTOR (47 downto 0);
        ipMetaIn_V_TREADY : OUT STD_LOGIC;
        metaOut_V_TDATA : OUT STD_LOGIC_VECTOR (175 downto 0);
        metaOut_V_TVALID : OUT STD_LOGIC );
    end component;


    component split_tx_meta IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        metaIn_V_TVALID : IN STD_LOGIC;
        tx_udpMetaFifo_V_the_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        tx_udpMetaFifo_V_the_full_n : IN STD_LOGIC;
        tx_udpMetaFifo_V_the_write : OUT STD_LOGIC;
        tx_udpMetaFifo_V_my_s_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        tx_udpMetaFifo_V_my_s_full_n : IN STD_LOGIC;
        tx_udpMetaFifo_V_my_s_write : OUT STD_LOGIC;
        tx_udpMetaFifo_V_len_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        tx_udpMetaFifo_V_len_full_n : IN STD_LOGIC;
        tx_udpMetaFifo_V_len_write : OUT STD_LOGIC;
        tx_udpMetaFifo_V_val_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        tx_udpMetaFifo_V_val_full_n : IN STD_LOGIC;
        tx_udpMetaFifo_V_val_write : OUT STD_LOGIC;
        metaOut0_V_TREADY : IN STD_LOGIC;
        metaIn_V_TDATA : IN STD_LOGIC_VECTOR (175 downto 0);
        metaIn_V_TREADY : OUT STD_LOGIC;
        metaOut0_V_TDATA : OUT STD_LOGIC_VECTOR (47 downto 0);
        metaOut0_V_TVALID : OUT STD_LOGIC );
    end component;


    component lshiftWordByOctet IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        s_axis_tx_data_TVALID : IN STD_LOGIC;
        tx_shift2udpFifo_V_d_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        tx_shift2udpFifo_V_d_full_n : IN STD_LOGIC;
        tx_shift2udpFifo_V_d_write : OUT STD_LOGIC;
        tx_shift2udpFifo_V_k_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        tx_shift2udpFifo_V_k_full_n : IN STD_LOGIC;
        tx_shift2udpFifo_V_k_write : OUT STD_LOGIC;
        tx_shift2udpFifo_V_l_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        tx_shift2udpFifo_V_l_full_n : IN STD_LOGIC;
        tx_shift2udpFifo_V_l_write : OUT STD_LOGIC;
        s_axis_tx_data_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        s_axis_tx_data_TREADY : OUT STD_LOGIC;
        s_axis_tx_data_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
        s_axis_tx_data_TLAST : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component generate_udp_64_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        tx_shift2udpFifo_V_d_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        tx_shift2udpFifo_V_d_empty_n : IN STD_LOGIC;
        tx_shift2udpFifo_V_d_read : OUT STD_LOGIC;
        tx_shift2udpFifo_V_k_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        tx_shift2udpFifo_V_k_empty_n : IN STD_LOGIC;
        tx_shift2udpFifo_V_k_read : OUT STD_LOGIC;
        tx_shift2udpFifo_V_l_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        tx_shift2udpFifo_V_l_empty_n : IN STD_LOGIC;
        tx_shift2udpFifo_V_l_read : OUT STD_LOGIC;
        tx_udpMetaFifo_V_the_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        tx_udpMetaFifo_V_the_empty_n : IN STD_LOGIC;
        tx_udpMetaFifo_V_the_read : OUT STD_LOGIC;
        tx_udpMetaFifo_V_my_s_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        tx_udpMetaFifo_V_my_s_empty_n : IN STD_LOGIC;
        tx_udpMetaFifo_V_my_s_read : OUT STD_LOGIC;
        tx_udpMetaFifo_V_len_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        tx_udpMetaFifo_V_len_empty_n : IN STD_LOGIC;
        tx_udpMetaFifo_V_len_read : OUT STD_LOGIC;
        tx_udpMetaFifo_V_val_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        tx_udpMetaFifo_V_val_empty_n : IN STD_LOGIC;
        tx_udpMetaFifo_V_val_read : OUT STD_LOGIC;
        m_axis_tx_data_TREADY : IN STD_LOGIC;
        m_axis_tx_data_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axis_tx_data_TVALID : OUT STD_LOGIC;
        m_axis_tx_data_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axis_tx_data_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component portFilter IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        port_cmd_V_TVALID : IN STD_LOGIC;
        portLookupReqFifo_V_s_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        portLookupReqFifo_V_s_empty_n : IN STD_LOGIC;
        portLookupReqFifo_V_s_read : OUT STD_LOGIC;
        portStatusFifo_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        portStatusFifo_V_full_n : IN STD_LOGIC;
        portStatusFifo_V_write : OUT STD_LOGIC;
        port_cmd_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        port_cmd_V_TREADY : OUT STD_LOGIC );
    end component;


    component fifo_w64_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w8_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w1_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w16_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w49_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (48 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (48 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    process_udp_64_U0 : component process_udp_64_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => process_udp_64_U0_ap_start,
        ap_done => process_udp_64_U0_ap_done,
        ap_continue => process_udp_64_U0_ap_continue,
        ap_idle => process_udp_64_U0_ap_idle,
        ap_ready => process_udp_64_U0_ap_ready,
        s_axis_rx_data_TVALID => s_axis_rx_data_TVALID,
        portStatusFifo_V_dout => portStatusFifo_V_dout,
        portStatusFifo_V_empty_n => portStatusFifo_V_empty_n,
        portStatusFifo_V_read => process_udp_64_U0_portStatusFifo_V_read,
        rx_udp2shiftFifo_V_d_din => process_udp_64_U0_rx_udp2shiftFifo_V_d_din,
        rx_udp2shiftFifo_V_d_full_n => rx_udp2shiftFifo_V_d_full_n,
        rx_udp2shiftFifo_V_d_write => process_udp_64_U0_rx_udp2shiftFifo_V_d_write,
        rx_udp2shiftFifo_V_k_din => process_udp_64_U0_rx_udp2shiftFifo_V_k_din,
        rx_udp2shiftFifo_V_k_full_n => rx_udp2shiftFifo_V_k_full_n,
        rx_udp2shiftFifo_V_k_write => process_udp_64_U0_rx_udp2shiftFifo_V_k_write,
        rx_udp2shiftFifo_V_l_din => process_udp_64_U0_rx_udp2shiftFifo_V_l_din,
        rx_udp2shiftFifo_V_l_full_n => rx_udp2shiftFifo_V_l_full_n,
        rx_udp2shiftFifo_V_l_write => process_udp_64_U0_rx_udp2shiftFifo_V_l_write,
        portLookupReqFifo_V_s_din => process_udp_64_U0_portLookupReqFifo_V_s_din,
        portLookupReqFifo_V_s_full_n => portLookupReqFifo_V_s_full_n,
        portLookupReqFifo_V_s_write => process_udp_64_U0_portLookupReqFifo_V_s_write,
        rx_udpMetaFifo_V_din => process_udp_64_U0_rx_udpMetaFifo_V_din,
        rx_udpMetaFifo_V_full_n => rx_udpMetaFifo_V_full_n,
        rx_udpMetaFifo_V_write => process_udp_64_U0_rx_udpMetaFifo_V_write,
        s_axis_rx_data_TDATA => s_axis_rx_data_TDATA,
        s_axis_rx_data_TREADY => process_udp_64_U0_s_axis_rx_data_TREADY,
        s_axis_rx_data_TKEEP => s_axis_rx_data_TKEEP,
        s_axis_rx_data_TLAST => s_axis_rx_data_TLAST);

    rshiftWordByOctet_U0 : component rshiftWordByOctet
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => rshiftWordByOctet_U0_ap_start,
        ap_done => rshiftWordByOctet_U0_ap_done,
        ap_continue => rshiftWordByOctet_U0_ap_continue,
        ap_idle => rshiftWordByOctet_U0_ap_idle,
        ap_ready => rshiftWordByOctet_U0_ap_ready,
        rx_udp2shiftFifo_V_d_dout => rx_udp2shiftFifo_V_d_dout,
        rx_udp2shiftFifo_V_d_empty_n => rx_udp2shiftFifo_V_d_empty_n,
        rx_udp2shiftFifo_V_d_read => rshiftWordByOctet_U0_rx_udp2shiftFifo_V_d_read,
        rx_udp2shiftFifo_V_k_dout => rx_udp2shiftFifo_V_k_dout,
        rx_udp2shiftFifo_V_k_empty_n => rx_udp2shiftFifo_V_k_empty_n,
        rx_udp2shiftFifo_V_k_read => rshiftWordByOctet_U0_rx_udp2shiftFifo_V_k_read,
        rx_udp2shiftFifo_V_l_dout => rx_udp2shiftFifo_V_l_dout,
        rx_udp2shiftFifo_V_l_empty_n => rx_udp2shiftFifo_V_l_empty_n,
        rx_udp2shiftFifo_V_l_read => rshiftWordByOctet_U0_rx_udp2shiftFifo_V_l_read,
        m_axis_rx_data_TREADY => m_axis_rx_data_TREADY,
        m_axis_rx_data_TDATA => rshiftWordByOctet_U0_m_axis_rx_data_TDATA,
        m_axis_rx_data_TVALID => rshiftWordByOctet_U0_m_axis_rx_data_TVALID,
        m_axis_rx_data_TKEEP => rshiftWordByOctet_U0_m_axis_rx_data_TKEEP,
        m_axis_rx_data_TLAST => rshiftWordByOctet_U0_m_axis_rx_data_TLAST);

    merge_rx_meta_U0 : component merge_rx_meta
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => merge_rx_meta_U0_ap_start,
        ap_done => merge_rx_meta_U0_ap_done,
        ap_continue => merge_rx_meta_U0_ap_continue,
        ap_idle => merge_rx_meta_U0_ap_idle,
        ap_ready => merge_rx_meta_U0_ap_ready,
        ipMetaIn_V_TVALID => s_axis_rx_meta_V_TVALID,
        rx_udpMetaFifo_V_dout => rx_udpMetaFifo_V_dout,
        rx_udpMetaFifo_V_empty_n => rx_udpMetaFifo_V_empty_n,
        rx_udpMetaFifo_V_read => merge_rx_meta_U0_rx_udpMetaFifo_V_read,
        metaOut_V_TREADY => m_axis_rx_meta_V_TREADY,
        ipMetaIn_V_TDATA => s_axis_rx_meta_V_TDATA,
        ipMetaIn_V_TREADY => merge_rx_meta_U0_ipMetaIn_V_TREADY,
        metaOut_V_TDATA => merge_rx_meta_U0_metaOut_V_TDATA,
        metaOut_V_TVALID => merge_rx_meta_U0_metaOut_V_TVALID);

    split_tx_meta_U0 : component split_tx_meta
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => split_tx_meta_U0_ap_start,
        ap_done => split_tx_meta_U0_ap_done,
        ap_continue => split_tx_meta_U0_ap_continue,
        ap_idle => split_tx_meta_U0_ap_idle,
        ap_ready => split_tx_meta_U0_ap_ready,
        metaIn_V_TVALID => s_axis_tx_meta_V_TVALID,
        tx_udpMetaFifo_V_the_din => split_tx_meta_U0_tx_udpMetaFifo_V_the_din,
        tx_udpMetaFifo_V_the_full_n => tx_udpMetaFifo_V_the_full_n,
        tx_udpMetaFifo_V_the_write => split_tx_meta_U0_tx_udpMetaFifo_V_the_write,
        tx_udpMetaFifo_V_my_s_din => split_tx_meta_U0_tx_udpMetaFifo_V_my_s_din,
        tx_udpMetaFifo_V_my_s_full_n => tx_udpMetaFifo_V_my_s_full_n,
        tx_udpMetaFifo_V_my_s_write => split_tx_meta_U0_tx_udpMetaFifo_V_my_s_write,
        tx_udpMetaFifo_V_len_din => split_tx_meta_U0_tx_udpMetaFifo_V_len_din,
        tx_udpMetaFifo_V_len_full_n => tx_udpMetaFifo_V_len_full_n,
        tx_udpMetaFifo_V_len_write => split_tx_meta_U0_tx_udpMetaFifo_V_len_write,
        tx_udpMetaFifo_V_val_din => split_tx_meta_U0_tx_udpMetaFifo_V_val_din,
        tx_udpMetaFifo_V_val_full_n => tx_udpMetaFifo_V_val_full_n,
        tx_udpMetaFifo_V_val_write => split_tx_meta_U0_tx_udpMetaFifo_V_val_write,
        metaOut0_V_TREADY => m_axis_tx_meta_V_TREADY,
        metaIn_V_TDATA => s_axis_tx_meta_V_TDATA,
        metaIn_V_TREADY => split_tx_meta_U0_metaIn_V_TREADY,
        metaOut0_V_TDATA => split_tx_meta_U0_metaOut0_V_TDATA,
        metaOut0_V_TVALID => split_tx_meta_U0_metaOut0_V_TVALID);

    lshiftWordByOctet_U0 : component lshiftWordByOctet
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => lshiftWordByOctet_U0_ap_start,
        ap_done => lshiftWordByOctet_U0_ap_done,
        ap_continue => lshiftWordByOctet_U0_ap_continue,
        ap_idle => lshiftWordByOctet_U0_ap_idle,
        ap_ready => lshiftWordByOctet_U0_ap_ready,
        s_axis_tx_data_TVALID => s_axis_tx_data_TVALID,
        tx_shift2udpFifo_V_d_din => lshiftWordByOctet_U0_tx_shift2udpFifo_V_d_din,
        tx_shift2udpFifo_V_d_full_n => tx_shift2udpFifo_V_d_full_n,
        tx_shift2udpFifo_V_d_write => lshiftWordByOctet_U0_tx_shift2udpFifo_V_d_write,
        tx_shift2udpFifo_V_k_din => lshiftWordByOctet_U0_tx_shift2udpFifo_V_k_din,
        tx_shift2udpFifo_V_k_full_n => tx_shift2udpFifo_V_k_full_n,
        tx_shift2udpFifo_V_k_write => lshiftWordByOctet_U0_tx_shift2udpFifo_V_k_write,
        tx_shift2udpFifo_V_l_din => lshiftWordByOctet_U0_tx_shift2udpFifo_V_l_din,
        tx_shift2udpFifo_V_l_full_n => tx_shift2udpFifo_V_l_full_n,
        tx_shift2udpFifo_V_l_write => lshiftWordByOctet_U0_tx_shift2udpFifo_V_l_write,
        s_axis_tx_data_TDATA => s_axis_tx_data_TDATA,
        s_axis_tx_data_TREADY => lshiftWordByOctet_U0_s_axis_tx_data_TREADY,
        s_axis_tx_data_TKEEP => s_axis_tx_data_TKEEP,
        s_axis_tx_data_TLAST => s_axis_tx_data_TLAST);

    generate_udp_64_U0 : component generate_udp_64_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => generate_udp_64_U0_ap_start,
        ap_done => generate_udp_64_U0_ap_done,
        ap_continue => generate_udp_64_U0_ap_continue,
        ap_idle => generate_udp_64_U0_ap_idle,
        ap_ready => generate_udp_64_U0_ap_ready,
        tx_shift2udpFifo_V_d_dout => tx_shift2udpFifo_V_d_dout,
        tx_shift2udpFifo_V_d_empty_n => tx_shift2udpFifo_V_d_empty_n,
        tx_shift2udpFifo_V_d_read => generate_udp_64_U0_tx_shift2udpFifo_V_d_read,
        tx_shift2udpFifo_V_k_dout => tx_shift2udpFifo_V_k_dout,
        tx_shift2udpFifo_V_k_empty_n => tx_shift2udpFifo_V_k_empty_n,
        tx_shift2udpFifo_V_k_read => generate_udp_64_U0_tx_shift2udpFifo_V_k_read,
        tx_shift2udpFifo_V_l_dout => tx_shift2udpFifo_V_l_dout,
        tx_shift2udpFifo_V_l_empty_n => tx_shift2udpFifo_V_l_empty_n,
        tx_shift2udpFifo_V_l_read => generate_udp_64_U0_tx_shift2udpFifo_V_l_read,
        tx_udpMetaFifo_V_the_dout => tx_udpMetaFifo_V_the_dout,
        tx_udpMetaFifo_V_the_empty_n => tx_udpMetaFifo_V_the_empty_n,
        tx_udpMetaFifo_V_the_read => generate_udp_64_U0_tx_udpMetaFifo_V_the_read,
        tx_udpMetaFifo_V_my_s_dout => tx_udpMetaFifo_V_my_s_dout,
        tx_udpMetaFifo_V_my_s_empty_n => tx_udpMetaFifo_V_my_s_empty_n,
        tx_udpMetaFifo_V_my_s_read => generate_udp_64_U0_tx_udpMetaFifo_V_my_s_read,
        tx_udpMetaFifo_V_len_dout => tx_udpMetaFifo_V_len_dout,
        tx_udpMetaFifo_V_len_empty_n => tx_udpMetaFifo_V_len_empty_n,
        tx_udpMetaFifo_V_len_read => generate_udp_64_U0_tx_udpMetaFifo_V_len_read,
        tx_udpMetaFifo_V_val_dout => tx_udpMetaFifo_V_val_dout,
        tx_udpMetaFifo_V_val_empty_n => tx_udpMetaFifo_V_val_empty_n,
        tx_udpMetaFifo_V_val_read => generate_udp_64_U0_tx_udpMetaFifo_V_val_read,
        m_axis_tx_data_TREADY => m_axis_tx_data_TREADY,
        m_axis_tx_data_TDATA => generate_udp_64_U0_m_axis_tx_data_TDATA,
        m_axis_tx_data_TVALID => generate_udp_64_U0_m_axis_tx_data_TVALID,
        m_axis_tx_data_TKEEP => generate_udp_64_U0_m_axis_tx_data_TKEEP,
        m_axis_tx_data_TLAST => generate_udp_64_U0_m_axis_tx_data_TLAST);

    portFilter_U0 : component portFilter
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => portFilter_U0_ap_start,
        ap_done => portFilter_U0_ap_done,
        ap_continue => portFilter_U0_ap_continue,
        ap_idle => portFilter_U0_ap_idle,
        ap_ready => portFilter_U0_ap_ready,
        port_cmd_V_TVALID => s_axis_port_cmd_V_TVALID,
        portLookupReqFifo_V_s_dout => portLookupReqFifo_V_s_dout,
        portLookupReqFifo_V_s_empty_n => portLookupReqFifo_V_s_empty_n,
        portLookupReqFifo_V_s_read => portFilter_U0_portLookupReqFifo_V_s_read,
        portStatusFifo_V_din => portFilter_U0_portStatusFifo_V_din,
        portStatusFifo_V_full_n => portStatusFifo_V_full_n,
        portStatusFifo_V_write => portFilter_U0_portStatusFifo_V_write,
        port_cmd_V_TDATA => s_axis_port_cmd_V_TDATA,
        port_cmd_V_TREADY => portFilter_U0_port_cmd_V_TREADY);

    rx_udp2shiftFifo_V_d_U : component fifo_w64_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => process_udp_64_U0_rx_udp2shiftFifo_V_d_din,
        if_full_n => rx_udp2shiftFifo_V_d_full_n,
        if_write => process_udp_64_U0_rx_udp2shiftFifo_V_d_write,
        if_dout => rx_udp2shiftFifo_V_d_dout,
        if_empty_n => rx_udp2shiftFifo_V_d_empty_n,
        if_read => rshiftWordByOctet_U0_rx_udp2shiftFifo_V_d_read);

    rx_udp2shiftFifo_V_k_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => process_udp_64_U0_rx_udp2shiftFifo_V_k_din,
        if_full_n => rx_udp2shiftFifo_V_k_full_n,
        if_write => process_udp_64_U0_rx_udp2shiftFifo_V_k_write,
        if_dout => rx_udp2shiftFifo_V_k_dout,
        if_empty_n => rx_udp2shiftFifo_V_k_empty_n,
        if_read => rshiftWordByOctet_U0_rx_udp2shiftFifo_V_k_read);

    rx_udp2shiftFifo_V_l_U : component fifo_w1_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => process_udp_64_U0_rx_udp2shiftFifo_V_l_din,
        if_full_n => rx_udp2shiftFifo_V_l_full_n,
        if_write => process_udp_64_U0_rx_udp2shiftFifo_V_l_write,
        if_dout => rx_udp2shiftFifo_V_l_dout,
        if_empty_n => rx_udp2shiftFifo_V_l_empty_n,
        if_read => rshiftWordByOctet_U0_rx_udp2shiftFifo_V_l_read);

    portLookupReqFifo_V_s_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => process_udp_64_U0_portLookupReqFifo_V_s_din,
        if_full_n => portLookupReqFifo_V_s_full_n,
        if_write => process_udp_64_U0_portLookupReqFifo_V_s_write,
        if_dout => portLookupReqFifo_V_s_dout,
        if_empty_n => portLookupReqFifo_V_s_empty_n,
        if_read => portFilter_U0_portLookupReqFifo_V_s_read);

    rx_udpMetaFifo_V_U : component fifo_w49_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => process_udp_64_U0_rx_udpMetaFifo_V_din,
        if_full_n => rx_udpMetaFifo_V_full_n,
        if_write => process_udp_64_U0_rx_udpMetaFifo_V_write,
        if_dout => rx_udpMetaFifo_V_dout,
        if_empty_n => rx_udpMetaFifo_V_empty_n,
        if_read => merge_rx_meta_U0_rx_udpMetaFifo_V_read);

    portStatusFifo_V_U : component fifo_w1_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => portFilter_U0_portStatusFifo_V_din,
        if_full_n => portStatusFifo_V_full_n,
        if_write => portFilter_U0_portStatusFifo_V_write,
        if_dout => portStatusFifo_V_dout,
        if_empty_n => portStatusFifo_V_empty_n,
        if_read => process_udp_64_U0_portStatusFifo_V_read);

    tx_udpMetaFifo_V_the_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => split_tx_meta_U0_tx_udpMetaFifo_V_the_din,
        if_full_n => tx_udpMetaFifo_V_the_full_n,
        if_write => split_tx_meta_U0_tx_udpMetaFifo_V_the_write,
        if_dout => tx_udpMetaFifo_V_the_dout,
        if_empty_n => tx_udpMetaFifo_V_the_empty_n,
        if_read => generate_udp_64_U0_tx_udpMetaFifo_V_the_read);

    tx_udpMetaFifo_V_my_s_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => split_tx_meta_U0_tx_udpMetaFifo_V_my_s_din,
        if_full_n => tx_udpMetaFifo_V_my_s_full_n,
        if_write => split_tx_meta_U0_tx_udpMetaFifo_V_my_s_write,
        if_dout => tx_udpMetaFifo_V_my_s_dout,
        if_empty_n => tx_udpMetaFifo_V_my_s_empty_n,
        if_read => generate_udp_64_U0_tx_udpMetaFifo_V_my_s_read);

    tx_udpMetaFifo_V_len_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => split_tx_meta_U0_tx_udpMetaFifo_V_len_din,
        if_full_n => tx_udpMetaFifo_V_len_full_n,
        if_write => split_tx_meta_U0_tx_udpMetaFifo_V_len_write,
        if_dout => tx_udpMetaFifo_V_len_dout,
        if_empty_n => tx_udpMetaFifo_V_len_empty_n,
        if_read => generate_udp_64_U0_tx_udpMetaFifo_V_len_read);

    tx_udpMetaFifo_V_val_U : component fifo_w1_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => split_tx_meta_U0_tx_udpMetaFifo_V_val_din,
        if_full_n => tx_udpMetaFifo_V_val_full_n,
        if_write => split_tx_meta_U0_tx_udpMetaFifo_V_val_write,
        if_dout => tx_udpMetaFifo_V_val_dout,
        if_empty_n => tx_udpMetaFifo_V_val_empty_n,
        if_read => generate_udp_64_U0_tx_udpMetaFifo_V_val_read);

    tx_shift2udpFifo_V_d_U : component fifo_w64_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => lshiftWordByOctet_U0_tx_shift2udpFifo_V_d_din,
        if_full_n => tx_shift2udpFifo_V_d_full_n,
        if_write => lshiftWordByOctet_U0_tx_shift2udpFifo_V_d_write,
        if_dout => tx_shift2udpFifo_V_d_dout,
        if_empty_n => tx_shift2udpFifo_V_d_empty_n,
        if_read => generate_udp_64_U0_tx_shift2udpFifo_V_d_read);

    tx_shift2udpFifo_V_k_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => lshiftWordByOctet_U0_tx_shift2udpFifo_V_k_din,
        if_full_n => tx_shift2udpFifo_V_k_full_n,
        if_write => lshiftWordByOctet_U0_tx_shift2udpFifo_V_k_write,
        if_dout => tx_shift2udpFifo_V_k_dout,
        if_empty_n => tx_shift2udpFifo_V_k_empty_n,
        if_read => generate_udp_64_U0_tx_shift2udpFifo_V_k_read);

    tx_shift2udpFifo_V_l_U : component fifo_w1_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => lshiftWordByOctet_U0_tx_shift2udpFifo_V_l_din,
        if_full_n => tx_shift2udpFifo_V_l_full_n,
        if_write => lshiftWordByOctet_U0_tx_shift2udpFifo_V_l_write,
        if_dout => tx_shift2udpFifo_V_l_dout,
        if_empty_n => tx_shift2udpFifo_V_l_empty_n,
        if_read => generate_udp_64_U0_tx_shift2udpFifo_V_l_read);





    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_continue <= ap_const_logic_0;
    generate_udp_64_U0_ap_continue <= ap_const_logic_1;
    generate_udp_64_U0_ap_start <= ap_const_logic_1;
    lshiftWordByOctet_U0_ap_continue <= ap_const_logic_1;
    lshiftWordByOctet_U0_ap_start <= ap_const_logic_1;
    m_axis_rx_data_TDATA <= rshiftWordByOctet_U0_m_axis_rx_data_TDATA;
    m_axis_rx_data_TKEEP <= rshiftWordByOctet_U0_m_axis_rx_data_TKEEP;
    m_axis_rx_data_TLAST <= rshiftWordByOctet_U0_m_axis_rx_data_TLAST;
    m_axis_rx_data_TVALID <= rshiftWordByOctet_U0_m_axis_rx_data_TVALID;
    m_axis_rx_meta_V_TDATA <= merge_rx_meta_U0_metaOut_V_TDATA;
    m_axis_rx_meta_V_TVALID <= merge_rx_meta_U0_metaOut_V_TVALID;
    m_axis_tx_data_TDATA <= generate_udp_64_U0_m_axis_tx_data_TDATA;
    m_axis_tx_data_TKEEP <= generate_udp_64_U0_m_axis_tx_data_TKEEP;
    m_axis_tx_data_TLAST <= generate_udp_64_U0_m_axis_tx_data_TLAST;
    m_axis_tx_data_TVALID <= generate_udp_64_U0_m_axis_tx_data_TVALID;
    m_axis_tx_meta_V_TDATA <= split_tx_meta_U0_metaOut0_V_TDATA;
    m_axis_tx_meta_V_TVALID <= split_tx_meta_U0_metaOut0_V_TVALID;
    merge_rx_meta_U0_ap_continue <= ap_const_logic_1;
    merge_rx_meta_U0_ap_start <= ap_const_logic_1;
    portFilter_U0_ap_continue <= ap_const_logic_1;
    portFilter_U0_ap_start <= ap_const_logic_1;
    process_udp_64_U0_ap_continue <= ap_const_logic_1;
    process_udp_64_U0_ap_start <= ap_const_logic_1;
    rshiftWordByOctet_U0_ap_continue <= ap_const_logic_1;
    rshiftWordByOctet_U0_ap_start <= ap_const_logic_1;
    s_axis_port_cmd_V_TREADY <= portFilter_U0_port_cmd_V_TREADY;
    s_axis_rx_data_TREADY <= process_udp_64_U0_s_axis_rx_data_TREADY;
    s_axis_rx_meta_V_TREADY <= merge_rx_meta_U0_ipMetaIn_V_TREADY;
    s_axis_tx_data_TREADY <= lshiftWordByOctet_U0_s_axis_tx_data_TREADY;
    s_axis_tx_meta_V_TREADY <= split_tx_meta_U0_metaIn_V_TREADY;
    split_tx_meta_U0_ap_continue <= ap_const_logic_1;
    split_tx_meta_U0_ap_start <= ap_const_logic_1;
end behav;
