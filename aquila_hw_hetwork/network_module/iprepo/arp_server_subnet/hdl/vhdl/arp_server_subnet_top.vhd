-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity arp_server_subnet_top is
port (
    s_axis_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    s_axis_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
    s_axis_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_arp_lookup_request_V_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    s_axis_host_arp_lookup_request_V_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axis_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axis_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axis_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_arp_lookup_reply_V_TDATA : OUT STD_LOGIC_VECTOR (55 downto 0);
    m_axis_host_arp_lookup_reply_V_TDATA : OUT STD_LOGIC_VECTOR (55 downto 0);
    myMacAddress_V : IN STD_LOGIC_VECTOR (47 downto 0);
    myIpAddress_V : IN STD_LOGIC_VECTOR (31 downto 0);
    regRequestCount_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    regReplyCount_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axis_TVALID : IN STD_LOGIC;
    s_axis_TREADY : OUT STD_LOGIC;
    regRequestCount_V_ap_vld : OUT STD_LOGIC;
    regReplyCount_V_ap_vld : OUT STD_LOGIC;
    m_axis_TVALID : OUT STD_LOGIC;
    m_axis_TREADY : IN STD_LOGIC;
    s_axis_arp_lookup_request_V_V_TVALID : IN STD_LOGIC;
    s_axis_arp_lookup_request_V_V_TREADY : OUT STD_LOGIC;
    s_axis_host_arp_lookup_request_V_V_TVALID : IN STD_LOGIC;
    s_axis_host_arp_lookup_request_V_V_TREADY : OUT STD_LOGIC;
    m_axis_arp_lookup_reply_V_TVALID : OUT STD_LOGIC;
    m_axis_arp_lookup_reply_V_TREADY : IN STD_LOGIC;
    m_axis_host_arp_lookup_reply_V_TVALID : OUT STD_LOGIC;
    m_axis_host_arp_lookup_reply_V_TREADY : IN STD_LOGIC );
end;


architecture behav of arp_server_subnet_top is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "arp_server_subnet_top,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k325t-ffg900-2,HLS_INPUT_CLOCK=6.400000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=6.790500,HLS_SYN_LAT=6,HLS_SYN_TPT=1,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=3098,HLS_SYN_LUT=24012,HLS_VERSION=2019_1}";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv56_0 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal ap_rst_n_inv : STD_LOGIC;
    signal process_arp_pkg_64_U0_ap_start : STD_LOGIC;
    signal process_arp_pkg_64_U0_ap_done : STD_LOGIC;
    signal process_arp_pkg_64_U0_ap_continue : STD_LOGIC;
    signal process_arp_pkg_64_U0_ap_idle : STD_LOGIC;
    signal process_arp_pkg_64_U0_ap_ready : STD_LOGIC;
    signal process_arp_pkg_64_U0_arpTableInsertFifo_V_din : STD_LOGIC_VECTOR (80 downto 0);
    signal process_arp_pkg_64_U0_arpTableInsertFifo_V_write : STD_LOGIC;
    signal process_arp_pkg_64_U0_arpReplyMetaFifo_V_din : STD_LOGIC_VECTOR (127 downto 0);
    signal process_arp_pkg_64_U0_arpReplyMetaFifo_V_write : STD_LOGIC;
    signal process_arp_pkg_64_U0_s_axis_TREADY : STD_LOGIC;
    signal process_arp_pkg_64_U0_regRequestCount_V : STD_LOGIC_VECTOR (15 downto 0);
    signal process_arp_pkg_64_U0_regRequestCount_V_ap_vld : STD_LOGIC;
    signal process_arp_pkg_64_U0_regReplyCount_V : STD_LOGIC_VECTOR (15 downto 0);
    signal process_arp_pkg_64_U0_regReplyCount_V_ap_vld : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal generate_arp_pkg_64_U0_ap_start : STD_LOGIC;
    signal generate_arp_pkg_64_U0_ap_done : STD_LOGIC;
    signal generate_arp_pkg_64_U0_ap_continue : STD_LOGIC;
    signal generate_arp_pkg_64_U0_ap_idle : STD_LOGIC;
    signal generate_arp_pkg_64_U0_ap_ready : STD_LOGIC;
    signal generate_arp_pkg_64_U0_arpRequestMetaFifo_V_read : STD_LOGIC;
    signal generate_arp_pkg_64_U0_arpReplyMetaFifo_V_read : STD_LOGIC;
    signal generate_arp_pkg_64_U0_m_axis_TDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal generate_arp_pkg_64_U0_m_axis_TVALID : STD_LOGIC;
    signal generate_arp_pkg_64_U0_m_axis_TKEEP : STD_LOGIC_VECTOR (7 downto 0);
    signal generate_arp_pkg_64_U0_m_axis_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal arp_table_U0_ap_start : STD_LOGIC;
    signal arp_table_U0_ap_done : STD_LOGIC;
    signal arp_table_U0_ap_continue : STD_LOGIC;
    signal arp_table_U0_ap_idle : STD_LOGIC;
    signal arp_table_U0_ap_ready : STD_LOGIC;
    signal arp_table_U0_arpTableInsertFifo_V_read : STD_LOGIC;
    signal arp_table_U0_arpRequestMetaFifo_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal arp_table_U0_arpRequestMetaFifo_V_write : STD_LOGIC;
    signal arp_table_U0_macIpEncode_req_V_V_TREADY : STD_LOGIC;
    signal arp_table_U0_hostIpEncode_req_V_V_TREADY : STD_LOGIC;
    signal arp_table_U0_macIpEncode_rsp_V_TDATA : STD_LOGIC_VECTOR (55 downto 0);
    signal arp_table_U0_macIpEncode_rsp_V_TVALID : STD_LOGIC;
    signal arp_table_U0_hostIpEncode_rsp_V_TDATA : STD_LOGIC_VECTOR (55 downto 0);
    signal arp_table_U0_hostIpEncode_rsp_V_TVALID : STD_LOGIC;
    signal arpReplyMetaFifo_V_full_n : STD_LOGIC;
    signal arpReplyMetaFifo_V_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal arpReplyMetaFifo_V_empty_n : STD_LOGIC;
    signal arpTableInsertFifo_V_full_n : STD_LOGIC;
    signal arpTableInsertFifo_V_dout : STD_LOGIC_VECTOR (80 downto 0);
    signal arpTableInsertFifo_V_empty_n : STD_LOGIC;
    signal arpRequestMetaFifo_V_full_n : STD_LOGIC;
    signal arpRequestMetaFifo_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal arpRequestMetaFifo_V_empty_n : STD_LOGIC;

    component process_arp_pkg_64_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        s_axis_TVALID : IN STD_LOGIC;
        arpTableInsertFifo_V_din : OUT STD_LOGIC_VECTOR (80 downto 0);
        arpTableInsertFifo_V_full_n : IN STD_LOGIC;
        arpTableInsertFifo_V_write : OUT STD_LOGIC;
        arpReplyMetaFifo_V_din : OUT STD_LOGIC_VECTOR (127 downto 0);
        arpReplyMetaFifo_V_full_n : IN STD_LOGIC;
        arpReplyMetaFifo_V_write : OUT STD_LOGIC;
        s_axis_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        s_axis_TREADY : OUT STD_LOGIC;
        s_axis_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
        s_axis_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        myIpAddress_V : IN STD_LOGIC_VECTOR (31 downto 0);
        regRequestCount_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        regRequestCount_V_ap_vld : OUT STD_LOGIC;
        regReplyCount_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        regReplyCount_V_ap_vld : OUT STD_LOGIC );
    end component;


    component generate_arp_pkg_64_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        arpRequestMetaFifo_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        arpRequestMetaFifo_V_empty_n : IN STD_LOGIC;
        arpRequestMetaFifo_V_read : OUT STD_LOGIC;
        arpReplyMetaFifo_V_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        arpReplyMetaFifo_V_empty_n : IN STD_LOGIC;
        arpReplyMetaFifo_V_read : OUT STD_LOGIC;
        m_axis_TREADY : IN STD_LOGIC;
        m_axis_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axis_TVALID : OUT STD_LOGIC;
        m_axis_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axis_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        myMacAddress_V : IN STD_LOGIC_VECTOR (47 downto 0);
        myIpAddress_V : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component arp_table IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        hostIpEncode_req_V_V_TVALID : IN STD_LOGIC;
        macIpEncode_req_V_V_TVALID : IN STD_LOGIC;
        arpTableInsertFifo_V_dout : IN STD_LOGIC_VECTOR (80 downto 0);
        arpTableInsertFifo_V_empty_n : IN STD_LOGIC;
        arpTableInsertFifo_V_read : OUT STD_LOGIC;
        hostIpEncode_rsp_V_TREADY : IN STD_LOGIC;
        macIpEncode_rsp_V_TREADY : IN STD_LOGIC;
        arpRequestMetaFifo_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        arpRequestMetaFifo_V_full_n : IN STD_LOGIC;
        arpRequestMetaFifo_V_write : OUT STD_LOGIC;
        macIpEncode_req_V_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        macIpEncode_req_V_V_TREADY : OUT STD_LOGIC;
        hostIpEncode_req_V_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        hostIpEncode_req_V_V_TREADY : OUT STD_LOGIC;
        macIpEncode_rsp_V_TDATA : OUT STD_LOGIC_VECTOR (55 downto 0);
        macIpEncode_rsp_V_TVALID : OUT STD_LOGIC;
        hostIpEncode_rsp_V_TDATA : OUT STD_LOGIC_VECTOR (55 downto 0);
        hostIpEncode_rsp_V_TVALID : OUT STD_LOGIC );
    end component;


    component fifo_w128_d4_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (127 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (127 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w81_d4_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (80 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (80 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d4_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    process_arp_pkg_64_U0 : component process_arp_pkg_64_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => process_arp_pkg_64_U0_ap_start,
        ap_done => process_arp_pkg_64_U0_ap_done,
        ap_continue => process_arp_pkg_64_U0_ap_continue,
        ap_idle => process_arp_pkg_64_U0_ap_idle,
        ap_ready => process_arp_pkg_64_U0_ap_ready,
        s_axis_TVALID => s_axis_TVALID,
        arpTableInsertFifo_V_din => process_arp_pkg_64_U0_arpTableInsertFifo_V_din,
        arpTableInsertFifo_V_full_n => arpTableInsertFifo_V_full_n,
        arpTableInsertFifo_V_write => process_arp_pkg_64_U0_arpTableInsertFifo_V_write,
        arpReplyMetaFifo_V_din => process_arp_pkg_64_U0_arpReplyMetaFifo_V_din,
        arpReplyMetaFifo_V_full_n => arpReplyMetaFifo_V_full_n,
        arpReplyMetaFifo_V_write => process_arp_pkg_64_U0_arpReplyMetaFifo_V_write,
        s_axis_TDATA => s_axis_TDATA,
        s_axis_TREADY => process_arp_pkg_64_U0_s_axis_TREADY,
        s_axis_TKEEP => s_axis_TKEEP,
        s_axis_TLAST => s_axis_TLAST,
        myIpAddress_V => myIpAddress_V,
        regRequestCount_V => process_arp_pkg_64_U0_regRequestCount_V,
        regRequestCount_V_ap_vld => process_arp_pkg_64_U0_regRequestCount_V_ap_vld,
        regReplyCount_V => process_arp_pkg_64_U0_regReplyCount_V,
        regReplyCount_V_ap_vld => process_arp_pkg_64_U0_regReplyCount_V_ap_vld);

    generate_arp_pkg_64_U0 : component generate_arp_pkg_64_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => generate_arp_pkg_64_U0_ap_start,
        ap_done => generate_arp_pkg_64_U0_ap_done,
        ap_continue => generate_arp_pkg_64_U0_ap_continue,
        ap_idle => generate_arp_pkg_64_U0_ap_idle,
        ap_ready => generate_arp_pkg_64_U0_ap_ready,
        arpRequestMetaFifo_V_dout => arpRequestMetaFifo_V_dout,
        arpRequestMetaFifo_V_empty_n => arpRequestMetaFifo_V_empty_n,
        arpRequestMetaFifo_V_read => generate_arp_pkg_64_U0_arpRequestMetaFifo_V_read,
        arpReplyMetaFifo_V_dout => arpReplyMetaFifo_V_dout,
        arpReplyMetaFifo_V_empty_n => arpReplyMetaFifo_V_empty_n,
        arpReplyMetaFifo_V_read => generate_arp_pkg_64_U0_arpReplyMetaFifo_V_read,
        m_axis_TREADY => m_axis_TREADY,
        m_axis_TDATA => generate_arp_pkg_64_U0_m_axis_TDATA,
        m_axis_TVALID => generate_arp_pkg_64_U0_m_axis_TVALID,
        m_axis_TKEEP => generate_arp_pkg_64_U0_m_axis_TKEEP,
        m_axis_TLAST => generate_arp_pkg_64_U0_m_axis_TLAST,
        myMacAddress_V => myMacAddress_V,
        myIpAddress_V => myIpAddress_V);

    arp_table_U0 : component arp_table
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => arp_table_U0_ap_start,
        ap_done => arp_table_U0_ap_done,
        ap_continue => arp_table_U0_ap_continue,
        ap_idle => arp_table_U0_ap_idle,
        ap_ready => arp_table_U0_ap_ready,
        hostIpEncode_req_V_V_TVALID => s_axis_host_arp_lookup_request_V_V_TVALID,
        macIpEncode_req_V_V_TVALID => s_axis_arp_lookup_request_V_V_TVALID,
        arpTableInsertFifo_V_dout => arpTableInsertFifo_V_dout,
        arpTableInsertFifo_V_empty_n => arpTableInsertFifo_V_empty_n,
        arpTableInsertFifo_V_read => arp_table_U0_arpTableInsertFifo_V_read,
        hostIpEncode_rsp_V_TREADY => m_axis_host_arp_lookup_reply_V_TREADY,
        macIpEncode_rsp_V_TREADY => m_axis_arp_lookup_reply_V_TREADY,
        arpRequestMetaFifo_V_din => arp_table_U0_arpRequestMetaFifo_V_din,
        arpRequestMetaFifo_V_full_n => arpRequestMetaFifo_V_full_n,
        arpRequestMetaFifo_V_write => arp_table_U0_arpRequestMetaFifo_V_write,
        macIpEncode_req_V_V_TDATA => s_axis_arp_lookup_request_V_V_TDATA,
        macIpEncode_req_V_V_TREADY => arp_table_U0_macIpEncode_req_V_V_TREADY,
        hostIpEncode_req_V_V_TDATA => s_axis_host_arp_lookup_request_V_V_TDATA,
        hostIpEncode_req_V_V_TREADY => arp_table_U0_hostIpEncode_req_V_V_TREADY,
        macIpEncode_rsp_V_TDATA => arp_table_U0_macIpEncode_rsp_V_TDATA,
        macIpEncode_rsp_V_TVALID => arp_table_U0_macIpEncode_rsp_V_TVALID,
        hostIpEncode_rsp_V_TDATA => arp_table_U0_hostIpEncode_rsp_V_TDATA,
        hostIpEncode_rsp_V_TVALID => arp_table_U0_hostIpEncode_rsp_V_TVALID);

    arpReplyMetaFifo_V_U : component fifo_w128_d4_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => process_arp_pkg_64_U0_arpReplyMetaFifo_V_din,
        if_full_n => arpReplyMetaFifo_V_full_n,
        if_write => process_arp_pkg_64_U0_arpReplyMetaFifo_V_write,
        if_dout => arpReplyMetaFifo_V_dout,
        if_empty_n => arpReplyMetaFifo_V_empty_n,
        if_read => generate_arp_pkg_64_U0_arpReplyMetaFifo_V_read);

    arpTableInsertFifo_V_U : component fifo_w81_d4_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => process_arp_pkg_64_U0_arpTableInsertFifo_V_din,
        if_full_n => arpTableInsertFifo_V_full_n,
        if_write => process_arp_pkg_64_U0_arpTableInsertFifo_V_write,
        if_dout => arpTableInsertFifo_V_dout,
        if_empty_n => arpTableInsertFifo_V_empty_n,
        if_read => arp_table_U0_arpTableInsertFifo_V_read);

    arpRequestMetaFifo_V_U : component fifo_w32_d4_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => arp_table_U0_arpRequestMetaFifo_V_din,
        if_full_n => arpRequestMetaFifo_V_full_n,
        if_write => arp_table_U0_arpRequestMetaFifo_V_write,
        if_dout => arpRequestMetaFifo_V_dout,
        if_empty_n => arpRequestMetaFifo_V_empty_n,
        if_read => generate_arp_pkg_64_U0_arpRequestMetaFifo_V_read);





    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_continue <= ap_const_logic_0;
    arp_table_U0_ap_continue <= ap_const_logic_1;
    arp_table_U0_ap_start <= ap_const_logic_1;
    generate_arp_pkg_64_U0_ap_continue <= ap_const_logic_1;
    generate_arp_pkg_64_U0_ap_start <= ap_const_logic_1;
    m_axis_TDATA <= generate_arp_pkg_64_U0_m_axis_TDATA;
    m_axis_TKEEP <= generate_arp_pkg_64_U0_m_axis_TKEEP;
    m_axis_TLAST <= generate_arp_pkg_64_U0_m_axis_TLAST;
    m_axis_TVALID <= generate_arp_pkg_64_U0_m_axis_TVALID;
    m_axis_arp_lookup_reply_V_TDATA <= arp_table_U0_macIpEncode_rsp_V_TDATA;
    m_axis_arp_lookup_reply_V_TVALID <= arp_table_U0_macIpEncode_rsp_V_TVALID;
    m_axis_host_arp_lookup_reply_V_TDATA <= arp_table_U0_hostIpEncode_rsp_V_TDATA;
    m_axis_host_arp_lookup_reply_V_TVALID <= arp_table_U0_hostIpEncode_rsp_V_TVALID;
    process_arp_pkg_64_U0_ap_continue <= ap_const_logic_1;
    process_arp_pkg_64_U0_ap_start <= ap_const_logic_1;
    regReplyCount_V <= process_arp_pkg_64_U0_regReplyCount_V;
    regReplyCount_V_ap_vld <= process_arp_pkg_64_U0_regReplyCount_V_ap_vld;
    regRequestCount_V <= process_arp_pkg_64_U0_regRequestCount_V;
    regRequestCount_V_ap_vld <= process_arp_pkg_64_U0_regRequestCount_V_ap_vld;
    s_axis_TREADY <= process_arp_pkg_64_U0_s_axis_TREADY;
    s_axis_arp_lookup_request_V_V_TREADY <= arp_table_U0_macIpEncode_req_V_V_TREADY;
    s_axis_host_arp_lookup_request_V_V_TREADY <= arp_table_U0_hostIpEncode_req_V_V_TREADY;
end behav;
